<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Warp your mobile development</title><description>Share ideas and best practices about mobile development</description><link>http://blog.warpfactor.io</link><language>en</language><lastBuildDate>Tue, 2 Mar 2021 20:26:01 -0500</lastBuildDate><pubDate>Tue, 2 Mar 2021 20:26:01 -0500</pubDate><ttl>250</ttl><atom:link href="http://blog.warpfactor.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">http://blog.warpfactor.io/posts/2021-02-13-StateMachineDSL</guid><title>A DSL for state machines in Swift</title><description>State machines are great tools to describe systems with a finite number of states. They are predictable and testable, which is something we praise for as developers. State machines can be defined in a pretty abstract way, which makes it a good candidate for a Domain Specific Language implementation. In this article, we will try to create a DSL that can describe state machines in Swift and use it in a feedback loop architecture.</description><link>http://blog.warpfactor.io/posts/2021-02-13-StateMachineDSL</link><pubDate>Sat, 13 Feb 2021 17:01:00 -0500</pubDate><content:encoded><![CDATA[<h1>About state machines</h1><blockquote><p>A state machine is an abstract machine that can only be in one of a finite number of states at any given time. The state machine can change from one state to another in response to some external events. The change from one state to another is called a transition. A state machine is defined by a list of its states, its initial state, and the conditions for each transition.</p></blockquote><p>A State machine is a simple, yet powerful tool to build a feature in an application.</p><ul><li>It is predictable, so it is testable</li><li>It is a reference you can share with your teammates to reason about a feature</li><li>It can be described in an abstract way and then be implemented with whatever programming language</li></ul><p>As developers, and especially mobile developers, we often have to implement features that can be summed up by the following screens:</p><img src="http://blog.warpfactor.io/Images/2021-02-13-StateMachineDSL/screens.png"/><p>Each <em>screen-state</em> has to be exclusive. We want our screens to be consistent, and to display one state at a time. A screen cannot be both Saved and Failed.</p><p>To enforce this, we can take advantage of finite state machines as they ensure that two states cannot overlap.</p><img src="http://blog.warpfactor.io/Images/2021-02-13-StateMachineDSL/state-machine.png"/><p>As you can see, the state machine matches exactly the sequence of screens we described earlier. Each new state is computed based on the <em>current state</em> plus an <em>input</em> (such as a user input or a network call result).</p><p>Lately, a lot of architectures, mostly unidirectional architectures, tend to promote "state machine like" patterns:</p><ul><li><a href="https://dennisreimann.de/articles/elm-architecture-overview.html">MVU/ELM</a></li><li><a href="https://redux.js.org/style-guide/style-guide#treat-reducers-as-state-machines">Redux</a></li><li>Feedback Loops: <a href="https://github.com/CombineCommunity/Feedbacks">Feedbacks</a>, <a href="https://github.com/CombineCommunity/Feedbacks">RxFeedback</a>, <a href="https://github.com/ReactiveCocoa/Loop">Loop</a></li></ul><p>Most of the time, they implement their state machines thanks to a <strong>reducer</strong> function. A reducer is a <a href="https://en.wikipedia.org/wiki/Pure_function">pure function</a> that takes the current state, an event, and outputs the new state.</p><p>Here is our state machine implemented in a pseudo-code:</p><pre><code><div class="highlight"><span></span><span class="n">reducer</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">,</span> <span class="n">event</span><span class="p">:</span> <span class="n">Event</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">State</span> <span class="p">{</span>
  <span class="n">IF</span> <span class="n">state</span> <span class="p">=</span> <span class="n">Loading</span> <span class="n">AND</span> <span class="n">event</span> <span class="p">=</span> <span class="n">LoadingSuccessful</span> <span class="n">RETURN</span> <span class="n">Saving</span>
  <span class="n">IF</span> <span class="n">state</span> <span class="p">=</span> <span class="n">Loading</span> <span class="n">AND</span> <span class="n">event</span> <span class="p">=</span> <span class="n">LoadingFailed</span> <span class="n">RETURN</span> <span class="n">Failed</span>
  <span class="n">IF</span> <span class="n">state</span> <span class="p">=</span> <span class="n">Saving</span> <span class="n">AND</span> <span class="n">event</span> <span class="p">=</span> <span class="n">SavingSuccessful</span> <span class="n">RETURN</span> <span class="n">Saved</span>
  <span class="n">IF</span> <span class="n">state</span> <span class="p">=</span> <span class="n">Saving</span> <span class="n">AND</span> <span class="n">event</span> <span class="p">=</span> <span class="n">SavingFailed</span> <span class="n">RETURN</span> <span class="n">Failed</span>
<span class="p">}</span>
</div></code></pre><h1>What is a DSL ?</h1><blockquote><p>Without DSLs, there is no World Wide Web as we know it!</p></blockquote><p>A domain-specific language (DSL) is a computer language specialized to a particular application domain. <strong>HTML</strong> for instance, is a domain-specific markup language, whose domain is to describe the layout of a document displaying information. The domain of the HTML language contains concepts such as <strong>HEAD</strong>, <strong>BODY</strong>, <strong>TABLE</strong>, <strong>IMG</strong>. These keywords only have meaning within the context of the syntax defined by the HTML DSL.</p><p>We can make an interesting connection between DSLs and ontologies. An <a href="https://en.wikipedia.org/wiki/Ontology_(information_science">ontology</a> describes a domain of knowledge by defining its constituting concepts and the relationships between them. There are some languages to model ontologies, such as <a href="https://en.wikipedia.org/wiki/Resource_Description_Framework">RDF</a> or <a href="https://en.wikipedia.org/wiki/Web_Ontology_Language">OWL</a>. In a way, those languages are Meta DSLs, as they offer generic syntaxes to define a domain. We could say that a DSL is a concrete implementation of an ontology.</p><p>There are several types of DSLs:</p><ul><li>External DSLs, such as HTML. They require an independent interpreter to be executed.</li><li>Internal DSLs (or embedded DSL) are defined in the terms of a host language. The great thing about them is that the language compiler will check the document to ensure it respects both your DSL and the host programming language syntax. In addition to using custom terms from the domain, you are also able to use traditional programming statements (if, else, switch, …) which will dynamically impact its interpretation.</li></ul><p>There are some famous examples of DSLs: HTLM, Gradle, SQL, SwiftUI, Gherkin.</p><img src="http://blog.warpfactor.io/Images/2021-02-13-StateMachineDSL/gherkin.png"/><p><em>Here is a unit test expressed in the Gherkin DSL. </em></p><h1>Why DSLs ?</h1><p>DSLs are meant for experts of a domain to be able to create content and share it without having to deal with the complexity of a fully featured programming language.</p><p>A DSL, having a syntax limited to a precise domain, can be modelled with a dedicated graphical tool and can also lead to code and documentation generation. The experts can focus on their domain from a high level perspective and still generate an optimized source code.</p><p><a href="https://www.jetbrains.com/mps/">JetBrains MPS</a> is a nice example of a graphical tool that one can use to elaborate and use DSLs. From a process designed thanks to a DSL, it can generate source code in programming languages such as Java, C, Javascript, etc. The code can then be integrated in an enterprise information system to execute the processes defined by the experts. This kind of tool attempts to fill the gap between domain experts and developers.</p><p>Embedded DSLs are more developer oriented, and are generally meant to provide libraries with a narrowed syntax compared to their host language.</p><p>For instance, we can imagine the previous Gherkin example being written thanks to an embedded DSL inside a Swift Unit Test.</p><pre><code><div class="highlight"><span></span><span class="kd">var</span> <span class="nv">balance</span><span class="p">:</span> <span class="nb">Int</span><span class="p">?</span>

<span class="n">Scenario</span><span class="p">(</span><span class="s">&quot;A user attempts to withdraw more money than they have in their account&quot;</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">Given</span><span class="p">(</span><span class="s">&quot;John has a valid Credit or Debit card and his balance is 20$&quot;</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">balance</span> <span class="p">=</span> <span class="mi">20</span>
  <span class="p">}</span>
	
  <span class="n">When</span><span class="p">(</span><span class="s">&quot;John withdraws 40$&quot;</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">balance</span> <span class="o">-=</span> <span class="mi">40</span>
  <span class="p">}</span>
	
  <span class="n">Then</span> <span class="p">{</span>
    <span class="n">Error</span><span class="p">(</span><span class="s">&quot;The ATM displays an error&quot;</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">ATM</span><span class="p">.</span><span class="n">Error</span><span class="p">.</span><span class="n">notEnoughCredit</span>
    <span class="p">}</span>
    <span class="n">Result</span><span class="p">(</span><span class="s">&quot;The balance is still 20$&quot;</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">balance</span> <span class="p">==</span> <span class="mi">20</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Under the hood, this DSL will be translated into <code>XCTest</code> related code.</p><p>One advantage of embedded DSLs for languages like Swift and Kotlin is their very similar syntax which allows for sharing ideas and implementations, and also for the ease of cross platform reviews.</p><h1>Modeling state machines with a DSL</h1><p>State machines have fairly simple concepts such as: State, Event, Transition. The resulting DSL should be pretty easy to implement, at least from a syntax perspective.</p><p>Nevertheless, implementing a <strong>finite state machine</strong> DSL might come with some challenges regarding the Swift type system, as "<strong>finite</strong>" implies to restrain the number of possible states.</p><h2>Algebraic Types</h2><p>In order to pick the appropriate type to model a State, we first need to understand algebraic types.</p><p>In computer science, algebraic types are data types that can be composed of other types. Usually, algebraic types are split into two categories: product types and sum types.</p><p><strong>Product types</strong> can contain several fields, and the number of different values for this type is the product of the possible values of each field. In Swift, <strong>Struct</strong> is an algebraic product type.</p><pre><code><div class="highlight"><span></span><span class="kd">enum</span> <span class="nc">Letter</span> <span class="p">{</span>
  <span class="k">case</span> <span class="n">A</span>
  <span class="k">case</span> <span class="n">B</span>
  <span class="p">...</span>
  <span class="k">case</span> <span class="n">Z</span>
<span class="p">}</span>

<span class="kd">enum</span> <span class="nc">Number</span> <span class="p">{</span>
  <span class="k">case</span> <span class="mi">1</span>
  <span class="k">case</span> <span class="mi">2</span>
  <span class="p">...</span>
  <span class="k">case</span> <span class="mi">10</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="nc">Reference</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nv">letter</span><span class="p">:</span> <span class="n">Letter</span>
  <span class="kd">let</span> <span class="nv">number</span><span class="p">:</span> <span class="n">Number</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nv">ref1</span> <span class="p">=</span> <span class="n">Reference</span><span class="p">(</span><span class="n">letter</span><span class="p">:</span> <span class="p">.</span><span class="n">A</span><span class="p">,</span> <span class="n">number</span><span class="p">:</span> <span class="p">.</span><span class="mi">1</span><span class="p">)</span>
<span class="kd">let</span> <span class="nv">ref2</span> <span class="p">=</span> <span class="n">Reference</span><span class="p">(</span><span class="n">letter</span><span class="p">:</span> <span class="p">.</span><span class="n">A</span><span class="p">,</span> <span class="n">number</span><span class="p">:</span> <span class="p">.</span><span class="mi">2</span><span class="p">)</span>
<span class="p">...</span>
<span class="kd">let</span> <span class="nv">ref260</span> <span class="p">=</span> <span class="n">Reference</span><span class="p">(</span><span class="n">letter</span><span class="p">:</span> <span class="p">.</span><span class="n">Z</span><span class="p">,</span> <span class="n">number</span><span class="p">:</span> <span class="p">.</span><span class="mi">10</span><span class="p">)</span>
</div></code></pre><p>As you can see, the number of possible values for the <strong>Reference</strong> type is equal to the product of all the possible values of its fields: <strong>26 x 10 = 260</strong>.</p><p><strong>Sum types</strong>, aka "tagged unions", stand for types that can have one value at a time among a finite set of possible values. The numer of different values for this type if the sum of all its possible exclusive values. In Swift, <strong>Enum</strong> is an algebraic sum type.</p><pre><code><div class="highlight"><span></span><span class="kd">enum</span> <span class="nc">Reference</span> <span class="p">{</span>
  <span class="k">case</span> <span class="n">letter</span><span class="p">(</span><span class="n">Letter</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">number</span><span class="p">(</span><span class="n">Number</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nv">ref1</span> <span class="p">=</span> <span class="n">Reference</span><span class="p">.</span><span class="n">letter</span><span class="p">(.</span><span class="n">A</span><span class="p">)</span>
<span class="kd">let</span> <span class="nv">ref2</span> <span class="p">=</span> <span class="n">Reference</span><span class="p">.</span><span class="n">letter</span><span class="p">(.</span><span class="n">B</span><span class="p">)</span>
<span class="p">...</span>
<span class="kd">let</span> <span class="nv">ref36</span> <span class="p">=</span> <span class="n">Reference</span><span class="p">.</span><span class="n">number</span><span class="p">(.</span><span class="mi">10</span><span class="p">)</span>
</div></code></pre><p>As you can see, the number of possible values for the <strong>Reference</strong> type is equal to the sum of all the possible values of each case: <strong>26 + 10 = 36</strong>.</p><h2>What does it mean regarding states ?</h2><p>In order to implement a finite state machine, we need the states to have a finite number of values, and we need them to be mutually exclusive. In other words, we need them to be represented by sum types, let's see why.</p><p>Product types are bad candidates as they allow to mix incompatible values. For instance:</p><pre><code><div class="highlight"><span></span><span class="kd">enum</span> <span class="nc">MyError</span> <span class="p">{</span>
  <span class="k">case</span> <span class="n">network</span>
  <span class="k">case</span> <span class="n">database</span>
  <span class="k">case</span> <span class="n">filesystem</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="nc">MyState</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nv">error</span><span class="p">:</span> <span class="n">MyError</span><span class="p">?</span>
  <span class="kd">let</span> <span class="nv">value</span><span class="p">:</span> <span class="nb">Bool</span><span class="p">?</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nv">state1</span> <span class="p">=</span> <span class="n">MyState</span><span class="p">(</span><span class="n">error</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
<span class="kd">let</span> <span class="nv">state2</span> <span class="p">=</span> <span class="n">MyState</span><span class="p">(</span><span class="n">error</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
<span class="kd">let</span> <span class="nv">state3</span> <span class="p">=</span> <span class="n">MyState</span><span class="p">(</span><span class="n">error</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="kc">false</span><span class="p">)</span>
<span class="kd">let</span> <span class="nv">state4</span> <span class="p">=</span> <span class="n">MyState</span><span class="p">(</span><span class="n">error</span><span class="p">:</span> <span class="p">.</span><span class="n">network</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
<span class="p">...</span>
<span class="kd">let</span> <span class="nv">state12</span> <span class="p">=</span> <span class="n">MyState</span><span class="p">(</span><span class="n">error</span><span class="p">:</span> <span class="p">.</span><span class="n">filesystem</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="kc">false</span><span class="p">)</span>
</div></code></pre><p>Using MyState as a struct could lead to inconsistent behaviours since it can be simultaneously an error and a valid value. There are <strong>4 x 3 = 12</strong> fuzzy possible states.</p><p>On the other hand, sum types are much more restrictive:</p><pre><code><div class="highlight"><span></span><span class="kd">enum</span> <span class="nc">MyState</span> <span class="p">{</span>
  <span class="k">case</span> <span class="n">error</span><span class="p">(</span><span class="n">MyError</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">value</span><span class="p">(</span><span class="nb">Bool</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nv">state1</span> <span class="p">=</span> <span class="n">MyState</span><span class="p">.</span><span class="n">error</span><span class="p">(.</span><span class="n">network</span><span class="p">)</span>
<span class="p">...</span>
<span class="kd">let</span> <span class="nv">state5</span> <span class="p">=</span> <span class="n">MyState</span><span class="p">.</span><span class="n">value</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span>
</div></code></pre><p>Using MyState as an enum allows only: <strong>3 + 2 = 5</strong> possible mutually exclusive states.</p><h2>But there is an issue with enums</h2><p>When designing a DSL, one of the main goals is to provide a simple, yet expressive syntax. You want it to be as close as possible to natural language. If we had to define the transition between a <strong>saving</strong> and a <strong>saved</strong> state, we could want to write something like:</p><pre><code><div class="highlight"><span></span><span class="kd">enum</span> <span class="nc">MyState</span> <span class="p">{</span>
  <span class="k">case</span> <span class="n">loading</span>
  <span class="k">case</span> <span class="n">saving</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="n">Data</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">saved</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="n">Data</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">failed</span>
<span class="p">}</span>

<span class="kd">enum</span> <span class="nc">MyEvent</span> <span class="p">{</span>
  <span class="k">case</span> <span class="n">loadingSuccessful</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="n">Data</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">loadingFailed</span>
  <span class="k">case</span> <span class="n">savingSuccessful</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="n">Data</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">savingFailed</span>
<span class="p">}</span>

<span class="n">Transition</span><span class="p">(</span><span class="n">from</span><span class="p">:</span> <span class="n">MyState</span><span class="p">.</span><span class="n">saving</span><span class="p">(</span><span class="kd">let</span> <span class="nv">data</span><span class="p">),</span> <span class="n">on</span><span class="p">:</span> <span class="n">MyEvent</span><span class="p">.</span><span class="n">savingSuccessful</span><span class="p">,</span> <span class="n">then</span><span class="p">:</span> <span class="p">{</span> <span class="n">data</span> <span class="k">in</span>
  <span class="k">return</span> <span class="n">MyState</span><span class="p">.</span><span class="n">saved</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="p">})</span>
</div></code></pre><p>The problem with this code is that <code>MyState.saving(let data)</code> won't even compile since extracting an embedded value must occur in the context of a pattern matching (<code>switch</code>, <code>if case let</code>). We could include some pattern matching in this DSL, but it would make it pretty ugly to read:</p><pre><code><div class="highlight"><span></span><span class="n">Transition</span><span class="p">(</span>
  <span class="n">from</span><span class="p">:</span> <span class="p">{</span> <span class="n">state</span> <span class="k">in</span>
    <span class="k">guard</span> <span class="k">case</span> <span class="kd">let</span> <span class="p">.</span><span class="n">saving</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="p">=</span> <span class="n">state</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">nil</span> <span class="p">}</span>
    <span class="k">return</span> <span class="n">data</span> 
  <span class="p">},</span>
  <span class="n">on</span><span class="p">:</span> <span class="n">MyEvent</span><span class="p">.</span><span class="n">savingSuccessful</span><span class="p">,</span>
  <span class="n">then</span><span class="p">:</span> <span class="p">{</span> <span class="n">extractedData</span> <span class="k">in</span>
    <span class="k">guard</span> <span class="kd">let</span> <span class="nv">data</span> <span class="p">=</span> <span class="n">extractedData</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="n">MyState</span><span class="p">.</span><span class="n">failed</span> <span class="p">}</span>
    <span class="k">return</span> <span class="n">MyState</span><span class="p">.</span><span class="n">saved</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">)</span>
</div></code></pre><p>If I had to use a DSL, I would not want to use this one.</p><p>We need a type that can embed values and at the same time provide a unique identifier for each state and event.</p><p>What if we use structs to model our states/events, and leverage the struct type as a unique identifier ? After all, concrete types can be considered as mutually exclusive in the set of all possible Swift types. If you are familiar with Kotlin, it looks a lot like the <code>sealed class</code> concept.</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">Saving</span> <span class="p">{</span> <span class="kd">let</span> <span class="nv">data</span><span class="p">:</span> <span class="n">Data</span> <span class="p">}</span>
<span class="kd">struct</span> <span class="nc">Saved</span> <span class="p">{</span> <span class="kd">let</span> <span class="nv">data</span><span class="p">:</span> <span class="n">Data</span> <span class="p">}</span>

<span class="kd">struct</span> <span class="nc">SavingSuccessful</span> <span class="p">{</span> <span class="kd">let</span> <span class="nv">data</span><span class="p">:</span> <span class="n">Data</span> <span class="p">}</span>

<span class="n">Transition</span><span class="p">(</span><span class="n">from</span><span class="p">:</span> <span class="n">Saving</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="n">SavingSuccessful</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">then</span><span class="p">:</span> <span class="p">{</span> <span class="n">state</span><span class="p">,</span> <span class="n">event</span> <span class="k">in</span>
  <span class="n">Saved</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="n">event</span><span class="p">.</span><span class="n">data</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// or even shorter:</span>

<span class="n">Transition</span><span class="p">(</span><span class="n">from</span><span class="p">:</span> <span class="n">Saving</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="n">SavingSuccessful</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">then</span><span class="p">:</span> <span class="p">{</span> <span class="n">Saved</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="nv">$1</span><span class="p">.</span><span class="n">data</span><span class="p">)</span> <span class="p">}</span>
</div></code></pre><p>It looks definitely better.</p><p>My point here is to not assert that one type is better than others to model a state/event concept in a state machine. Each type has its pros and cons. For instance, <a href="https://github.com/pointfreeco/swift-case-paths">Pointfree has released a library</a> to deal with enum's embedded values as keypaths. That could make enums good candidates to be used in a state machine DSL, while keeping a nice syntax.</p><p>I made the choice to use struct's type as an identifier because it fits the need of state machine DSL without depending on a third party library; moreover, structs are compatible with pattern matching, which will be helpful to interpret the current state of a system when we need it.</p><h1>Result builder</h1><p>Now that we've chosen the data types that will model our states and events, we can design our DSL. Obviously, the chances are great that a state machine has more than one transition. The machine will be <strong>composed</strong> of several transitions or group of transitions. The important word here is: <strong>composed</strong>. As soon as an entity is composed of several sub-entities, we can leverage the <strong>builder pattern</strong> to construct the root entity.</p><p>For instance, if a state machine declares 3 transitions:</p><pre><code><div class="highlight"><span></span><span class="kd">let</span> <span class="nv">transitions</span> <span class="p">=</span> <span class="n">Transitions</span><span class="p">()</span>
  <span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">From</span><span class="p">(</span><span class="n">Loading</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="n">LoadingSuccessful</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">then</span><span class="p">:</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}))</span>
  <span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">From</span><span class="p">(</span><span class="n">Loading</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="n">LoadingFailure</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">then</span><span class="p">:</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}))</span>
  <span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">From</span><span class="p">(</span><span class="n">Saving</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="n">SavingSuccessful</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">then</span><span class="p">:</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}))</span>
  <span class="p">.</span><span class="n">build</span><span class="p">()</span>
	
<span class="c1">// or</span>

<span class="kd">let</span> <span class="nv">transitions</span> <span class="p">=</span> <span class="n">Transitions</span><span class="p">([</span>
  <span class="n">From</span><span class="p">(</span><span class="n">Loading</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="n">LoadingSuccessful</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">then</span><span class="p">:</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}),</span>
  <span class="n">From</span><span class="p">(</span><span class="n">Loading</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="n">LoadingFailure</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">then</span><span class="p">:</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}),</span>
  <span class="n">From</span><span class="p">(</span><span class="n">Saving</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="n">SavingSuccessful</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">then</span><span class="p">:</span> <span class="p">{</span> <span class="p">...</span> <span class="p">})</span>
<span class="p">])</span>
</div></code></pre><p>Altough it is valid Swift, it is not a nice API, especially in the context of a DSL.</p><p>Within the Apple programming ecosystem, there is another domain that heavily relies on composition: UI frameworks, and particularly SwiftUI. We can take advantage of one of the mechanisms SwiftUI uses to provide a nice way of compositing transitions: <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0289-result-builders.md"><strong>Result Builder</strong></a>.</p><p>Basically, a <strong>Result Builder</strong> is just a way to aggregate several inputs and compute a result with them.</p><pre><code><div class="highlight"><span></span><span class="p">@</span><span class="n">resultBuilder</span>
<span class="kd">struct</span> <span class="nc">StringBuilder</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="kd">func</span> <span class="nf">buildBlock</span><span class="p">(</span><span class="kc">_</span> <span class="n">inputs</span><span class="p">:</span> <span class="nb">String</span><span class="p">...)</span> <span class="p">-&gt;</span> <span class="nb">String</span> <span class="p">{</span>
     <span class="n">inputs</span><span class="p">.</span><span class="n">joined</span><span class="p">(</span><span class="n">separator</span><span class="p">:</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="p">@</span><span class="n">StringBuilder</span>
<span class="kd">var</span> <span class="nv">sentence</span><span class="p">:</span> <span class="nb">String</span> <span class="p">{</span>
  <span class="s">&quot;To boldly go&quot;</span>
  <span class="s">&quot;where no one&quot;</span>
  <span class="s">&quot;has gone before&quot;</span>
<span class="p">}</span>

<span class="c1">// all the values declared in the `sentence` definition</span>
<span class="c1">// will be passed to the `buildBlock` function as separate inputs, and the</span>
<span class="c1">// resulting value will be the full sentence:</span>
<span class="c1">// &quot;To boldly go</span>
<span class="c1">// where no one</span>
<span class="c1">// has gone before&quot;</span>
</div></code></pre><p>With this kind of mechanisms we could write a <code>@TransitionBuilder</code> that would allow us to write:</p><pre><code><div class="highlight"><span></span><span class="p">@</span><span class="n">resultBuilder</span>
<span class="kd">struct</span> <span class="nc">TransitionBuilder</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="kd">func</span> <span class="nf">buildBlock</span><span class="p">(</span><span class="kc">_</span> <span class="n">inputs</span><span class="p">:</span> <span class="n">From</span><span class="p">...)</span> <span class="p">-&gt;</span> <span class="p">[</span><span class="n">From</span><span class="p">]</span> <span class="p">{</span>
     <span class="n">inputs</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="nc">Transitions</span> <span class="p">{</span>
  <span class="kd">private</span> <span class="kd">let</span> <span class="nv">transitions</span><span class="p">:</span> <span class="p">[</span><span class="n">From</span><span class="p">]</span>
  
  <span class="kd">init</span><span class="p">(@</span><span class="n">TransitionBuilder</span> <span class="kc">_</span> <span class="n">transitions</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="p">[</span><span class="n">From</span><span class="p">])</span> <span class="p">{</span>
    <span class="kc">self</span><span class="p">.</span><span class="n">transitions</span> <span class="p">=</span> <span class="n">transitions</span><span class="p">()</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="p">@</span><span class="n">TransitionBuilder</span>
<span class="kd">var</span> <span class="nv">transitions</span><span class="p">:</span> <span class="n">Transitions</span> <span class="p">{</span>
  <span class="n">From</span><span class="p">(</span><span class="n">Loading</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="n">LoadingSuccessful</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">then</span><span class="p">:</span> <span class="p">{</span> <span class="p">...</span> <span class="p">})</span>
  <span class="n">From</span><span class="p">(</span><span class="n">Loading</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="n">LoadingFailure</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">then</span><span class="p">:</span> <span class="p">{</span> <span class="p">...</span> <span class="p">})</span>
  <span class="n">From</span><span class="p">(</span><span class="n">Saving</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="n">SavingSuccessful</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">then</span><span class="p">:</span> <span class="p">{</span> <span class="p">...</span> <span class="p">})</span>
<span class="p">}</span>

<span class="c1">// or something like</span>

<span class="kd">let</span> <span class="nv">transitions</span> <span class="p">=</span> <span class="n">Transitions</span> <span class="p">{</span>
  <span class="n">From</span><span class="p">(</span><span class="n">Loading</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="n">LoadingSuccessful</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">then</span><span class="p">:</span> <span class="p">{</span> <span class="p">...</span> <span class="p">})</span>
  <span class="n">From</span><span class="p">(</span><span class="n">Loading</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="n">LoadingFailure</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">then</span><span class="p">:</span> <span class="p">{</span> <span class="p">...</span> <span class="p">})</span>
  <span class="n">From</span><span class="p">(</span><span class="n">Saving</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="n">SavingSuccessful</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">then</span><span class="p">:</span> <span class="p">{</span> <span class="p">...</span> <span class="p">})</span>
<span class="p">}</span>
</div></code></pre><h1>A glance at a concrete DSL implementation</h1><p>In the context of the <a href="https://github.com/CombineCommunity/Feedbacks">CombineCommunity Feedbacks</a> framework, I had to build a state machine DSL that would be integrated inside a feedback loop definition.</p><p>Here are some of the concepts I had to implement.</p><h2>Types as identifier</h2><p>In a <strong>state machine</strong>, transitions are identified by the pair: current state + event. As mentionned, I've decided to use the states and events types to identify them. I needed some tooling to do so:</p><pre><code><div class="highlight"><span></span><span class="kd">public</span> <span class="kd">protocol</span> <span class="nc">StaticIdentifiable</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="kd">var</span> <span class="nv">id</span><span class="p">:</span> <span class="n">AnyHashable</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">public</span> <span class="kd">extension</span> <span class="nc">StaticIdentifiable</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="kd">var</span> <span class="nv">id</span><span class="p">:</span> <span class="n">AnyHashable</span> <span class="p">{</span>
    <span class="nb">String</span><span class="p">(</span><span class="n">reflecting</span><span class="p">:</span> <span class="kc">Self</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="kd">var</span> <span class="nv">instanceId</span><span class="p">:</span> <span class="n">AnyHashable</span> <span class="p">{</span>
    <span class="kc">Self</span><span class="p">.</span><span class="n">id</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">protocol</span> <span class="nc">State</span><span class="p">:</span> <span class="n">StaticIdentifiable</span> <span class="p">{}</span>
<span class="kd">protocol</span> <span class="nc">Event</span><span class="p">:</span> <span class="n">StaticIdentifiable</span> <span class="p">{}</span>
</div></code></pre><p>As each states and each events conform to <code>StaticIdentifiable</code>, their type can form a unique pair when declared in a transition. All the declared transitions can then be indexed in a dictionary by this unique pair. The reducer infered from these transitions can refer to this dictionary to compute the transition to apply when receiving a state and an event.</p><h2>Transitions definition</h2><p>A transition is defined by a <code>From</code> and an <code>On</code> keywords in our DSL. Reading a state machine should feel natural: <code>From the "Loading" state, On the "LoadingHasSucceeded" event, Transition to a new state</code>.</p><p>It should also be possible to group transitions from the same state in order to allow a concise syntax:</p><pre><code><div class="highlight"><span></span><span class="kd">let</span> <span class="nv">transitions</span> <span class="p">=</span> <span class="n">Transitions</span> <span class="p">{</span>
  <span class="n">From</span><span class="p">(</span><span class="n">Loading</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span> <span class="p">{</span> <span class="n">currentState</span> <span class="k">in</span> 
    <span class="n">On</span><span class="p">(</span><span class="n">LoadingSuccessful</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span> <span class="p">{</span> <span class="n">event</span> <span class="k">in</span>
      <span class="c1">// compute new state based on currentState and event</span>
    <span class="p">}</span>
    
    <span class="n">On</span><span class="p">(</span><span class="n">LoadingFailure</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">transitionTo</span><span class="p">:</span> <span class="n">Failed</span><span class="p">())</span>  
  <span class="p">}</span>
  
  <span class="n">From</span><span class="p">(</span><span class="n">Saving</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span> <span class="p">{</span> <span class="n">currentState</span> <span class="k">in</span>
    <span class="n">On</span><span class="p">(</span><span class="n">SavingSuccessful</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span> <span class="p">{</span> <span class="n">event</span> <span class="k">in</span>
      <span class="c1">// compute new state based on currentState and event</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>With this in place, we have a basic DSL to generate a state machine reducer function. The true <a href="https://github.com/CombineCommunity/Feedbacks">CombineCommunity Feedbacks</a> implementation of a DSL is very similar to what we can see here.</p><p>It also brings the concept of <strong>modifiers</strong> to the syntax (just like with SwiftUI). This lets us write things like:</p><pre><code><div class="highlight"><span></span><span class="kd">let</span> <span class="nv">transitions</span> <span class="p">=</span> <span class="n">Transitions</span> <span class="p">{</span>
  <span class="n">From</span><span class="p">(</span><span class="n">Saved</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">On</span><span class="p">(</span><span class="n">RefreshData</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">transitionsTo</span><span class="p">:</span> <span class="n">Loading</span><span class="p">())</span>
  <span class="p">}</span>
  <span class="p">.</span><span class="n">disable</span> <span class="p">{</span>
    <span class="o">!</span><span class="n">profile</span><span class="p">.</span><span class="n">isSuperUser</span><span class="p">()</span>
  <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Where the <code>disable</code> modifier dynamically changes the behavior of the transition. If the profile is not <code>superUser</code> then this transition can never be executed. The <code>disable</code> condition will be evaluated every time the state machine involves the pair <code>Saved.self / RefreshData.self</code>.</p><h2>An example of usage</h2><p>The <code>Feedbacks</code> repo contains some example applications that demonstrate the use of a DSL written state machine in a feedback loop system.</p><p>The following system is inspired by a <a href="https://github.com/CombineCommunity/Feedbacks/tree/main/Examples">real life example</a> that loads the trending gifs against the paginated <strong>Giphy API</strong>.</p><pre><code><div class="highlight"><span></span><span class="n">System</span> <span class="p">{</span>
  <span class="n">InitialState</span> <span class="p">{</span>
    <span class="n">Loading</span><span class="p">(</span><span class="n">page</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="n">Feedbacks</span> <span class="p">{</span>
    <span class="c1">// the side effect performs the network call when the state is Loading</span>
    <span class="n">Feedback</span><span class="p">(</span><span class="n">on</span><span class="p">:</span> <span class="n">Loading</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">strategy</span><span class="p">:</span> <span class="p">.</span><span class="n">cancelOnNewState</span><span class="p">,</span> <span class="n">perform</span><span class="p">:</span> <span class="n">loadSideEffect</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="n">Transitions</span> <span class="p">{</span>
    <span class="c1">// Loading transitions</span>
    <span class="n">From</span><span class="p">(</span><span class="n">Loading</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span> <span class="p">{</span> <span class="n">currentState</span> <span class="k">in</span>
      <span class="n">On</span><span class="p">(</span><span class="n">LoadingIsComplete</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span> <span class="p">{</span> <span class="n">event</span> <span class="k">in</span>
        <span class="n">Loaded</span><span class="p">(</span><span class="n">page</span><span class="p">:</span> <span class="n">state</span><span class="p">.</span><span class="n">page</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">event</span><span class="p">.</span><span class="n">payload</span><span class="p">)</span>
      <span class="p">}</span>
      
      <span class="n">On</span><span class="p">(</span><span class="n">LoadingHasFailed</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">transitionTo</span><span class="p">:</span> <span class="n">Failed</span><span class="p">())</span>
    <span class="p">}</span>
  
    <span class="c1">// Loaded transitions</span>
    <span class="n">From</span><span class="p">(</span><span class="n">Loaded</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span> <span class="p">{</span> <span class="n">currentState</span> <span class="k">in</span>
      <span class="n">On</span><span class="p">(</span><span class="n">Refresh</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">transitionTo</span><span class="p">:</span> <span class="n">Loading</span><span class="p">(</span><span class="n">page</span><span class="p">:</span> <span class="n">currentState</span><span class="p">.</span><span class="n">page</span><span class="p">))</span>
      <span class="n">On</span><span class="p">(</span><span class="n">LoadPrevious</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">transitionTo</span><span class="p">:</span> <span class="n">Loading</span><span class="p">(</span><span class="n">page</span><span class="p">:</span> <span class="n">currentState</span><span class="p">.</span><span class="n">page</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
      <span class="n">On</span><span class="p">(</span><span class="n">LoadNext</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">transitionTo</span><span class="p">:</span> <span class="n">Loading</span><span class="p">(</span><span class="n">page</span><span class="p">:</span> <span class="n">currentState</span><span class="p">.</span><span class="n">page</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span>
    <span class="p">}</span>

    <span class="c1">// Failed transitions</span>
    <span class="n">From</span><span class="p">(</span><span class="n">Failed</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">On</span><span class="p">(</span><span class="n">Refresh</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">transitionTo</span><span class="p">:</span> <span class="n">Loading</span><span class="p">(</span><span class="n">page</span><span class="p">:</span> <span class="mi">0</span><span class="p">))</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>To be fully accurate on the type of state machine <strong>Feedbacks</strong> relies on, we can speak of a <a href="https://en.wikipedia.org/wiki/Moore_machine">Moore state machine</a>. If we consider the side effects as the outputs of the state machine, they are determined only by the current state, whereas <a href="https://en.wikipedia.org/wiki/Mealy_machine">Mealy state machines</a> need a pair state + input to generate an output.</p><h1>Conclusion</h1><p>I have not encountered many Swift implementations of state machine DSLs, especially based on <code>ResultBuilder</code>. There is an interesting one in Kotlin made by <a href="https://github.com/Tinder/StateMachine">Tinder</a>. It looks pretty similar to what I've designed (but it uses a Mealy state machine).</p><p>With the official introduction of <code>ResultBuilder</code> in Swift 5.4, I'm sure that DSL based projects will gain in popularity on GitHub and a commonly used pattern might emerge regarding state machines.</p><p>In the meantime, feel free to reach out to give me your feedback and ideas about state machines and DSLs.</p><p>PS: Thanks to Helene and Ryan for the review 👍🏻.</p>]]></content:encoded></item><item><guid isPermaLink="true">http://blog.warpfactor.io/posts/2020-08-19-FunctionsAsDependencies</guid><title>Functions as dependencies in Swift</title><description>Implementing an architecture within an application can be challenging. There are rules we can follow (SOLID, Clean Architecture) and patterns to guide us (MVVM, MVP, MVI, Redux, …) but sometimes, things we thought were well established deserve a step back.</description><link>http://blog.warpfactor.io/posts/2020-08-19-FunctionsAsDependencies</link><pubDate>Wed, 19 Aug 2020 17:01:00 -0400</pubDate><content:encoded><![CDATA[<h1>Introduction</h1><p>Implementing an architecture within an application can be challenging. There are rules we can follow (SOLID, Clean Architecture) and patterns to guide us (MVVM, MVP, MVI, Redux, …) but sometimes, things we thought were well established deserve a step back.</p><p>Lately, I’ve been in this situation while developing an application that relied on the use of <a href="https://en.wikipedia.org/wiki/Higher-order_function">higher order free functions</a>. In this article, I’ll try to guide you from the sparkle that lit this desire for higher order free functions to its implementation regarding dependency injection.</p><h1>Dependency Injection</h1><p>Dependency injection is a technique at the crossroads of well known software engineering best practices: abstraction and decoupling, single responsibility, dependency inversion. It provides flexible and testable implementations. This article assumes that the merits of dependency injection are accepted. We will see how dependency injection and higher order functions fit very well together.</p><h1>Implementation in a traditional way</h1><p>In the rest of this article we will focus on a UsersRepository object that fetches users from a Rest API and filters them out before returning them. For the sake of the demonstration all the endpoints of this API return users but with different flavours depending on the fetched route.</p><p>To do so the UsersRepository will be injected with an ApiService protocol whose purpose is to provide a way to fetch users from the Rest endpoints:</p><pre><code><div class="highlight"><span></span><span class="kd">protocol</span> <span class="nc">ApiService</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">fetch</span><span class="p">(</span><span class="n">route</span><span class="p">:</span> <span class="n">Route</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">AnyPublisher</span><span class="o">&lt;</span><span class="p">[</span><span class="n">User</span><span class="p">],</span> <span class="n">ApiError</span><span class="p">&gt;</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">UsersRepository</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="kd">let</span> <span class="nv">apiService</span><span class="p">:</span> <span class="n">ApiService</span>

    <span class="kd">init</span><span class="p">(</span><span class="n">apiService</span><span class="p">:</span> <span class="n">ApiService</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">apiService</span> <span class="p">=</span> <span class="n">apiService</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">loadAllUsers</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="n">AnyPublisher</span><span class="o">&lt;</span><span class="p">[</span><span class="n">User</span><span class="p">],</span> <span class="n">Error</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">allUsersRoute</span> <span class="p">=</span> <span class="n">Route</span><span class="p">(</span><span class="s">&quot;/api/users/all&quot;</span><span class="p">)</span>
        <span class="kc">self</span>
            <span class="p">.</span><span class="n">apiService</span>
            <span class="p">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">route</span><span class="p">:</span> <span class="n">allUsersRoute</span><span class="p">)</span>
            <span class="p">.</span><span class="bp">map</span> <span class="p">{</span> <span class="nv">$0</span><span class="p">.</span><span class="bp">filter</span> <span class="p">{</span> <span class="nv">$0</span><span class="p">.</span><span class="n">isActive</span> <span class="p">}</span> <span class="p">}</span>
            <span class="p">.</span><span class="n">mapError</span> <span class="p">{</span> <span class="kc">_</span> <span class="k">in</span> <span class="n">UsersRepositoryError</span><span class="p">.</span><span class="n">someError</span> <span class="p">}</span>
            <span class="p">.</span><span class="n">eraseToAnyPublisher</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>This is a pretty common implementation. Of course, in real life implementation, we would try to make the ApiService more versatile and safe by using generic types and constraints.</p><p>As I said in the introduction, let’s give it a second thought … why an ApiService ?</p><p>In fact, we just want to retrieve users, the repository doesn’t care about where they come from, it is an implementation detail. A Rest API is one way among many.</p><p>A trivial approach would be to refactor the ApiService into a more versatile DataProvider protocol.</p><p>But what about its definition?</p><ul><li>the “fetch” function doesn’t really make sense anymore</li><li>the “route” parameter becomes irrelevant outside an API context</li><li>the “ApiError” type is too specific</li></ul><p>Of course, we could find a way to pick more « any purpose » names and data structures but I invite you to look for another way.</p><h1>Injecting functions</h1><p>After all, the UsersRepository only relies on an AnyPublisher&lt;[User], ApiError&gt; to perform its work, right ?</p><p>The temptation is strong to directly inject this publisher as a dependency, but we should not. Injecting it directly would mean to build this publisher pretty early in the injection process and this is something that might lead to unwanted side effects: perhaps it takes time to be built or it needs other dependencies to be resolved ? The UsersRepository doesn’t know that and can make no assumption on that. The publisher should only be built if and when needed.</p><p>If we can’t inject the publisher, we can inject a function that builds it 👍, and execute it at our convenience.</p><p>Let’s give it a try then.</p><pre><code><div class="highlight"><span></span><span class="kd">class</span> <span class="nc">UsersRepository</span> <span class="p">{</span>
    <span class="kd">typealias</span> <span class="n">RetrieveUsersFunction</span> <span class="p">=</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">AnyPublisher</span><span class="o">&lt;</span><span class="p">[</span><span class="n">User</span><span class="p">],</span> <span class="n">Error</span><span class="p">&gt;</span>
    <span class="kd">private</span> <span class="kd">let</span> <span class="nv">retrieveUsersFunction</span><span class="p">:</span> <span class="n">RetrieveUsersFunction</span>

    <span class="kd">init</span><span class="p">(</span><span class="n">retrieveUsersFunction</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="n">RetrieveUsersFunction</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">retrieveUsersFunction</span> <span class="p">=</span> <span class="n">retrieveUsersFunction</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">loadUsers</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="n">AnyPublisher</span><span class="o">&lt;</span><span class="p">[</span><span class="n">User</span><span class="p">],</span> <span class="n">Error</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">retrieveUsersFunction</span><span class="p">()</span>
            <span class="p">.</span><span class="bp">map</span> <span class="p">{</span> <span class="nv">$0</span><span class="p">.</span><span class="bp">filter</span> <span class="p">{</span> <span class="nv">$0</span><span class="p">.</span><span class="n">isActive</span> <span class="p">}</span> <span class="p">}</span>
            <span class="p">.</span><span class="n">mapError</span> <span class="p">{</span> <span class="kc">_</span> <span class="k">in</span> <span class="n">UsersRepositoryError</span><span class="p">.</span><span class="n">someError</span> <span class="p">}</span>
            <span class="p">.</span><span class="n">eraseToAnyPublisher</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>What have we done here:</p><ul><li>To ease the reading, we’ve declared a typealias describing the function signature</li><li>We’ve injected the function</li><li>We’ve used the function as a replacement of the ApiService</li><li>The publisher signature has changed a bit, from AnyPublisher&lt;[User], ApiError&gt; to AnyPublisher&lt;[User], Error&gt;. We do not want to leak implementation details here because of the error type.</li></ul><p>So far so good … but what about the Route we used to pass to the fetch function ? In fact we don’t need it anymore as it was specific to the ApiService; nevertheless, we will cover this precise point later in this article.</p><p>As a bonus we can also inject the filtering function so we can change its behaviour depending on the context (the filter might differ between dev, QA or prod environment for instance).</p><pre><code><div class="highlight"><span></span><span class="kd">class</span> <span class="nc">UsersRepository</span> <span class="p">{</span>
    <span class="kd">typealias</span> <span class="n">RetrieveUsersFunction</span> <span class="p">=</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">AnyPublisher</span><span class="o">&lt;</span><span class="p">[</span><span class="n">User</span><span class="p">],</span> <span class="n">Error</span><span class="p">&gt;</span>
    <span class="kd">typealias</span> <span class="n">FilterUserFunction</span> <span class="p">=</span> <span class="p">(</span><span class="n">User</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">Bool</span>

    <span class="kd">private</span> <span class="kd">let</span> <span class="nv">retrieveUsersFunction</span><span class="p">:</span> <span class="n">RetrieveUsersFunction</span>
    <span class="kd">private</span> <span class="kd">let</span> <span class="nv">filterUserFunction</span><span class="p">:</span> <span class="n">FilterUserFunction</span>

    <span class="kd">init</span><span class="p">(</span><span class="n">retrieveUsersFunction</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="n">RetrieveUsersFunction</span><span class="p">,</span>
         <span class="n">filterUserFunction</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="n">FilterUserFunction</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">retrieveUsersFunction</span> <span class="p">=</span> <span class="n">retrieveUsersFunction</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">filterUserFunction</span> <span class="p">=</span> <span class="n">filterUserFunction</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">loadUsers</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="n">AnyPublisher</span><span class="o">&lt;</span><span class="p">[</span><span class="n">User</span><span class="p">],</span> <span class="n">Error</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">retrieveUsersFunction</span><span class="p">()</span>
            <span class="p">.</span><span class="bp">map</span> <span class="p">{</span> <span class="p">[</span><span class="n">filterUserFunction</span><span class="p">]</span> <span class="k">in</span> <span class="nv">$0</span><span class="p">.</span><span class="bp">filter</span><span class="p">(</span><span class="n">filterUserFunction</span><span class="p">)</span> <span class="p">}</span>
            <span class="p">.</span><span class="n">mapError</span> <span class="p">{</span> <span class="kc">_</span> <span class="k">in</span> <span class="n">UsersRepositoryError</span><span class="p">.</span><span class="n">someError</span> <span class="p">}</span>
            <span class="p">.</span><span class="n">eraseToAnyPublisher</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Once again we take advantage of typealiases to pass the functions around. This becomes almost mandatory when using functions as dependencies.</p><p>While we are at it, perhaps we can push our reflexion a bit further and take a final step towards the systematic use of functions.</p><p>Why do we need a repository ? Usually, the repository pattern is used to group all the CRUD operations about an entity. We can assume that a UsersRepository will have several load, update, and delete functions. Once implemented, those functions will require a certain number of dependencies. We will end up with an initializer taking all the needed functions as parameters, whereas we might only need some of them depending on the feature we want to accomplish. This is not optimal.</p><p>Getting rid of the repository implies that every function (load, update, delete …) is self-supporting and is being injected only with the needed dependencies.</p><pre><code><div class="highlight"><span></span><span class="kd">typealias</span> <span class="n">RetrieveUsersFunction</span> <span class="p">=</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">AnyPublisher</span><span class="o">&lt;</span><span class="p">[</span><span class="n">User</span><span class="p">],</span> <span class="n">Swift</span><span class="p">.</span><span class="n">Error</span><span class="p">&gt;</span>
<span class="kd">typealias</span> <span class="n">FilterUserFunction</span> <span class="p">=</span> <span class="p">(</span><span class="n">User</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">Bool</span>

<span class="kd">static</span> <span class="kd">func</span> <span class="nf">loadUsers</span><span class="p">(</span>
    <span class="n">retrieveUsersFunction</span><span class="p">:</span> <span class="n">RetrieveUsersFunction</span><span class="p">,</span>
    <span class="n">filterUserFunction</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="n">FilterUserFunction</span>
<span class="p">)</span> <span class="p">-&gt;</span> <span class="n">AnyPublisher</span><span class="o">&lt;</span><span class="p">[</span><span class="n">User</span><span class="p">],</span> <span class="n">Error</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="n">retrieveUsersFunction</span><span class="p">()</span>
        <span class="p">.</span><span class="bp">map</span> <span class="p">{</span> <span class="nv">$0</span><span class="p">.</span><span class="bp">filter</span><span class="p">(</span><span class="n">filterUserFunction</span><span class="p">)</span> <span class="p">}</span>
        <span class="p">.</span><span class="n">mapError</span> <span class="p">{</span> <span class="kc">_</span> <span class="k">in</span> <span class="n">UsersError</span><span class="p">.</span><span class="n">someError</span> <span class="p">}</span>
        <span class="p">.</span><span class="n">eraseToAnyPublisher</span><span class="p">()</span>
<span class="p">}</span>
</div></code></pre><p>Here we go, we have a 100% autonomous function. For the sake of clarity we can wrap the whole thing inside a namespace to shorten some names:</p><pre><code><div class="highlight"><span></span><span class="kd">enum</span> <span class="nc">Users</span> <span class="p">{</span>
    <span class="kd">enum</span> <span class="nc">Error</span><span class="p">:</span> <span class="n">Swift</span><span class="p">.</span><span class="n">Error</span> <span class="p">{</span>
        <span class="k">case</span> <span class="n">someError</span>
    <span class="p">}</span>

    <span class="kd">typealias</span> <span class="n">RetrieveFunction</span> <span class="p">=</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">AnyPublisher</span><span class="o">&lt;</span><span class="p">[</span><span class="n">User</span><span class="p">],</span> <span class="n">Swift</span><span class="p">.</span><span class="n">Error</span><span class="p">&gt;</span>
    <span class="kd">typealias</span> <span class="n">FilterFunction</span> <span class="p">=</span> <span class="p">(</span><span class="n">User</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">Bool</span>

    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">load</span><span class="p">(</span>
        <span class="n">retrieveFunction</span><span class="p">:</span> <span class="n">RetrieveFunction</span><span class="p">,</span>
        <span class="n">filterFunction</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="n">FilterFunction</span> <span class="p">=</span> <span class="p">{</span> <span class="nv">$0</span><span class="p">.</span><span class="n">isActive</span> <span class="p">}</span>
    <span class="p">)</span> <span class="p">-&gt;</span> <span class="n">AnyPublisher</span><span class="o">&lt;</span><span class="p">[</span><span class="n">User</span><span class="p">],</span> <span class="n">Error</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="n">retrieveFunction</span><span class="p">()</span>
            <span class="p">.</span><span class="bp">map</span> <span class="p">{</span> <span class="nv">$0</span><span class="p">.</span><span class="bp">filter</span><span class="p">(</span><span class="n">filterFunction</span><span class="p">)</span> <span class="p">}</span>
            <span class="p">.</span><span class="n">mapError</span> <span class="p">{</span> <span class="kc">_</span> <span class="k">in</span> <span class="n">Users</span><span class="p">.</span><span class="n">Error</span><span class="p">.</span><span class="n">someError</span> <span class="p">}</span>
            <span class="p">.</span><span class="n">eraseToAnyPublisher</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><blockquote><p>We can also have a default value for the filterFunction parameter to make a more concise API</p></blockquote><h1>The positive impact on the unit tests</h1><p>Let’s get back to the original UsersRepository implementation. In order to unit test the loadUsers function, we would have had to create a mocked ApiService to fulfill the initializer requirements. The mocked ApiService should be able to succeed or fail in order to test the output of the loadUsers function.</p><p>In the unfortunate case where the ApiService also needs a dependency on its own, then we would have been forced to implement another mocked dependency as well. If we apply that strategy to the whole application, we might end up with a complex hierarchy of mock objects.</p><p>When using functions as dependencies, we still need mocks of course, but they are in general very small, simple and defined right next to the unit test:</p><pre><code><div class="highlight"><span></span><span class="kd">func</span> <span class="nf">test_loadUsers_return_users_when_dependencies_succeed</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Given: a retrieve function that succeeds at getting some Users</span>
    <span class="kd">let</span> <span class="nv">successRetrieveFunction</span> <span class="p">=</span> <span class="p">{</span>
        <span class="n">Just</span><span class="o">&lt;</span><span class="p">[</span><span class="n">User</span><span class="p">]</span><span class="o">&gt;</span><span class="p">([</span><span class="n">User</span><span class="p">(</span><span class="n">isActive</span><span class="p">:</span> <span class="kc">true</span><span class="p">),</span> <span class="n">User</span><span class="p">(</span><span class="n">isActive</span><span class="p">:</span> <span class="kc">false</span><span class="p">)])</span>
            <span class="p">.</span><span class="n">setFailureType</span><span class="p">(</span><span class="n">to</span><span class="p">:</span> <span class="n">Swift</span><span class="p">.</span><span class="n">Error</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span>
            <span class="p">.</span><span class="n">eraseToAnyPublisher</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="kd">let</span> <span class="nv">mockFilterFunction</span> <span class="p">=</span> <span class="p">{</span> <span class="p">(</span><span class="n">user</span><span class="p">:</span> <span class="n">User</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">Bool</span> <span class="k">in</span> <span class="k">return</span> <span class="kc">true</span> <span class="p">}</span>

    <span class="c1">// When: loading the users</span>
    <span class="kd">let</span> <span class="nv">users</span> <span class="p">=</span> <span class="n">Users</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">retrieveFunction</span><span class="p">:</span> <span class="n">successRetrieveFunction</span><span class="p">,</span>
                           <span class="n">filterFunction</span><span class="p">:</span> <span class="n">mockFilterFunction</span><span class="p">)</span>

    <span class="c1">// Then: we can make assertions about the retrieved users</span>
    <span class="c1">// XCTAssert(...)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">test_loadUsers_return_error_when_dependencies_fail</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Given: a retrieve function that fails at getting some Users</span>
    <span class="kd">let</span> <span class="nv">failureRetrieveFunction</span> <span class="p">=</span> <span class="p">{</span>
        <span class="n">Fail</span><span class="o">&lt;</span><span class="p">[</span><span class="n">User</span><span class="p">],</span> <span class="n">Swift</span><span class="p">.</span><span class="n">Error</span><span class="p">&gt;(</span><span class="n">error</span><span class="p">:</span> <span class="bp">NSError</span><span class="p">(</span><span class="n">domain</span><span class="p">:</span> <span class="s">&quot;domain.mock&quot;</span><span class="p">,</span>
                                                 <span class="n">code</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">))</span>
            <span class="p">.</span><span class="n">eraseToAnyPublisher</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="kd">let</span> <span class="nv">mockFilterFunction</span> <span class="p">=</span> <span class="p">{</span> <span class="p">(</span><span class="n">user</span><span class="p">:</span> <span class="n">User</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">Bool</span> <span class="k">in</span> <span class="k">return</span> <span class="kc">true</span> <span class="p">}</span>

    <span class="c1">// When: loading the users</span>
    <span class="kd">let</span> <span class="nv">users</span> <span class="p">=</span> <span class="n">Users</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">retrieveFunction</span><span class="p">:</span> <span class="n">failureRetrieveFunction</span><span class="p">,</span>
                           <span class="n">filterFunction</span><span class="p">:</span> <span class="n">mockFilterFunction</span><span class="p">)</span>

    <span class="c1">// Then: we can make assertions about the received error</span>
    <span class="c1">// XCTAssert(...)</span>
<span class="p">}</span>
</div></code></pre><p>Unit tests are super easy to imagine, to write, and to read. Personally, I find this technique a very good tool to reach a high (and meaningful) code coverage. I think it can help a lot when using a TDD approach.</p><h1>A trick from functional programming</h1><p>Do you remember the original implementation of the UsersRepository: it used an ApiService to fetch an endpoint defined by a route. Even though this has been erased by the abstraction brought by the injection of functions, at the end we still need to provide a function that can retrieve users for real. It is up to the dependency injection mechanism to provide a compatible concrete implementation.</p><p>We have an ApiService at our disposal but the fetch definition does not match the signature we need:</p><pre><code><div class="highlight"><span></span><span class="p">(</span><span class="n">Route</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">AnyPublisher</span><span class="o">&lt;</span><span class="p">[</span><span class="n">User</span><span class="p">],</span> <span class="n">ApiError</span><span class="p">&gt;</span>

                <span class="n">VS</span>

<span class="p">()</span> <span class="p">-&gt;</span> <span class="n">AnyPublisher</span><span class="o">&lt;</span><span class="p">[</span><span class="n">User</span><span class="p">],</span> <span class="n">Swift</span><span class="p">.</span><span class="n">Error</span><span class="p">&gt;</span>
</div></code></pre><p>We need to perform two changes here:</p><ul><li>Erase the Route parameter</li><li>Change the error type</li></ul><p>To erase the Route parameter we can borrow some techniques from the functional programming like partial functions or currying. We will go with partial functions here, even though currying could be a reasonable choice as well.</p><p>Partializing a function is like saying to the compiler « Hey, I know some parameters of this function, I can set them right now, but the rest of the parameters are still undefined, please give me back a function that will only take those parameters so I can call it later!»</p><p>Let’s take a look at an example 😏.</p><p>dumbFunction is a function that takes two parameters and returns a Bool.</p><pre><code><div class="highlight"><span></span><span class="kd">func</span> <span class="nf">dumbFunction</span><span class="p">(</span><span class="n">param1</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="n">param2</span><span class="p">:</span> <span class="nb">Int</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">Bool</span> <span class="p">{</span>
    <span class="c1">// Does some smart calculations and returns a Bool</span>
<span class="p">}</span>
</div></code></pre><p>We can partialize that function to be able to « freeze » the first parameter and get back in return a function that only takes the second one.</p><pre><code><div class="highlight"><span></span><span class="kd">func</span> <span class="nf">partializedDumbFunction</span><span class="p">(</span><span class="n">param1</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="p">(</span><span class="nb">Int</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">Bool</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span> <span class="p">(</span><span class="n">unknownParam2</span><span class="p">:</span> <span class="nb">Int</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">Bool</span> <span class="k">in</span>
        <span class="k">return</span> <span class="n">dumbFunction</span><span class="p">(</span><span class="n">param1</span><span class="p">:</span> <span class="n">param1</span><span class="p">,</span> <span class="n">param2</span><span class="p">:</span> <span class="n">unknownParam2</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Now, instead of using the function ‘dumbFunction’ with 2 parameters, we can use its partialized counterpart with only one parameter</p><pre><code><div class="highlight"><span></span><span class="kd">let</span> <span class="nv">dumbFunctionWithOneFixedParameter</span> <span class="p">=</span> <span class="n">partializedDumbFunction</span><span class="p">(</span><span class="s">&quot;Param1&quot;</span><span class="p">)</span>
<span class="kd">let</span> <span class="nv">dumbFunctionWithOne</span> <span class="p">=</span> <span class="n">dumbFunctionWithOneFixedParameter</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="kd">let</span> <span class="nv">dumbFunctionWithTwo</span> <span class="p">=</span> <span class="n">dumbFunctionWithOneFixedParameter</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</div></code></pre><p>It is a little bit like if we had performed dependency injection of the first parameter, the partialization has « captured » it.</p><p>Of course, we cannot write a partialized version of every function in our code base. There is a way to make it generic with any numbers of parameters.</p><pre><code><div class="highlight"><span></span><span class="kd">func</span> <span class="nf">partial</span><span class="p">&lt;</span><span class="n">Arg1</span><span class="p">,</span> <span class="n">Result</span><span class="p">&gt;(</span>
    <span class="kc">_</span> <span class="n">function</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="p">(</span><span class="n">Arg1</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Result</span><span class="p">,</span>
    <span class="n">arg1</span><span class="p">:</span> <span class="n">Arg1</span>
<span class="p">)</span> <span class="p">-&gt;</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Result</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="n">function</span><span class="p">(</span><span class="n">arg1</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">partial</span><span class="p">&lt;</span><span class="n">Arg1</span><span class="p">,</span> <span class="n">Arg2</span><span class="p">,</span> <span class="n">Result</span><span class="p">&gt;(</span>
    <span class="kc">_</span> <span class="n">function</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="p">(</span><span class="n">Arg1</span><span class="p">,</span> <span class="n">Arg2</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Result</span><span class="p">,</span>
    <span class="n">arg1</span><span class="p">:</span> <span class="n">Arg1</span>
<span class="p">)</span> <span class="p">-&gt;</span> <span class="p">(</span><span class="n">Arg2</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Result</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span> <span class="p">(</span><span class="n">unkownArg2</span><span class="p">:</span> <span class="n">Arg2</span><span class="p">)</span> <span class="k">in</span>
        <span class="n">function</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">unkownArg2</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">partial</span><span class="p">&lt;</span><span class="n">Arg1</span><span class="p">,</span> <span class="n">Arg2</span><span class="p">,</span> <span class="n">Result</span><span class="p">&gt;(</span>
    <span class="kc">_</span> <span class="n">function</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="p">(</span><span class="n">Arg1</span><span class="p">,</span> <span class="n">Arg2</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Result</span><span class="p">,</span>
    <span class="n">arg2</span><span class="p">:</span> <span class="n">Arg2</span>
<span class="p">)</span> <span class="p">-&gt;</span> <span class="p">(</span><span class="n">Arg1</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Result</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span> <span class="p">(</span><span class="n">unkownArg1</span><span class="p">:</span> <span class="n">Arg1</span><span class="p">)</span> <span class="k">in</span>
        <span class="n">function</span><span class="p">(</span><span class="n">unkownArg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>And we can write as much versions of partial functions as needed.</p><p>Do you see where I’m going here ? We went from a function with two parameters to a function with only one. Then, we can go from a function with one parameter to a function with none !</p><p>Let’s get back to the <em>ApiService.fetch</em> function and apply a partialization on it:</p><pre><code><div class="highlight"><span></span><span class="kd">let</span> <span class="nv">apiService</span> <span class="p">=</span> <span class="n">MyApiService</span><span class="p">()</span>
<span class="kd">let</span> <span class="nv">usersRoute</span> <span class="p">=</span> <span class="n">Route</span><span class="p">(</span><span class="s">&quot;/api/users/all&quot;</span><span class="p">)</span>
<span class="kd">let</span> <span class="nv">partializedFetchFunction</span> <span class="p">=</span> <span class="n">partial</span><span class="p">(</span><span class="n">apiService</span><span class="p">.</span><span class="n">fetch</span><span class="p">,</span> <span class="n">arg1</span><span class="p">:</span> <span class="n">usersRoute</span><span class="p">)</span>
</div></code></pre><p>We now have a partialized function with the signature:</p><p><strong>() -&gt; AnyPublisher&lt;[User], ApiError&gt;</strong>, the route parameter has been captured by the partialization and will be used when executing <strong>partializedFetchFunction</strong>.</p><p>We’re almost there, all we need to do is hide the ApiError, fortunately Combine can help use with that:</p><pre><code><div class="highlight"><span></span><span class="p">...</span>
<span class="kd">let</span> <span class="nv">retrieveUsersFunction</span><span class="p">:</span> <span class="n">Users</span><span class="p">.</span><span class="n">RetrieveFunction</span> <span class="p">=</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">partializedFetchFunction</span><span class="p">()</span>
        <span class="p">.</span><span class="n">mapError</span> <span class="p">{</span> <span class="nv">$0</span> <span class="k">as</span> <span class="n">Swift</span><span class="p">.</span><span class="n">Error</span> <span class="p">}</span>
        <span class="p">.</span><span class="n">eraseToAnyPublisher</span><span class="p">()</span>
<span class="p">}</span>
</div></code></pre><p>Aaaaaand we have our dependency ! the retrieveUsersFunction has that signature: <strong>() -&gt; AnyPublisher&lt;[User], Swift.Error&lg;</strong></p><p>We can inject it in the Users.load function 👌.</p><h1>Sum up</h1><h2>1: use function as dependencies:</h2><pre><code><div class="highlight"><span></span><span class="kd">enum</span> <span class="nc">Users</span> <span class="p">{</span>
    <span class="kd">enum</span> <span class="nc">Error</span><span class="p">:</span> <span class="n">Swift</span><span class="p">.</span><span class="n">Error</span> <span class="p">{</span>
        <span class="k">case</span> <span class="n">someError</span>
    <span class="p">}</span>

    <span class="kd">typealias</span> <span class="n">RetrieveFunction</span> <span class="p">=</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">AnyPublisher</span><span class="o">&lt;</span><span class="p">[</span><span class="n">User</span><span class="p">],</span> <span class="n">Swift</span><span class="p">.</span><span class="n">Error</span><span class="p">&gt;</span>
    <span class="kd">typealias</span> <span class="n">FilterFunction</span> <span class="p">=</span> <span class="p">(</span><span class="n">User</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">Bool</span>

    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">load</span><span class="p">(</span>
        <span class="n">retrieveFunction</span><span class="p">:</span> <span class="n">RetrieveFunction</span><span class="p">,</span>
        <span class="n">filterFunction</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="n">FilterFunction</span> <span class="p">=</span> <span class="p">{</span> <span class="nv">$0</span><span class="p">.</span><span class="n">isActive</span> <span class="p">}</span>
    <span class="p">)</span> <span class="p">-&gt;</span> <span class="n">AnyPublisher</span><span class="o">&lt;</span><span class="p">[</span><span class="n">User</span><span class="p">],</span> <span class="n">Error</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="n">retrieveFunction</span><span class="p">()</span>
            <span class="p">.</span><span class="bp">map</span> <span class="p">{</span> <span class="nv">$0</span><span class="p">.</span><span class="bp">filter</span><span class="p">(</span><span class="n">filterFunction</span><span class="p">)</span> <span class="p">}</span>
            <span class="p">.</span><span class="n">mapError</span> <span class="p">{</span> <span class="kc">_</span> <span class="k">in</span> <span class="n">Users</span><span class="p">.</span><span class="n">Error</span><span class="p">.</span><span class="n">someError</span> <span class="p">}</span>
            <span class="p">.</span><span class="n">eraseToAnyPublisher</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><h2>2: use partialization to build the dependencies:</h2><pre><code><div class="highlight"><span></span><span class="p">...</span>
<span class="kd">let</span> <span class="nv">retrieveUsersFunction</span><span class="p">:</span> <span class="n">Users</span><span class="p">.</span><span class="n">RetrieveFunction</span> <span class="p">=</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">partializedFetchFunction</span><span class="p">()</span>
        <span class="p">.</span><span class="n">mapError</span> <span class="p">{</span> <span class="nv">$0</span> <span class="k">as</span> <span class="n">Swift</span><span class="p">.</span><span class="n">Error</span> <span class="p">}</span>
        <span class="p">.</span><span class="n">eraseToAnyPublisher</span><span class="p">()</span>
<span class="p">}</span>
</div></code></pre><h2>3: inject the dependency</h2><pre><code><div class="highlight"><span></span><span class="kd">let</span> <span class="nv">users</span> <span class="p">=</span> <span class="n">Users</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">retrieveFunction</span><span class="p">:</span> <span class="n">retrieveUsersFunction</span><span class="p">,</span>
<span class="n">filterFunction</span><span class="p">:</span> <span class="p">{</span> <span class="nv">$0</span><span class="p">.</span><span class="n">isActive</span> <span class="p">})</span>
</div></code></pre><p>The most delicate part is the second one as it asks some plumbing and boilerplate, but it should be segregated in specific areas of your code dedicated to dependency injection, like Swinject Assemblies for instance.</p><h1>Conclusion</h1><p>Although injecting traditional data structures is perfectly fine and is in line with best practices, injecting functions offers two major benefits:</p><ul><li>This puts under a new light how easy it is to leak the implementation details and how we can avoid it. The less we know about our dependencies, the better. I guess this illustrates perfectly the <a href="https://en.wikipedia.org/wiki/Law_of_Demeter">Law of Demeter</a></li><li>This makes unit tests easier to write, to read, and to reason about</li></ul><p>Using functions « everywhere » can have some unpleasant aspects like making signatures hard to read for instance. But this is something we can easily work around by using typealiases.</p><p>Using functions « everywhere » also opens the door to functional programming. We had a taste of it with partialization but it is a whole new world that you should gently explore.</p><p>Thanks for reading.</p><p>Stay tuned.</p><h1>Bonus: Swinject and the injection of functions</h1><p>Swinject is a well established dependency injection framework in the Swift community. It is used to register and resolve the « recipes » to build your dependencies. But what about registering and resolving functions ?</p><p>There is nothing more like a <strong>(String) -&gt; String</strong> function than another <strong>(String) -&gt; String</strong> function, right !</p><p>What happens if we need to resolve a function that has been registered several time with the same signature ?</p><p>Swinject provides a way to discriminate registered services by using a unique name. If we want to use that in our <strong>(String) -&gt; String</strong> case, we will end up with something like this:</p><pre><code><div class="highlight"><span></span><span class="kd">class</span> <span class="nc">MyAssembly</span><span class="p">:</span> <span class="n">Assembly</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">register</span><span class="p">(</span><span class="n">container</span><span class="p">:</span> <span class="n">Container</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">container</span><span class="p">.</span><span class="n">register</span><span class="p">(((</span><span class="nb">String</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">String</span><span class="p">).</span><span class="kc">self</span><span class="p">,</span>
                           <span class="n">name</span><span class="p">:</span> <span class="s">&quot;StringFunction1&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="kc">_</span> <span class="k">in</span>
                            <span class="k">return</span> <span class="p">{</span> <span class="n">param</span> <span class="k">in</span>
                                <span class="k">return</span> <span class="n">param</span> <span class="o">+</span> <span class="s">&quot;JAMES&quot;</span>
                            <span class="p">}</span>
        <span class="p">}</span>

        <span class="n">container</span><span class="p">.</span><span class="n">register</span><span class="p">(((</span><span class="nb">String</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">String</span><span class="p">).</span><span class="kc">self</span><span class="p">,</span>
                           <span class="n">name</span><span class="p">:</span> <span class="s">&quot;StringFunction2&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="kc">_</span> <span class="k">in</span>
                            <span class="k">return</span> <span class="p">{</span> <span class="n">param</span> <span class="k">in</span>
                                <span class="k">return</span> <span class="n">param</span> <span class="o">+</span> <span class="s">&quot;LEONARD&quot;</span>
                            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>When it comes to resolve things:</p><pre><code><div class="highlight"><span></span><span class="kd">let</span> <span class="nv">stringFunction1</span> <span class="p">=</span> <span class="n">resolver</span><span class="p">.</span><span class="n">resolve</span><span class="p">(((</span><span class="nb">String</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">String</span><span class="p">).</span><span class="kc">self</span><span class="p">,</span>
<span class="n">name</span><span class="p">:</span> <span class="s">&quot;StringFunction1&quot;</span><span class="p">)</span>
</div></code></pre><p>While there is nothing wrong about that, this is kind of ugly to read. We can improve this a bit with a protocol that groups the function signature and its name:</p><pre><code><div class="highlight"><span></span><span class="kd">public</span> <span class="kd">protocol</span> <span class="nc">NamedService</span> <span class="p">{</span>
    <span class="n">associatedtype</span> <span class="n">Service</span>
    <span class="kd">static</span> <span class="kd">var</span> <span class="nv">type</span><span class="p">:</span> <span class="n">Service</span><span class="p">.</span><span class="kr">Type</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
    <span class="kd">static</span> <span class="kd">var</span> <span class="nv">name</span><span class="p">:</span> <span class="nb">String</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">public</span> <span class="kd">extension</span> <span class="nc">NamedService</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">var</span> <span class="nv">type</span><span class="p">:</span> <span class="n">Service</span><span class="p">.</span><span class="kr">Type</span> <span class="p">{</span>
        <span class="n">Service</span><span class="p">.</span><span class="kc">self</span>
    <span class="p">}</span>

    <span class="kd">static</span> <span class="kd">var</span> <span class="nv">name</span><span class="p">:</span> <span class="nb">String</span> <span class="p">{</span>
        <span class="s">&quot;</span><span class="si">\(</span><span class="kc">self</span><span class="si">)</span><span class="s">&quot;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// And then we can extend Swinject</span>

<span class="kd">public</span> <span class="kd">extension</span> <span class="nc">Container</span> <span class="p">{</span>
    <span class="p">@</span><span class="n">discardableResult</span>
    <span class="kd">func</span> <span class="nf">register</span><span class="p">&lt;</span><span class="n">Service</span><span class="p">&gt;(</span>
        <span class="n">namedServiceType</span><span class="p">:</span> <span class="n">Service</span><span class="p">.</span><span class="kr">Type</span><span class="p">,</span>
        <span class="n">factory</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="p">(</span><span class="n">Resolver</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Service</span><span class="p">.</span><span class="n">Service</span>
    <span class="p">)</span> <span class="p">-&gt;</span> <span class="n">ServiceEntry</span><span class="p">&lt;</span><span class="n">Service</span><span class="p">.</span><span class="n">Service</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">Service</span><span class="p">:</span> <span class="n">NamedService</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">register</span><span class="p">(</span><span class="n">namedServiceType</span><span class="p">.</span><span class="n">type</span><span class="p">,</span>
                      <span class="n">name</span><span class="p">:</span> <span class="n">namedServiceType</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                      <span class="n">factory</span><span class="p">:</span> <span class="n">factory</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">public</span> <span class="kd">extension</span> <span class="nc">Resolver</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">resolve</span><span class="p">&lt;</span><span class="n">Service</span><span class="p">&gt;(</span>
        <span class="n">namedServiceType</span><span class="p">:</span> <span class="n">Service</span><span class="p">.</span><span class="kr">Type</span>
    <span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Service</span><span class="p">.</span><span class="n">Service</span><span class="p">?</span> <span class="k">where</span> <span class="n">Service</span><span class="p">:</span> <span class="n">NamedService</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">resolve</span><span class="p">(</span><span class="n">namedServiceType</span><span class="p">.</span><span class="n">type</span><span class="p">,</span>
                     <span class="n">name</span><span class="p">:</span> <span class="n">namedServiceType</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>With that in place, the Swinject assembly now becomes:</p><pre><code><div class="highlight"><span></span><span class="kd">class</span> <span class="nc">MyAssembly</span><span class="p">:</span> <span class="n">Assembly</span> <span class="p">{</span>

    <span class="kd">enum</span> <span class="nc">StringFunction1</span><span class="p">:</span> <span class="n">NamedService</span> <span class="p">{</span>
        <span class="kd">typealias</span> <span class="n">Service</span> <span class="p">=</span> <span class="p">(</span><span class="nb">String</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">String</span>
    <span class="p">}</span>

    <span class="kd">enum</span> <span class="nc">StringFunction2</span><span class="p">:</span> <span class="n">NamedService</span> <span class="p">{</span>
        <span class="kd">typealias</span> <span class="n">Service</span> <span class="p">=</span> <span class="p">(</span><span class="nb">String</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">String</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">register</span><span class="p">(</span><span class="n">container</span><span class="p">:</span> <span class="n">Container</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">container</span><span class="p">.</span><span class="n">register</span><span class="p">(</span><span class="n">namedService</span><span class="p">:</span> <span class="n">StringFunction1</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span> <span class="p">{</span> <span class="kc">_</span> <span class="k">in</span>
            <span class="k">return</span> <span class="p">{</span> <span class="n">param</span> <span class="k">in</span>
                <span class="k">return</span> <span class="n">param</span> <span class="o">+</span> <span class="s">&quot;JAMES&quot;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="n">container</span><span class="p">.</span><span class="n">register</span><span class="p">(</span><span class="n">namedService</span><span class="p">:</span> <span class="n">StringFunction2</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span> <span class="p">{</span> <span class="kc">_</span> <span class="k">in</span>
            <span class="k">return</span> <span class="p">{</span> <span class="n">param</span> <span class="k">in</span>
                <span class="k">return</span> <span class="n">param</span> <span class="o">+</span> <span class="s">&quot;LEONARD&quot;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>When it comes to resolve things:</p><pre><code><div class="highlight"><span></span><span class="kd">let</span> <span class="nv">stringFunction1</span> <span class="p">=</span> <span class="n">resolver</span><span class="p">.</span><span class="n">resolve</span><span class="p">(</span><span class="n">namedService</span><span class="p">:</span> <span class="n">StringFunction1</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span>
</div></code></pre><p>Even if we do not win that much in doing this, we make the function registration/resolving look like any traditional data structure usage. It removes a pain point in injecting functions that could have prevented you from trying this technique 😏.</p>]]></content:encoded></item><item><guid isPermaLink="true">http://blog.warpfactor.io/posts/2020-03-26-Spin</guid><title>Introducing Spin</title><description>Introducing Spin, a universal feedback loop system in Swift. A Feedback Loop is a system that is able to self-regulate by using the resulting value from its computations as the next input to itself, constantly adjusting this value according to given rules.</description><link>http://blog.warpfactor.io/posts/2020-03-26-Spin</link><pubDate>Thu, 26 Mar 2020 17:01:00 -0400</pubDate><content:encoded><![CDATA[<h1>The need for architectural patterns in swift applications</h1><p>With the recent introduction of <a href="https://developer.apple.com/documentation/combine">Combine</a> and <a href="https://developer.apple.com/tutorials/swiftui/">SwiftUI</a>, we will face some transition periods in our code base. Our applications will use both Combine and a third-party reactive framework, or both UIKit/AppKit and SwiftUI. This makes it potentially difficult to guarantee a consistent architecture over time. It is potentially hard to know when these new technologies will be incorporated in our projects. Making the right choice of architecture from the start may greatly ease the future transition.</p><p>Traditional architectural patterns like <a href="https://en.wikipedia.org/wiki/Model–view–controller">MVC</a>, <a href="https://en.wikipedia.org/wiki/Model–view–presenter">MVP</a>, or <a href="https://en.wikipedia.org/wiki/Model–view–viewmodel">MVVM</a> mostly take care of the UI layer. They won’t be of great help when it comes to mix the aforementioned technologies inside your app in a unified way. For instance, MVVM in a UIKit application will rely a lot on two-way binding technologies with reactive extensions like RxCocoa or ReactiveCocoa. This will become less true as you gradually introduce SwiftUI and Combine. Chances are great that you will then have several architectural paradigms in your app.</p><p><a href="https://www.objc.io/issues/13-architecture/viper/">VIPER</a> is a little bit more complete as it describes the routing mechanism between scenes and the separation between models (entities) and the business rules that manage them (interactor). This pattern enforces the principles of <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Architecture</a> regarding separation of concerns and dependencies management. But, as well as the MVxx patterns, it does not guarantee a consistency of syntax and paradigm over time when adopting Combine or SwiftUI gradually.</p><p>SwiftUI is about state as the single source of truth and reacting to that state mutations. This allows for views to be written in a declarative manner, not in a verbose and error prone imperative manner.</p><p>In recent years, several architectural patterns centred around the concept of State have emerged: things like <a href="https://redux.js.org">Redux</a> or MVI and more generally unidirectional data flow architectures. Sometimes they offer to manage the state in a central fashion, sometimes in a local way. Those are great patterns and they fit very well with the idea of a state as the single source of truth. I’m pretty sure they had a great influence in the making of SwiftUI.</p><p>I myself have implemented some of these patterns in production applications. They introduced me to functional programming as they rely on concepts such as immutability, pure functions, function composition, and so on. Functional programming and state management fit very well together. Functional programming is associated to data immutability, so should be the state.</p><p>Nevertheless, I experienced some drawbacks with these kind of architectures which led me to discover feedback loop systems.</p><h1>What is a feedback loop system ?</h1><p>A Feedback Loop is a system that is able to self-regulate by using the resulting value from its computations as the next input to itself, constantly adjusting this value according to given rules (Feedback Loops are used in domains like electronics to automatically adjust the level of a signal for instance).</p><img src="http://blog.warpfactor.io/Images/2020-03-26-Spin/1.png"/><blockquote><p>a feedback loop illustration</p></blockquote><p>Stated this way might sound obscur and unrelated to software engineering, <strong>BUT</strong> “adjusting a value according to certain rules” is exactly what a program, and by extension an application, is made for! An application is the sum of all kinds of states that we want to regulate so as to provide a consistent behaviour following precise rules. The rules describing the allowed transitions from one value to another are described by a state machine.</p><h2>What is a State Machine?</h2><blockquote><p>It’s an abstract machine that can be in exactly one of a finite number of states at any given time. The state machine can change from one state to another in response to some external inputs. The change from one state to another is called a transition. A state machine is defined by a list of its states, its initial state, and the conditions for each transition.</p></blockquote><p>As an application is a state machine, it can be driven by a feedback loop system. A Feedback Loop is based on three components: an initial state, a feedback, and a reducer. To illustrate each one of them, we will rely on a basic example: a system that counts from 0 to 10:</p><ul><li>The initial state: this is the starting value of our counter, 0.</li><li>A feedback: this is the rule we apply to the counter to accomplish our purpose. The output of a feedback is a request to mutate the counter. If 0 &le; counter &lt;10 then we ask to increase it else we ask to stop it.</li><li>A reducer: this is the state machine of our system. It describes all the possible transitions of our counter given its previous value and the request computed by the feedback. For instance: if the previous value was 0 and the request is to increase it, then the new value is 1; if the previous was 1 and the request is to increase it, then the new value is 2; and so on and so on. When the request from the feedback is to stop, then the previous value is returned as the new value.</li></ul><img src="http://blog.warpfactor.io/Images/2020-03-26-Spin/2.png"/><blockquote><p>a feedback loop counting from 0 to 10</p></blockquote><p>Feedbacks are the only place where you can perform side effects (networking, local I/O, UI rendering, whatever you do that accesses or mutates a state outside the local scope of the loop). Conversely, a reducer is a pure function that can only produce a new value given a previous one and a transition request. Performing side effects in reducers is forbidden as it would compromise its reproducibility.</p><h1>The drawbacks of traditional unidirectional data flow architectures</h1><p>As you can see, the particularity of the feedback loop paradigm is that the state is both an input and an output, both connected as a whole to form a unidirectional loop. We can use the state as a local cache to persist data as long as the loop is alive and running.</p><p>A typical use case would be the browsing of a paginated API. This kind of system allows for the use of the current state to always make the previous page URL and the next page URL accessible which makes irrelevant the need to store it elsewhere. In more traditional unidirectional data flow architectures, the state is only the output of the system. The inputs are “user intents” that trigger side effects and then state mutations.</p><img src="http://blog.warpfactor.io/Images/2020-03-26-Spin/3.png"/><blockquote><p>unidirectional data flow</p></blockquote><p>I’ve experienced several versions of these kinds of architectures (Redux and MVI) and found myself stuck with 2 majors issues: <em> Not having the state as an input can lead to maintaining a local state in the UI layer, or in a cache repository. </em> Relying on input such as Intents or Actions, which are often enums, forces us to parse them with <code>switch</code> statements to determine the side effect to execute. As we add new intents or new actions we have to change the way we parse them, going against the Open/Close principle of the SOLID rules.</p><p>I’m not saying these issues are a “no-go” to use these architectures, nor am I saying I’ve used them the best possible way. For instance, I’ve worked on a variation of MVI where intents were replaced by a “command pattern”. Each command was responsible for its own side effect execution. There was no parsing, the command was self-sufficient. This approach is compliant with the Open/Close principle as adding a new feature is about adding a new command to execute; and not modifying the way intents or actions are parsed.</p><p>But rather than twisting those architectures to accommodate my needs, I vote for an approach that naturally addresses these issues: feedback loop systems.</p><h1>What is Spin ?</h1><p>Let’s get back to our main concern: provide an architectural pattern that can absorb the divergence of technologies we can expect in our applications.</p><p>As we saw, feedback loop is a pretty versatile pattern. It will help us mitigate the issue with mixed technologies. But we need a way to declare feedback loops in a unified way regardless of the underlying reactive framework or the chosen UI technology. This is where Spin comes into play.</p><p><strong><a href="https://github.com/Spinners/Spin.Swift">Spin</a> is a tool to build feedback loops within a Swift based application allowing you to use a unified syntax whatever the underlying reactive programming framework and whatever Apple UI technology you use (RxSwift, ReactiveSwift, Combine and UIKit, AppKit, SwiftUI).</strong></p><p>Let’s try Spin by building a system that regulates two integers to make them converge to their average value (like some kind of system that would adjust a left and a right audio channel on stereo speakers to make them converge to the same level). We will need a data type for our state:</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">Levels</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">left</span><span class="p">:</span> <span class="nb">Int</span>
    <span class="kd">let</span> <span class="nv">right</span><span class="p">:</span> <span class="nb">Int</span>
<span class="p">}</span>
</div></code></pre><p>We will also need a data type to describe the transitions to perform on Levels:</p><pre><code><div class="highlight"><span></span><span class="kd">enum</span> <span class="nc">Event</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">increaseLeft</span>
    <span class="k">case</span> <span class="n">decreaseLeft</span> 
    <span class="k">case</span> <span class="n">increaseRight</span>
    <span class="k">case</span> <span class="n">decreaseRight</span>
<span class="p">}</span>
</div></code></pre><p>In order to describe the state machine ruling the transitions, we need a reducer function:</p><pre><code><div class="highlight"><span></span><span class="kd">func</span> <span class="nf">levelsReducer</span><span class="p">(</span><span class="n">currentLevels</span><span class="p">:</span> <span class="n">Levels</span><span class="p">,</span> <span class="n">event</span><span class="p">:</span> <span class="n">Event</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Levels</span> <span class="p">{</span>

    <span class="k">guard</span> <span class="n">currentLevels</span><span class="p">.</span><span class="kr">left</span> <span class="o">!=</span> <span class="n">currentLevels</span><span class="p">.</span><span class="kr">right</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="n">currentLevels</span> <span class="p">}</span>

    <span class="k">switch</span> <span class="n">event</span> <span class="p">{</span>
        <span class="k">case</span> <span class="p">.</span><span class="n">decreaseLeft</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">Levels</span><span class="p">(</span><span class="kr">left</span><span class="p">:</span> <span class="n">currentLevels</span><span class="p">.</span><span class="kr">left</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="kr">right</span><span class="p">:</span> <span class="n">currentLevels</span><span class="p">.</span><span class="kr">right</span><span class="p">)</span>
        <span class="k">case</span> <span class="p">.</span><span class="n">increaseLeft</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">Levels</span><span class="p">(</span><span class="kr">left</span><span class="p">:</span> <span class="n">currentLevels</span><span class="p">.</span><span class="kr">left</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="kr">right</span><span class="p">:</span> <span class="n">currentLevels</span><span class="p">.</span><span class="kr">right</span><span class="p">)</span>
        <span class="k">case</span> <span class="p">.</span><span class="n">decreaseRight</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">Levels</span><span class="p">(</span><span class="kr">left</span><span class="p">:</span> <span class="n">currentLevels</span><span class="p">.</span><span class="kr">left</span><span class="p">,</span> <span class="kr">right</span><span class="p">:</span> <span class="n">currentLevels</span><span class="p">.</span><span class="kr">right</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">case</span> <span class="p">.</span><span class="n">increaseRight</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">Levels</span><span class="p">(</span><span class="kr">left</span><span class="p">:</span> <span class="n">currentLevels</span><span class="p">.</span><span class="kr">left</span><span class="p">,</span> <span class="kr">right</span><span class="p">:</span> <span class="n">currentLevels</span><span class="p">.</span><span class="kr">right</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>So far the code is not related to a specific reactive framework, which is great. Let’s write the two feedbacks that will have an effect on each level.</p><p>With RxSwift:</p><pre><code><div class="highlight"><span></span><span class="kd">func</span> <span class="nf">leftEffect</span><span class="p">(</span><span class="n">inputLevels</span><span class="p">:</span> <span class="n">Levels</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="n">Event</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="c1">// this is the stop condition to our Spin</span>
    <span class="k">guard</span> <span class="n">inputLevels</span><span class="p">.</span><span class="kr">left</span> <span class="o">!=</span> <span class="n">inputLevels</span><span class="p">.</span><span class="kr">right</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="p">}</span>

    <span class="c1">// this is the regulation for the left level</span>
    <span class="k">if</span> <span class="n">inputLevels</span><span class="p">.</span><span class="kr">left</span> <span class="o">&lt;</span> <span class="n">inputLevels</span><span class="p">.</span><span class="kr">right</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">.</span><span class="n">just</span><span class="p">(.</span><span class="n">increaseLeft</span><span class="p">)</span>
    <span class="p">}</span>  <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">.</span><span class="n">just</span><span class="p">(.</span><span class="n">decreaseLeft</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">rightEffect</span><span class="p">(</span><span class="n">inputLevels</span><span class="p">:</span> <span class="n">Levels</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="n">Event</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="c1">// this is the stop condition to our Spin</span>
    <span class="k">guard</span> <span class="n">inputLevels</span><span class="p">.</span><span class="kr">left</span> <span class="o">!=</span> <span class="n">inputLevels</span><span class="p">.</span><span class="kr">right</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="p">}</span>

    <span class="c1">// this is the regulation for the right level</span>
    <span class="k">if</span> <span class="n">inputLevels</span><span class="p">.</span><span class="kr">right</span> <span class="o">&lt;</span> <span class="n">inputLevels</span><span class="p">.</span><span class="kr">left</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">.</span><span class="n">just</span><span class="p">(.</span><span class="n">increaseRight</span><span class="p">)</span>
    <span class="p">}</span>  <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">.</span><span class="n">just</span><span class="p">(.</span><span class="n">decreaseRight</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>With ReactiveSwift:</p><pre><code><div class="highlight"><span></span><span class="kd">func</span> <span class="nf">leftEffect</span><span class="p">(</span><span class="n">inputLevels</span><span class="p">:</span> <span class="n">Levels</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">SignalProducer</span><span class="p">&lt;</span><span class="n">Event</span><span class="p">,</span> <span class="n">Never</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="c1">// this is the stop condition to our Spin</span>
    <span class="k">guard</span> <span class="n">inputLevels</span><span class="p">.</span><span class="kr">left</span> <span class="o">!=</span> <span class="n">inputLevels</span><span class="p">.</span><span class="kr">right</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">.</span><span class="n">empty</span> <span class="p">}</span>

    <span class="c1">// this is the regulation for the left level</span>
    <span class="k">if</span> <span class="n">inputLevels</span><span class="p">.</span><span class="kr">left</span> <span class="o">&lt;</span> <span class="n">inputLevels</span><span class="p">.</span><span class="kr">right</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">SignalProducer</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="p">.</span><span class="n">increaseLeft</span><span class="p">)</span>
    <span class="p">}</span>  <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">SignalProducer</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="p">.</span><span class="n">decreaseLeft</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">rightEffect</span><span class="p">(</span><span class="n">inputLevels</span><span class="p">:</span> <span class="n">Levels</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">SignalProducer</span><span class="p">&lt;</span><span class="n">Event</span><span class="p">,</span> <span class="n">Never</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="c1">// this is the stop condition to our Spin</span>
    <span class="k">guard</span> <span class="n">inputLevels</span><span class="p">.</span><span class="kr">left</span> <span class="o">!=</span> <span class="n">inputLevels</span><span class="p">.</span><span class="kr">right</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">.</span><span class="n">empty</span> <span class="p">}</span>

    <span class="c1">// this is the regulation for the right level</span>
    <span class="k">if</span> <span class="n">inputLevels</span><span class="p">.</span><span class="kr">right</span> <span class="o">&lt;</span> <span class="n">inputLevels</span><span class="p">.</span><span class="kr">left</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">SignalProducer</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="p">.</span><span class="n">increaseRight</span><span class="p">)</span>
    <span class="p">}</span>  <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">SignalProducer</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="p">.</span><span class="n">decreaseRight</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>With Combine:</p><pre><code><div class="highlight"><span></span><span class="kd">func</span> <span class="nf">leftEffect</span><span class="p">(</span><span class="n">inputLevels</span><span class="p">:</span> <span class="n">Levels</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">AnyPublisher</span><span class="p">&lt;</span><span class="n">Event</span><span class="p">,</span> <span class="n">Never</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="c1">// this is the stop condition to our Spin</span>
    <span class="k">guard</span> <span class="n">inputLevels</span><span class="p">.</span><span class="kr">left</span> <span class="o">!=</span> <span class="n">inputLevels</span><span class="p">.</span><span class="kr">right</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="n">Empty</span><span class="p">().</span><span class="n">eraseToAnyPublisher</span><span class="p">()</span> <span class="p">}</span>

    <span class="c1">// this is the regulation for the left level</span>
    <span class="k">if</span> <span class="n">inputLevels</span><span class="p">.</span><span class="kr">left</span> <span class="o">&lt;</span> <span class="n">inputLevels</span><span class="p">.</span><span class="kr">right</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">Just</span><span class="p">(.</span><span class="n">increaseLeft</span><span class="p">).</span><span class="n">eraseToAnyPublisher</span><span class="p">()</span>
    <span class="p">}</span>  <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">Just</span><span class="p">(.</span><span class="n">decreaseLeft</span><span class="p">).</span><span class="n">eraseToAnyPublisher</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">rightEffect</span><span class="p">(</span><span class="n">inputLevels</span><span class="p">:</span> <span class="n">Levels</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">AnyPublisher</span><span class="p">&lt;</span><span class="n">Event</span><span class="p">,</span> <span class="n">Never</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="c1">// this is the stop condition to our Spin</span>
    <span class="k">guard</span> <span class="n">inputLevels</span><span class="p">.</span><span class="kr">left</span> <span class="o">!=</span> <span class="n">inputLevels</span><span class="p">.</span><span class="kr">right</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="n">Empty</span><span class="p">().</span><span class="n">eraseToAnyPublisher</span><span class="p">()</span> <span class="p">}</span>

    <span class="c1">// this is the regulation for the right level</span>
    <span class="k">if</span> <span class="n">inputLevels</span><span class="p">.</span><span class="kr">right</span> <span class="o">&lt;</span> <span class="n">inputLevels</span><span class="p">.</span><span class="kr">left</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">Just</span><span class="p">(.</span><span class="n">increaseRight</span><span class="p">).</span><span class="n">eraseToAnyPublisher</span><span class="p">()</span>
    <span class="p">}</span>  <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">Just</span><span class="p">(.</span><span class="n">decreaseRight</span><span class="p">).</span><span class="n">eraseToAnyPublisher</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>No matter the reactive technology you choose, writing a feedback loop (also called Spin) is as simple as that:</p><pre><code><div class="highlight"><span></span><span class="kd">let</span> <span class="nv">levelsSpin</span> <span class="p">=</span> <span class="n">Spinner</span>
<span class="p">.</span><span class="n">initialState</span><span class="p">(</span><span class="n">Levels</span><span class="p">(</span><span class="kr">left</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="kr">right</span><span class="p">:</span> <span class="mi">20</span><span class="p">))</span>
<span class="p">.</span><span class="n">feedback</span><span class="p">(</span><span class="n">Feedback</span><span class="p">(</span><span class="n">effect</span><span class="p">:</span> <span class="n">leftEffect</span><span class="p">))</span>
<span class="p">.</span><span class="n">feedback</span><span class="p">(</span><span class="n">Feedback</span><span class="p">(</span><span class="n">effect</span><span class="p">:</span> <span class="n">rightEffect</span><span class="p">))</span>
<span class="p">.</span><span class="n">reducer</span><span class="p">(</span><span class="n">Reducer</span><span class="p">(</span><span class="n">levelsReducer</span><span class="p">))</span>
</div></code></pre><p>That’s it. You can use RxSwift in a portion of your app and Combine in another one, and all the feedback loops will use the same syntax.</p><p>For “DSL-like” syntax lovers, there is a more declarative way:</p><pre><code><div class="highlight"><span></span><span class="kd">let</span> <span class="nv">levelsSpin</span> <span class="p">=</span> <span class="n">Spin</span><span class="p">(</span><span class="n">initialState</span><span class="p">:</span> <span class="n">Levels</span><span class="p">(</span><span class="kr">left</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="kr">right</span><span class="p">:</span> <span class="mi">20</span><span class="p">),</span> <span class="n">reducer</span><span class="p">:</span> <span class="n">Reducer</span><span class="p">(</span><span class="n">levelsReducer</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">Feedback</span><span class="p">(</span><span class="n">effect</span><span class="p">:</span> <span class="n">leftEffect</span><span class="p">)</span>
    <span class="n">Feedback</span><span class="p">(</span><span class="n">effect</span><span class="p">:</span> <span class="n">rightEffect</span><span class="p">)</span>
<span class="p">}</span>
</div></code></pre><p>How to start the loop ?</p><pre><code><div class="highlight"><span></span><span class="c1">// With RxSwift</span>
<span class="n">Observable</span>
    <span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="n">spin</span><span class="p">:</span> <span class="n">levelsSpin</span><span class="p">)</span>
    <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="n">by</span><span class="p">:</span> <span class="n">disposeBag</span><span class="p">)</span>

<span class="c1">// With ReactiveSwift</span>
<span class="n">SignalProducer</span>
    <span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="n">spin</span><span class="p">:</span> <span class="n">levelsSpin</span><span class="p">)</span>
    <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="n">by</span><span class="p">:</span> <span class="n">disposeBag</span><span class="p">)</span>

<span class="c1">// With Combine</span>
<span class="n">AnyPublisher</span>
    <span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="n">spin</span><span class="p">:</span> <span class="n">levelsSpin</span><span class="p">)</span>
    <span class="p">.</span><span class="n">store</span><span class="p">(</span><span class="k">in</span><span class="p">:</span> <span class="p">&amp;</span><span class="n">cancellables</span><span class="p">)</span>
</div></code></pre><p>Mixing reactive frameworks is no more an issue 👍.</p><h1>Using Spin in a UI perspective</h1><p>Although a feedback loop can exist by itself without any visualization, it makes more sense in our developer world to use it as a way to produce a State that will be rendered on a screen and a way to handle events emitted by the users. Fortunately, taking a State as an input for rendering and returning a stream of events from the user interactions looks A LOT like the definition of a feedback, and we know how to handle feedbacks 😁, with a Spin of course. Once a Spin/feedback loop is built, we can “decorate” it with a new feedback dedicated to the UI rendering/interactions. A special type of Spin exists to perform that decoration: UISpin. As a global picture, we can illustrate a feedback loop in the context of a UI with this diagram:</p><img src="http://blog.warpfactor.io/Images/2020-03-26-Spin/2.png"/><blockquote><p>a Spin in the context of a UI usage</p></blockquote><p>In a ViewController, let’s say you have a rendering function like:</p><pre><code><div class="highlight"><span></span><span class="kd">func</span> <span class="nf">render</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">switch</span> <span class="n">state</span> <span class="p">{</span>
    <span class="k">case</span> <span class="p">.</span><span class="n">increasing</span><span class="p">(</span><span class="kd">let</span> <span class="nv">value</span><span class="p">):</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">counterLabel</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="s">&quot;</span><span class="si">\(</span><span class="n">value</span><span class="si">)</span><span class="s">&quot;</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">counterLabel</span><span class="p">.</span><span class="n">textColor</span> <span class="p">=</span> <span class="p">.</span><span class="n">green</span>
    <span class="k">case</span> <span class="p">.</span><span class="n">decreasing</span><span class="p">(</span><span class="kd">let</span> <span class="nv">value</span><span class="p">):</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">counterLabel</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="s">&quot;</span><span class="si">\(</span><span class="n">value</span><span class="si">)</span><span class="s">&quot;</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">counterLabel</span><span class="p">.</span><span class="n">textColor</span> <span class="p">=</span> <span class="p">.</span><span class="n">red</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>We need to decorate the “business” Spin with a UISpin (in the <code>viewDidLoad</code> function for instance).</p><pre><code><div class="highlight"><span></span><span class="c1">// previously defined or injected: counterSpin is the Spin that handles our counter rules</span>
<span class="kc">self</span><span class="p">.</span><span class="n">uiSpin</span> <span class="p">=</span> <span class="n">UISpin</span><span class="p">(</span><span class="n">spin</span><span class="p">:</span> <span class="n">counterSpin</span><span class="p">)</span>
<span class="c1">// self.uiSpin is now able to handle UI side effects</span>

<span class="c1">// we now want to attach the UI Spin to the rendering function of the ViewController:</span>
<span class="kc">self</span><span class="p">.</span><span class="n">uiSpin</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="n">on</span><span class="p">:</span> <span class="kc">self</span><span class="p">,</span> <span class="n">using</span><span class="p">:</span> <span class="p">{</span> <span class="nv">$0</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="n">state</span><span class="p">:)</span> <span class="p">})</span>
<span class="c1">// And once the view is ready (in “viewDidLoad” function for instance) let’s start the loop:</span>
<span class="kc">self</span><span class="p">.</span><span class="n">uiSpin</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
<span class="c1">// the underlying reactive stream will be disposed once the uiSpin will be deinit</span>
</div></code></pre><p>Sending events in the loop is very straightforward; simply use the emit function:</p><pre><code><div class="highlight"><span></span><span class="kc">self</span><span class="p">.</span><span class="n">uiSpin</span><span class="p">.</span><span class="n">emit</span><span class="p">(</span><span class="n">Event</span><span class="p">.</span><span class="n">startCounter</span><span class="p">)</span>
</div></code></pre><h1>What about SwiftUI ?</h1><p>Because SwiftUI relies on the idea of a binding between a State and a View and takes care of the rendering, the way to connect a SwiftUI Spin is slightly different, and even simpler. In your view you have to annotate the SwiftUI Spin variable with “@ObservedObject”:</p><pre><code><div class="highlight"><span></span><span class="p">@</span><span class="n">ObservedObject</span>
<span class="kd">private</span> <span class="kd">var</span> <span class="nv">uiSpin</span><span class="p">:</span> <span class="n">SwiftUISpin</span><span class="p">&lt;</span><span class="n">State</span><span class="p">,</span> <span class="n">Event</span><span class="p">&gt;</span> <span class="p">=</span> <span class="p">{</span>
    <span class="c1">// previously defined or injected: counterSpin is the Spin that handles our counter business</span>
    <span class="kd">let</span> <span class="nv">spin</span> <span class="p">=</span> <span class="n">SwiftUISpin</span><span class="p">(</span><span class="n">spin</span><span class="p">:</span> <span class="n">counterSpin</span><span class="p">)</span>
    <span class="n">spin</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">spin</span>
<span class="p">}()</span>
</div></code></pre><p>You can then use the “uiSpin.state” property inside the view to display data and uiSpin.emit() to send events. As a SwiftUISpin is also an <code>ObservableObject</code>, every state mutation will trigger a view rendering.</p><pre><code><div class="highlight"><span></span><span class="n">Button</span><span class="p">(</span><span class="n">action</span><span class="p">:</span> <span class="p">{</span>
    <span class="kc">self</span><span class="p">.</span><span class="n">uiSpin</span><span class="p">.</span><span class="n">emit</span><span class="p">(</span><span class="n">Event</span><span class="p">.</span><span class="n">startCounter</span><span class="p">)</span>
<span class="p">})</span> <span class="p">{</span>
    <span class="n">Text</span><span class="p">(</span><span class="s">&quot;</span><span class="si">\(</span><span class="kc">self</span><span class="p">.</span><span class="n">uiSpin</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">isCounterPaused</span> <span class="p">?</span> <span class="s">&quot;Start&quot;</span><span class="p">:</span> <span class="s">&quot;Stop&quot;</span><span class="si">)</span><span class="s">&quot;</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// A SwiftUISpin can also be used to produce SwiftUI bindings:</span>
<span class="n">Toggle</span><span class="p">(</span><span class="n">isOn</span><span class="p">:</span> <span class="kc">self</span><span class="p">.</span><span class="n">uiSpin</span><span class="p">.</span><span class="n">binding</span><span class="p">(</span><span class="k">for</span><span class="p">:</span> <span class="err">\</span><span class="p">.</span><span class="n">isPaused</span><span class="p">,</span> <span class="n">event</span><span class="p">:</span> <span class="p">.</span><span class="n">toggle</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Text</span><span class="p">(</span><span class="s">&quot;toggle&quot;</span><span class="p">)</span>
<span class="p">}</span>
       
<span class="c1">// \.isPaused is a keypath which designates a sub state of the state,</span>
<span class="c1">// and .toggle is the event to emit when the Toggle is changed.</span>
</div></code></pre><p>The UIKit (AppKit) and SwiftUI ways of using a UISpin are very similar allowing you to integrate feedback loops previously written for UIKit screens inside new SwiftUI components. Mixing UI paradigms is no more an issue 👍.</p><h1>Conclusion</h1><p>We have reached our goal: to propose an architectural pattern implementation that can ease the transitions between incoming technologies. In the Spinners organization, you can find 2 demo applications demonstrating the usage of Spin with RxSwift, ReactiveSwift, and Combine:</p><ul><li>A basic counter application: <a href="https://github.com/Spinners/Spin.UIKit.Demo.Basic">UIKit version</a> and <a href="https://github.com/Spinners/Spin.SwiftUI.Demo.Basic">SwiftUI version</a></li><li>A more advanced “network based” application using dependency injection and a coordinator pattern (UIKit): <a href="https://github.com/Spinners/Spin.UIKit.Demo">UIKit version</a> and <a href="https://github.com/Spinners/Spin.SwiftUI.Demo">SwiftUI version</a></li></ul><p>There is the <a href="https://github.com/Spinners/Spin.Swift">Spin.Swift repo</a>. PR are of course welcome (so as ⭐️ 😏). I am planning to develop a Kotlin implementation, compatible with both RxJava and Flow (any help would be appreciated). I hope you enjoyed this article. Feel free to leave comments so we can exchange about it.</p>]]></content:encoded></item><item><guid isPermaLink="true">http://blog.warpfactor.io/posts/2019-07-20-Swift-AOP</guid><title>Swift: An Aspect Oriented Programming Language ?</title><description>To answer this question, we must first understand what is Aspect Oriented Programming (aka AOP). I like to see AOP as a response to a certain kind of failure of Object Oriented conceptions.</description><link>http://blog.warpfactor.io/posts/2019-07-20-Swift-AOP</link><pubDate>Sat, 20 Jul 2019 17:01:00 -0400</pubDate><content:encoded><![CDATA[<p>To answer this question, we must first understand what is <a href="https://en.wikipedia.org/wiki/Aspect-oriented_programming"><strong>A</strong>spect <strong>O</strong>riented <strong>P</strong>rogramming</a> (aka <strong>AOP</strong>). I like to see AOP as a response to a certain kind of failure of Object Oriented conceptions.</p><h1>The failure of Object Oriented Programming ?</h1><p><strong>O</strong>bject <strong>O</strong>riented <strong>P</strong>rogramming has dominated the art of software engineering for many years. This approach modularises complex and large systems into technical and functional units according to an intuitive model close to the real world. This paradigm attempts to architect applications in modules that are, in principle, independent, by managing different aspects of the system. An object-oriented application is built around units of meaning: “objects”, whose life cycle are managed by “business” modules.</p><p>Cross-cutting concerns, however, appear quickly and systematically, slowly compromising the very principles of object-oriented programming. These concerns are meaningless in terms of modeling and are purely technical aspects serving the cause of the developed application. They are developed in the form of modules, not very conceptualized, and often too little accomplished in terms of abstraction.</p><p>Few examples of transverse preoccupations:</p><ul><li>persistence and transactions</li><li>logging</li><li>cache management</li></ul><p>The more the application becomes large and complex, the more the presence of such modules becomes problematic. The developer will face two problems:</p><ul><li>entanglement</li><li>dispersion</li></ul><h1>Entanglement</h1><p>Entanglement occurs when a business module implements multiple cross-cutting concerns. Technical code appears across pure business models and logic, making the module less and less readable and focused more on its preocupation.</p><h1>Dispersion</h1><p>Dispersion occurs when the calls to these technical modules spread insidiously throughout the application. All parts of the code are somehow “contaminated” by the implementation of transversal concerns.</p><img src="http://blog.warpfactor.io/Images/2019-07-20-Swift-AOP/dispersion-2.png"/><blockquote><p>These are entanglement and dispersion phenomena</p></blockquote><h1>Aspect Oriented Programming is born from this failure</h1><p>Until now, we discussed the notion of technical “aspects” of the code and the drifts they can introduce. Based on this observation, an elegant solution emerged: extracting these aspects and making them autonomous and applicable to any part of the application.</p><p>Cross-cutting concerns will now be managed from outside the business modules by specifying them in components called “Aspects”.</p><img src="http://blog.warpfactor.io/Images/2019-07-20-Swift-AOP/aop-1.png"/><blockquote><p>Aspects segregate transversale preoccupations</p></blockquote><p>This new paradigm, beyond its purely conceptual definition, implies an adaptation of the languages in order to incorporate those “Aspects” into the business code.</p><p>Aspect-oriented programming does not replace object-oriented programming. It is actually the ideal complement to tend towards purely object-oriented modeling of an application.</p><p>The role of the developer is now to identify the “Aspects” to outsource and the conditions of their execution within the business logic.</p><h1>Let’s bring in some formal concepts</h1><p>Aspect Oriented Programming comes with the ability to specify the precise places where to insert the transversal code.</p><p><strong>Jointpoint</strong>: Defines, in a theoretical way, <strong>WHERE</strong> an aspect can be inserted in the flow of execution of the code.The most common <strong>jointpoints</strong> are method calls or properties access.</p><p><strong>Pointcut</strong>: Defines <strong>HOW</strong> to insert Aspect in <strong>joinpoints</strong>. It comes with a pattern language that allows to identify all the <strong>joinpoints</strong> <strong>WHERE</strong> to insert the transversal code.</p><p><strong>Advice</strong>: Defines the transversale code to insert in the places spotted by the <strong>pointcuts</strong>.</p><p><strong>Weaving</strong>: Defines the final process where the business code and the transversal code are mixed up together to form the whole application code, addressing all the preoccupations of the software design. AOP is about generating code (at compile time or runtime) at some specific point in the code flow to augment it.</p><img src="http://blog.warpfactor.io/Images/2019-07-20-Swift-AOP/weaving-1.png"/><blockquote><p>Weaving <strong>advices</strong> into <strong>Jointpoints</strong> defined by <strong>pointcuts</strong></p></blockquote><h4>Some examples with AspectJ</h4><p><a href="https://www.eclipse.org/aspectj/">AspectJ</a> is a reference implementation of the AOP paradigm in the Java world. As Java is a well known and easy to understand language, it will be a good llustration of the theoretical principles we’ve seen so far.</p><p>As the purpose of this article is not to master AspectJ, we will go through three simple examples of leveraging AOP to remove technical/transversal code from business logic: logging, the Singleton pattern, and the Observer pattern.</p><p>There will be a Swift counterpart for each one of these examples to echo the question asked in the title of the article.</p><h1>Logging with AspectJ</h1><p>Given these requirements:</p><blockquote><p>The application must support the creation of a user, give this user a name, and prompt the user to display that name. The application should also log the manipulation of the user’s data.</p></blockquote><p>We clearly see two concepts emerge: on the one hand, <strong>User</strong> modeling and its lifecycle, and on the other hand, <strong>logging</strong> the progress of the application. We could include logs in the code of the User; this would meet the requirements. But <strong>User</strong> would then lose its status of being a <strong>P</strong>lain <strong>O</strong>ld <strong>J</strong>ava <strong>O</strong>bject and would not respect the principle of Single Responsibility. Obviously, one aspect must take care of this while maintaining the integrity of our object modeling.</p><img src="http://blog.warpfactor.io/Images/2019-07-20-Swift-AOP/1-1.png"/><blockquote><p>The User POJO and its lifecycle</p></blockquote><p>As is, this code won’t produce any logs. User is a POJO matching the OOP best practices: it’s only responsibility is to model our universe..</p><p>Here is the Aspect we can implement to add logs without corrupting the POJO:</p><img src="http://blog.warpfactor.io/Images/2019-07-20-Swift-AOP/2.png"/><blockquote><p>This Aspect will log the calls to getName() and setName()</p></blockquote><p>Without diving into AspectJ syntax, this aspect will add the following behaviors to the application:</p><ul><li>Each time User.getName() is called (actually around the call), an <strong>advice</strong> is executed to log the returned value</li><li>Before the execution of User.setName(), an advice is executed to log the parameters passed to the method</li></ul><p>After the weaving process, the execution of the application will result in the following printing:</p><img src="http://blog.warpfactor.io/Images/2019-07-20-Swift-AOP/3.png"/><p>Of course this is a trivial example, AspectJ is capable of so much more, but AOP has met its goal here. We added a purely technical preoccupation to the application without even modifying our business logic and model.</p><h1>Logging with Swift</h1><p>As our challenge is to implement a pure object model, we can start by implementing the <strong>User</strong> structure and its lifecycle similarly to what we’ve done with Java:</p><img src="http://blog.warpfactor.io/Images/2019-07-20-Swift-AOP/4.png"/><p>There is no such mechanism in Swift as weaving, but with Swift 5.1 we now have property wrappers (see my <a href="https://medium.com/genetec-tech/property-wrappers-in-swift-5-1-the-missing-published-implementation-1a466ebcf660?source=friends_link&sk=564ffcd4fef3011f270df2d6c4fe0b30">previous article</a> on this topic), which act like a delegate when accessing a property. We could leverage that mechanism and delegate the logging to a generic property wrapper.</p><img src="http://blog.warpfactor.io/Images/2019-07-20-Swift-AOP/5.png"/><blockquote><p>Each access to the value property will print logs</p></blockquote><p>By annotating a property with the <strong>@Logged</strong> property wrapper, we will make its read/write access produce logs, <strong>BUT</strong> it requires us to slightly modify the original code:</p><img src="http://blog.warpfactor.io/Images/2019-07-20-Swift-AOP/6.png"/><blockquote><p>The name property is now under the watch of a property wrapper</p></blockquote><p>The execution of the application will print the following result:</p><img src="http://blog.warpfactor.io/Images/2019-07-20-Swift-AOP/7.png"/><p>The result is really close to what we achieved with true AOP. If we consider the <strong>@Logged</strong> annotation as some kind of metadata completing the “<strong>name</strong>” property, we can say that it is not intrusive in terms of object-oriented conception.</p><p>There is even an advantage in property wrappers. Since it is a generic concept, we can annotate the “<strong>name</strong>” property as well as a whole “<strong>user</strong>” property. This allows for logging to be easily extended on new fields added to the <strong>User</strong> structure.</p><h1>The Singleton pattern with AspectJ</h1><p>Singleton is a controversial design pattern. Having a single instance of an object can be useful, but it shouldn’t have an impact on the way the model is written.</p><p>AOP can help to segregate the implementation details inside an Aspect.</p><p>One of the rare cases where Singleton is acceptable is to implement a Logger.</p><p>Here is a naïve implementation in Java:</p><img src="http://blog.warpfactor.io/Images/2019-07-20-Swift-AOP/8.png"/><blockquote><p>A naïve/not optimized implementation of a Logger in Java</p></blockquote><p>In this implementation, there is no static instance member of type “<strong>Logger</strong>” to achieve the Singleton pattern. There will be as many instances of Logger as the number of times the constructor is called in our program.</p><p>However, AspectJ gives us the opportunity to capture the calls to the Logger constructor and provide a unique instance.</p><img src="http://blog.warpfactor.io/Images/2019-07-20-Swift-AOP/9.png"/><blockquote><p>With AspectJ, the default instantiation strategy for an Aspect is to create a singleton</p></blockquote><p>The instance of the logger to be created is now provided by the Aspect. Since the default instantiation strategy for an Aspect with AspectJ is a singleton, the created logger will inherently be a singleton.</p><img src="http://blog.warpfactor.io/Images/2019-07-20-Swift-AOP/10.png"/><blockquote><p>Although loggerA and loggerB seem to be the result of two instantiations, there are the very same object</p></blockquote><p>We achieved to have the benefits of using a Singleton without compromising the conception of the Logger.</p><h1>The Singleton pattern with Swift</h1><p>We will once again leverage property wrapper to delegate object creation to a third party actor that will ensure the uniqueness of the instance.</p><p>Let’s first implement a class that will enforce the singleton pattern by storing unique references inside a static dictionary.</p><img src="http://blog.warpfactor.io/Images/2019-07-20-Swift-AOP/11.png"/><blockquote><p><strong>Storage</strong> is a wrapper around a static dictionary that ensures uniqueness of instances</p></blockquote><p>We can now implement a property wrapper that will use this storage as a provider for the generic value for which it acts as a delegate.</p><img src="http://blog.warpfactor.io/Images/2019-07-20-Swift-AOP/12.png"/><blockquote><p>The <strong>value</strong> access is delegated to the static storage, thus enforcing the Singleton pattern</p></blockquote><p>Let’s get back to the Logger example:</p><img src="http://blog.warpfactor.io/Images/2019-07-20-Swift-AOP/13.png"/><p>Once again, we are really close to what we achieved with AspectJ, if we can live with the fact of having to annotate the properties.</p><p>We can push the boundaries of the property wrapper even further with the two following add-ons.</p><p><strong>1</strong>: By accessing the property wrapper dedicated functions (with the “$” notation), we can, for instance, reset the Singleton reference whenever it’s needed.</p><img src="http://blog.warpfactor.io/Images/2019-07-20-Swift-AOP/14.png"/><blockquote><p>The property wrapper mechanism gives us opportunity to access utility functions to manage the storage</p></blockquote><p>Once the reset()function is called, the related storage is cleared. A new Singleton reference will be created next time it is required.</p><p><strong>2</strong>: As we can pass arguments to a property wrapper, we can introduce the concept of <strong>Scope</strong>. A scope could be seen as a strategy of instantiation for the managed objects. Singleton would only be one of the possible scopes (the default one actually). Whenever you define a custom scope, the instantiation would be attached to this scope only. It now makes sense to rename the <strong>Singleton</strong> property wrapper to a <strong>Managed</strong> property wrapper.</p><img src="http://blog.warpfactor.io/Images/2019-07-20-Swift-AOP/15.png"/><blockquote><p>The <strong>scope</strong> is used as a component of the objects keys in the static dictionary of the <strong>Storage</strong></p></blockquote><p>By default, a <strong>@Managed</strong> property will belong to the “Singleton” scope. Whenever the scope is explicitly mentioned in the annotation, the created object will be segregated to this scope.</p><img src="http://blog.warpfactor.io/Images/2019-07-20-Swift-AOP/16.png"/><p>If we only consider AOP as a way to intercept property access and to inject code around them, then property wrappers are pretty close to what is an Aspect.</p><p>However, AOP is not just about capturing property calls. There is, for instance, a feature in AspectJ called <strong>inter-type declaration</strong>.</p><p><strong>Inter-type declaration</strong> allows us to augment the business code by modifying the structure of the model. We can, for instance, add attributes and methods to a class or modify its inheritance relationships. We will see this principle in action by applying the <a href="https://en.wikipedia.org/wiki/Observer_pattern">Observer</a> pattern to a model whose code won’t even mention this pattern and then see how Swift can address this issue.</p><h1>The Observer pattern with AspectJ</h1><p>The Observer pattern is used in object-oriented programming to decouple object modeling from the layers that will react to the mutations performed on this object. The observed subject maintains a list of observers, which it will notify when being mutated.</p><p>It is often used in architecture patterns like <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">MVC</a> to handle UI refresh when the business model changes.</p><p>In the traditional Java world, this pattern involves having interfaces like IObserver and ISubject to abstract the registration and notification mechanisms.</p><img src="http://blog.warpfactor.io/Images/2019-07-20-Swift-AOP/17.png"/><blockquote><p>The model would have to implement the ISubject interface, whereas the observer layers would have to implement the IObserver interface</p></blockquote><p>Let’s say we have a <strong>User</strong> model that implements <strong>ISubject</strong> and a <strong>UserView</strong> that implements <strong>IObserver</strong>. Establishing the connections between them would come down to:</p><img src="http://blog.warpfactor.io/Images/2019-07-20-Swift-AOP/18.png"/><blockquote><p>The call to user.setName() would internally call the fireNotification() method</p></blockquote><p>Making <strong>User</strong> and <strong>UserView</strong> implement interfaces is pretty intrusive in terms of modeling. For instance, it implies that User has a mechanism to keep track of its observers in some kind of list to be able to notify them. Fundamentally a User is just a User, it should not be aware of the observation mechanism.</p><p>We can take advantage of the <strong>inter-type declaration</strong> to remove this responsibility from the User model. From now on, take for granted that the code of <strong>User</strong> and <strong>UserView</strong> are completely free of technical concerns.</p><p>We will dynamically modify their structure in order to augment their code with the interface implementations.</p><img src="http://blog.warpfactor.io/Images/2019-07-20-Swift-AOP/19.png"/><p>This code can seem a little be tricky, but basically it does two things:</p><ul><li>make the User dynamically implement ISubject</li><li>capture the calls to setter methods in User and subsequently fire notifications</li></ul><p>We would do something similar for UserView to make it implement IObserver.</p><p>After the weaving process, User and UserView would implement their respective interfaces without even knowing it. The model is kept pure while the Observer pattern is implemented.</p><h1>The Observer pattern with Swift</h1><p>Although the challenge seems pretty high here, Swift gives us two tools to achieve our goal:</p><ul><li><strong>extension</strong> will be leveraged to make <strong>UserView</strong> conform to <strong>Observer</strong></li><li><strong>property wrappe</strong>r will be used to make any desired property be an observed <strong>Subject</strong></li></ul><p>Let’s first define an <strong>Observer</strong> protocol. We will make use of an “associatedtype” to later take advantage of the language type-safety.</p><img src="http://blog.warpfactor.io/Images/2019-07-20-Swift-AOP/20.png"/><blockquote><p><strong>Observer</strong> being a protocol with an <strong>associatedtype</strong>, we apply a type-erasure technic to be able to use it as an instance property or as a function parameter whenever its needed</p></blockquote><p>We can now define a <strong>Subject</strong> protocol. Like we did for <strong>Observer</strong>, we will also define an associatedtype representing the value that will be observed. It will allow to constrain both <strong>Observer</strong> and <strong>Subject</strong> associatedtypes to the same value type.</p><img src="http://blog.warpfactor.io/Images/2019-07-20-Swift-AOP/21.png"/><blockquote><p>We can link <strong>Subject</strong> and <strong>Observers</strong> only if their respective associatedtypes are consistent</p></blockquote><p>As expected, <strong>UserView</strong>will be a simple class whose only responsibility is to render a <strong>User</strong>. An extension can be implemented to make it conform to <strong>Observer</strong>.</p><img src="http://blog.warpfactor.io/Images/2019-07-20-Swift-AOP/22.png"/><blockquote><p>Extensions can be seen as the Swift counterpart to AspectJ inter-type declaration as they modify the inheritance/conformance of a type</p></blockquote><p>We now need to react to property mutations on a Subject to notify its observers. The trick here is to delegate the notifications to a property wrapper that will play the role of the <strong>Subject</strong>.</p><img src="http://blog.warpfactor.io/Images/2019-07-20-Swift-AOP/23.png"/><p>We can now annotate any property with <strong>@Observed</strong> and use the “$” notation to access its related Subject aspect.</p><img src="http://blog.warpfactor.io/Images/2019-07-20-Swift-AOP/24.png"/><p>This is pretty satisfying 👍. User and UserView remain pure in terms of Object Oriented conception, but they can be actors in an Observer pattern thanks to <strong>Extension</strong> and <strong>Property Wrapper</strong>.</p><h1>Conclusion</h1><p>Swift: An Aspect Oriented Programming Language ?</p><p><strong>Not really</strong>. Aspect Oriented Programming languages are not limited to modifying a type inheritance or executing code whenever a property is accessed. They are about :</p><ul><li>precisely defining the conditions of insertion for an Aspect (before, after, around methods calls, properties accesses, exceptions thrown, …)</li><li>weaving them statically or dynamically</li><li>performing introspection on the intercepted code and being able to completely change the original code behavior</li></ul><p><strong>But</strong> Swift is a multi-paradigm language for sure. This is what makes it so versatile, powerful, and yet easy to learn. It is at the same time:</p><ul><li>an <strong>O</strong>bject <strong>O</strong>riented <strong>P</strong>rogramming language: with concepts such as classes and objects, abstraction, inheritance and polymorphism</li><li>a <strong>P</strong>rotocol <strong>O</strong>riented <strong>P</strong>rogramming language: with tools such as protocol extensions, conditional conformance and protocol composition</li><li>a <strong>F</strong>unctional <strong>P</strong>rogramming language: with immutable data types like structs and enums or concepts like <a href="https://en.wikipedia.org/wiki/Higher-order_function">higher order functions</a> and <a href="https://alisoftware.github.io/swift/2015/10/17/lets-talk-about-monads/">monads</a></li><li>an <strong>A</strong>spect <strong>O</strong>riented <strong>P</strong>rogramming language: mainly thanks to extensions and property wrappers</li></ul><p>Thanks for reading and don’t hesitate to give your feedback about Swift being or not being an Aspect Oriented Programming language.</p>]]></content:encoded></item><item><guid isPermaLink="true">http://blog.warpfactor.io/posts/2019-06-18-PropertyWrappers</guid><title>Property Wrappers In Swift 5.1, The Missing Published Implementation</title><description>It’s been an amazing WWDC this year. SwiftUI and Combine were some big announcements of the conference. They will have a huge impact on our daily life as iOS developers.</description><link>http://blog.warpfactor.io/posts/2019-06-18-PropertyWrappers</link><pubDate>Tue, 18 Jun 2019 17:01:00 -0400</pubDate><content:encoded><![CDATA[<p>It’s been an amazing WWDC this year. <strong>SwiftUI</strong> and <strong>Combine</strong> were some big announcements of the conference. They will have a huge impact on our daily life as iOS developers.</p><ul><li><a href="https://developer.apple.com/xcode/swiftui/"><strong>SwiftUI</strong></a> is Apple’s new framework for writing user interfaces natively on all Apple platforms in a declarative and highly composable way.</li></ul><ul><li><a href="https://developer.apple.com/documentation/combine"><strong>Combine</strong></a> is Apple’s new unified declarative framework for processing values over time. This is a roundabout way of talking about reactive programming, of which RxSwift and ReactiveCocoa are the ambassadors.</li></ul><p>This article is not truly about these frameworks. It is about a feature that powers SwiftUI and makes Combine easily compliant with UIKit: <strong>property wrappers</strong>.</p><h1>Property Wrappers</h1><p>Also known as <strong>property delegates</strong>, property wrapper is not yet part of the Swift language (version 5.0.1 at the time of this writing). It will be available with Swift 5.1. If you want to dive into its philosophy, please take a look at the <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0258-property-delegates.md">Swift Evolution Proposal SE-0258</a>.</p><p>My main goal here is not to make a deep and exhaustive review of the theory and implementation behind <strong>property wrappers</strong>, but to expose a concrete use case. A case presented during the WWDC in the talk “<a href="https://developer.apple.com/videos/play/wwdc2019/721">Combine in practice</a>” involved @Published as a way to transform a traditional Swift property into a Combine <strong>Publisher</strong>. Although Apple introduced this property wrapper in the talk, it is not yet available in the first beta of Swift 5.1. This is the reason why I think it’s interesting to imagine the way Apple could have implemented it.</p><p>Before implementing @Published, we will see how property wrappers can be put to use.</p><h1>What is a property wrapper?</h1><p>Basically, a property wrapper is a generic data structure that encapsulates read/write access to a property while adding some extra behavior to “<em>augment</em>” its semantics.</p><p>Let’s implement a very basic (and maybe simplistic?) example: what if we want to forbid Optionals we use in our program to be nil?</p><p>We will implement a <strong>property wrapper</strong> that forces this property to a default value when it mutates to a nil value:</p><img src="http://blog.warpfactor.io/Images/2019-06-18-PropertyWrappers/1.png"/><blockquote><p>This property wrapper encapsulates the access to the property: “var value: Value?”</p></blockquote><p>The Swift compiler will generate a <strong>@ConstrainedOptional</strong> annotation (named after the <strong>ConstrainedOptional</strong> property wrapper struct) that will apply the specified behavior to the annotated variable whenever it’s mutated.</p><img src="http://blog.warpfactor.io/Images/2019-06-18-PropertyWrappers/2.png"/><p>We can even add extra features to the property wrapper itself:</p><img src="http://blog.warpfactor.io/Images/2019-06-18-PropertyWrappers/3.png"/><p>We can then access the property wrapper dedicated features by prefixing the variable name with “<strong>$</strong>”:</p><img src="http://blog.warpfactor.io/Images/2019-06-18-PropertyWrappers/4.png"/><p>In doing so, we can access the value of the counter without having to force unwrap it (there is not magic behind that of course, the force unwrapping is provided by the property wrapper).</p><h3>Using property wrapper to manage persistence</h3><p>As I mentioned earlier, the original name of property wrapper is <strong>property delegate</strong> <strong>(@propertyDelegate</strong> is still available in Xcode). This naming makes a lot of sense when it comes to inform a third party actor that a property has changed so it can execute some code.</p><p>Let’s say we want to read/write a value from/to a database each time a property is accessed/modified. A first approach could be to use a computed property like this:</p><img src="http://blog.warpfactor.io/Images/2019-06-18-PropertyWrappers/5.png"/><blockquote><p>CodableDAO is a tool that abstracts the storage of any value conforming to Codable</p></blockquote><p>What will soon be annoying is the need to write this for every property we want to persist with the CodableDAO.</p><p>Let’s encapsulate this inside a property wrapper:</p><img src="http://blog.warpfactor.io/Images/2019-06-18-PropertyWrappers/6.png"/><blockquote><p>Note that it is allowed to constrain the generic type of a property wrapper to conform to a protocol <strong>👌</strong></p></blockquote><p>We can now annotate any Codable conforming property with <strong>@Persisted:</strong></p><img src="http://blog.warpfactor.io/Images/2019-06-18-PropertyWrappers/7.png"/><p>When mutated, the “<strong>user</strong>” and “<strong>country</strong>” properties will be persisted under the hood. The <strong>@Persisted</strong> property wrapper handles all the storage work for us 👍.</p><h4>Leveraging property wrapper to ease protocol conformance</h4><p>As we saw, property wrappers can be used to add additional behaviors or to change the underlying storage of a property.</p><p>We can bend it to fulfill another goal: make a type “<em>almost</em>” conform to a protocol without having to make use of an extension.</p><p>Swift 5.1 introduced “<strong>Identifiable</strong>”. It’s a protocol used in SwiftUI to uniquely identify rows in a List component. The only requirement for this protocol is to provide an “<strong>id</strong>” property.</p><p>Let’s make String conform to this protocol in a traditional approach:</p><img src="http://blog.warpfactor.io/Images/2019-06-18-PropertyWrappers/8.png"/><p>Unfortunately, as extensions cannot have stored properties, the <strong>id</strong> value will be computed every time we access it.</p><img src="http://blog.warpfactor.io/Images/2019-06-18-PropertyWrappers/9.png"/><p>Two different ids for the very same value 😩. This is not the expected behavior for an Identifiable data.</p><p>Let a propery wrapper endorse the responsibility to be <strong><em>Identifiable</em></strong>:</p><img src="http://blog.warpfactor.io/Images/2019-06-18-PropertyWrappers/10.png"/><blockquote><p>Note the Identifiable conformance of UUIDIdentified</p></blockquote><p>As “<strong>id</strong>” is a constant in the property wrapper, it does not change over time.</p><img src="http://blog.warpfactor.io/Images/2019-06-18-PropertyWrappers/11.png"/><p>Again, this is not necessarily what property wrappers are made for. They are made to act as a delegate for read/write access on a wrapped value, but I want to share this technique to get feedback from the community and to show that a property wrapper can itself conform to a protocol if needed.</p><h1>Implementing @Published</h1><p>We now have a solid understanding about property wrappers to make a reasonable guess about Apple’s implementation of <strong>@Published</strong>.</p><p>If you are not familiar with the concept of Publisher introduced with Combine, it is similar to what an Observable is in RxSwift for instance.</p><p>As stated in the talk <a href="https://developer.apple.com/videos/play/wwdc2019/721">Combine in practice</a>, annotating a property with @Published allows us to transform this property into a stream of its successive values. Basically, it will be used to make UIKit outlets compliant with Combine streams.</p><p>In the following ViewController, we listen for UITextField updates. For each one of these, we set the value of a String property named “username” annotated with @Published.</p><p>The @Published property wrapper makes <strong>$username</strong> be a Publisher that we can subscribe to.</p><img src="http://blog.warpfactor.io/Images/2019-06-18-PropertyWrappers/12.png"/><p>Here is my implementation of the @Published property wrapper. Every time the value is set, we also feed a Combine <strong>PassthroughSubject</strong> that can then be listened as a Publisher.</p><img src="http://blog.warpfactor.io/Images/2019-06-18-PropertyWrappers/13.png"/><blockquote><p><strong>Note there is a possible (and shorter) implementation with a CurrentValueSubject depending on the wish to always retrieve the current value when subscribing to it.</strong></p></blockquote><p>Since Publisher is a protocol, we can make the wrapper conform to it by forwarding the “<strong>receive</strong>” function to the inner PassthroughSubject.</p><img src="http://blog.warpfactor.io/Images/2019-06-18-PropertyWrappers/14.png"/><p>That’s it. Any property annotated with @Published can also be seen as a Combine Publisher 👍.</p><h1>Conclusion</h1><p>Property wrappers are very powerful and can help reduce a great amount of boilerplate code. That’s a strength, but unfortunately also a danger.</p><p>Overusing it like this:</p><img src="http://blog.warpfactor.io/Images/2019-06-18-PropertyWrappers/15.png"/><p>could lead to the inability to understand the meaning of a program, the logic being spread in all the wrappers.</p><p>It reminds me of the kind of drawbacks a paradigm like <a href="https://en.wikipedia.org/wiki/Aspect-oriented_programming">Aspect Oriented Programming</a> can have. Somehow, property wrappers can be seen as <a href="https://en.wikipedia.org/wiki/Aspect_%28computer_programming%29">Aspects</a> in our code flow.</p><p>Time will tell us how to regulate their usage. Perhaps property wrappers should be restricted to Apple frameworks and Important third party APIs 🧐.</p><p>Like custom operators, it can be a killer tool, but it can also blur the lines so much that you or your colleagues cannot understand your code anymore.</p><p>I look forward to how this will evolve in the next beta releases of Swift 5.1.</p><p>Stay tuned.</p>]]></content:encoded></item><item><guid isPermaLink="true">http://blog.warpfactor.io/posts/2018-06-25-RxReduce-Part2</guid><title>RxReduce: Reactive State Container Architecture Part 2</title><description>As we saw in “RxReduce: A Reactive State Container Architecture Part 1”, State is a central concern in applications. I strongly invite you to take a look at this first article. So far, we haven’t introduced the concept of Reactive Programming and how it can address some issues I’ve encountered in traditional implementations of State Containers. We will see how RxReduce, an open source framework of the RxSwiftCommunity, can help you handle the State, its mutations, and the asynchronous work related to the side effects, in a Reactive way.</description><link>http://blog.warpfactor.io/posts/2018-06-25-RxReduce-Part2</link><pubDate>Mon, 25 Jun 2018 17:01:00 -0400</pubDate><content:encoded><![CDATA[<p>As we saw in <a href="http://blog.warpfactor.io/posts/2018-06-24-RxReduce-Part1">RxReduce: A Reactive State Container Architecture Part 1</a>, <strong>State</strong> is a central concern in applications. I strongly invite you to take a look at this first article. So far, we haven't introduced the concept of Reactive Programming and how it can address some issues I've encountered in traditional implementations of <strong>State Containers</strong>. We will see how <a href="https://github.com/RxSwiftCommunity/RxReduce">RxReduce</a>, an open source framework of the RxSwiftCommunity, can help you handle the <strong>State</strong>, its mutations, and the asynchronous work related to the side effects, in a Reactive way.</p><h1>The concerns</h1><ul><li>Store uses the Observer pattern: One of the responsibilities of the <strong>Store</strong> is to propagate the <strong>State</strong> mutations to the rest of the application. To do so, it is common to use an <strong>Observer</strong> pattern, so that observers will be notified of new <strong>State</strong> values. In a traditional approach, observers will register/unregister themselves to the <strong>Store</strong> which implies a lot of boilerplate code to deal with that.</li><li>Side effects: In <a href="http://blog.warpfactor.io/posts/2018-06-24-RxReduce-Part1">part 1</a> we saw that side effects (mostly asynchronous work) could not be handled by the <strong>Store/Reducers</strong>. It is a requisite for <strong>State</strong> reproducibility and testability. But as we all know, side effects are very usual and somehow mandatory in every applications. Using an architecture that only says "eh, you should do the side effects outside the state mutations" can be a little frustrating and annihilate the will to implement it.</li></ul><h1>RxReduce</h1><p><a href="https://github.com/RxSwiftCommunity/RxReduce">RxReduce</a> is born from my willing to test patterns like <a href="https://redux.js.org">Redux</a> in a native mobile application. I had a significant experience with MVC, MVP and MVVM, but I was curious about <strong>State</strong> management.&nbsp;</p><p><strong>State</strong> is obviously something I already had to deal with in more traditional architectures. I ended up, having low level layers, such as "<strong>services</strong>" layers, exposing my <strong>Model</strong> via RxSwift Observables. It was a good start, but Model is not truly a state and it was spread all across my services: not ideal to guarantee a global consistency.</p><p>I had to go further in my understanding of <strong>State</strong> management but with the aim to address the previous concerns about the Observer pattern and the side effects.&nbsp;</p><p><a href="https://github.com/RxSwiftCommunity/RxReduce"><strong>RxReduce</strong></a>:</p><ul><li>provides a generic <strong>Store</strong> that can handle all kinds of <strong>States.</strong></li><li>exposes <strong>State</strong> mutations through a Reactive mechanism.</li><li>provides a simple/unified way to mutate the <strong>State</strong> synchronously and asynchronously via <strong>Actions.</strong></li></ul><p>In the rest of this article, I assume you are familiar with the basics of Reactive Programming in general, and RxSwift in particular. If you are not, there are plenty of great ressources on the web 👌.</p><h2>RxReduce terminology</h2><p>You can browse the repo here:&nbsp;<a href="https://github.com/RxSwiftCommunity/RxReduce">https://github.com/RxSwiftCommunity/RxReduce</a>.</p><p><strong>RxReduce</strong> is compatible with CocoaPods and Carthage. It is a very tiny library consisting in three protocols, one class and two typealiases:</p><ul><li><strong>StoreType</strong>: a protocol describing what should be a <strong>Store</strong>. Although it is a public protocol, you shouldn't need to implement your own as RxReduce provides a default <strong>Store</strong>.</li><li><strong>State</strong>: an empty protocol used to identify a <strong>State</strong> in the <strong>Store</strong>, nothing special to implement here.</li><li><strong>Action</strong>: a protocol used to identify an <strong>Action</strong> in the dispatch function of a <strong>Store</strong>. A single function is to be implemented: "toAsync()", but RxReduce provides default implementations for that, nothing special to do here (explanations to come later in the "Conditional Conformance is magic" chapter).&nbsp;&nbsp;</li><li><strong>Store</strong>: a class representing a default <strong>Store</strong> capable of dispatching synchronous or asynchronous <strong>Actions</strong> inside <strong>Reducers</strong> and <strong>Middlewares</strong>. A <strong>Store</strong> exposes the mutated <strong>State</strong>. You can have several <strong>Stores</strong> in your app, each one taking care of a dedicated <strong>State</strong>, but you should consider dealing with a unique <strong>Store</strong> for the sake of simplicity and <strong>State</strong> tracking.</li><li><strong>Reducer</strong>: a typealias for a pure generic function taking an <strong>Action</strong>, a <strong>State</strong> and returning a new <strong>State</strong>. You will have to provide at least one <strong>Reducer</strong> in the <strong>Store</strong> initialization. Of course it is also possible to add several <strong>Reducers</strong> so you can separate responsibilities. <strong>Reducers</strong> are applied in sequence when dispatching an <strong>Action</strong> to the <strong>Store</strong>.</li><li><strong>Middleware</strong>: a typealias for a pure generic function taking an <strong>Action</strong>, a <strong>State</strong> and returning … nothing. Basically you can see it as a <strong>Reducer</strong> having no mutation powers. It will be called before <strong>Reducers</strong> when dispatching an <strong>Action</strong> to the <strong>Store</strong>. <strong>Middlewares</strong> are useful for logging purposes for instance.</li></ul><h2>State drives your UI</h2><blockquote><p>State is the heart of your application, by definition ! (<a href="http://blog.warpfactor.io/posts/2018-06-24-RxReduce-Part1">RxReduce: A Reactive State Container Architecture Part 1</a>)</p></blockquote><p>An application is just the reflection of a <strong>State</strong> at a given time. Regarding that, the title of this chapter is not a coincidence.</p><p>Using a <strong>RxSwift Driver</strong> is the way RxReduce exposes the <strong>State</strong> mutations to the outside world, particularly to the UI. As a reminder, a <strong>Driver</strong> is an Observable that cannot fail and only emits events on the main Thread, it makes sense for a <strong>State</strong>.</p><p>Listening to the <strong>State</strong> mutations raises some fundamental questions:</p><ul><li>what if I don't want to be notified by a <strong>State</strong> mutation that happens on a part of the <strong>State</strong> I'm not interested in ?</li><li>what if the <strong>State</strong> is replaced by a new value that is strictly equal ? Will the notification mechanism trigger unnecessary UI updates ?</li></ul><p>That deserves a little explanation 😀. Let's say our <strong>State</strong> is a <strong>struct</strong> representing:</p><ul><li>the current user of the application.</li><li>the list of the user's contacts.</li></ul><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">User</span><span class="p">:</span> <span class="nb">Equatable</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">firstName</span><span class="p">:</span> <span class="nb">String</span>
    <span class="kd">let</span> <span class="nv">lastName</span><span class="p">:</span> <span class="nb">String</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="nc">Contact</span><span class="p">:</span> <span class="nb">Equatable</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">user</span><span class="p">:</span> <span class="n">User</span>
    <span class="kd">let</span> <span class="nv">isConnected</span><span class="p">:</span> <span class="n">Boolean</span>
<span class="p">}</span>

<span class="kd">enum</span> <span class="nc">UserState</span><span class="p">:</span> <span class="nb">Equatable</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">empty</span>
    <span class="k">case</span> <span class="n">loaded</span> <span class="p">(</span><span class="n">User</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">enum</span> <span class="nc">ContactsState</span><span class="p">:</span> <span class="nb">Equatable</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">empty</span>
    <span class="k">case</span> <span class="n">loaded</span> <span class="p">([</span><span class="n">Contact</span><span class="p">])</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="nc">AppState</span><span class="p">:</span> <span class="n">State</span><span class="p">,</span> <span class="nb">Equatable</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">userState</span><span class="p">:</span> <span class="n">UserState</span>
    <span class="kd">var</span> <span class="nv">contactsState</span><span class="p">:</span> <span class="n">ContactsState</span>
<span class="p">}</span>
</div></code></pre><p>As you can see, those types are "<strong>value types</strong>", it is a requirement to guarantee <strong>State</strong> immutability and consistency. They are also "<strong>Equatable</strong>". It will allow RxReduce to know if two successives <strong>States</strong> are the same or not, avoiding unnecessary notifications. That's an answer to one of our concerns 👍.</p><p><strong>AppState</strong>&nbsp;also conforms to "<strong>State</strong>". It is a requirement to be handled by the <strong>Store</strong>.</p><p>The following "<strong>dispatch()</strong>" function belongs to the default&nbsp;<strong>Store</strong>&nbsp;provided by <strong>RxReduce</strong>:</p><pre><code><div class="highlight"><span></span><span class="kd">public</span> <span class="kd">func</span> <span class="nf">dispatch</span> <span class="p">(</span><span class="n">action</span><span class="p">:</span> <span class="n">Action</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// every received action is converted to an async action</span>
    <span class="n">action</span>
        <span class="p">.</span><span class="n">toAsync</span><span class="p">()</span>
        <span class="p">.</span><span class="bp">map</span> <span class="p">{</span> <span class="p">[</span><span class="kr">unowned</span> <span class="kc">self</span><span class="p">]</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">StateType</span><span class="p">?</span> <span class="k">in</span>
            <span class="k">return</span> <span class="kc">self</span><span class="p">.</span><span class="n">reducers</span><span class="p">.</span><span class="bp">reduce</span><span class="p">(</span><span class="kc">self</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="p">{</span> <span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">reducer</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">StateType</span><span class="p">?</span> <span class="k">in</span>
                <span class="k">return</span> <span class="n">reducer</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">action</span><span class="p">)</span>
            <span class="p">})</span>
        <span class="p">}.</span><span class="n">subscribe</span><span class="p">(</span><span class="n">onNext</span><span class="p">:</span> <span class="p">{</span> <span class="p">[</span><span class="kr">unowned</span> <span class="kc">self</span><span class="p">]</span> <span class="p">(</span><span class="n">newState</span><span class="p">)</span> <span class="k">in</span>
            <span class="kc">self</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">accept</span><span class="p">(</span><span class="n">newState</span><span class="p">)</span>
        <span class="p">}).</span><span class="n">disposed</span><span class="p">(</span><span class="n">by</span><span class="p">:</span> <span class="kc">self</span><span class="p">.</span><span class="n">disposeBag</span><span class="p">)</span>
<span class="p">}</span>
</div></code></pre><p>Each time the <strong>Store</strong> receives an <strong>Action</strong>:</p><ul><li>the <strong>Action</strong> is transformed in an asynchronous one (see the "Conditional Conformance is magic" chapter).</li><li>the list of the registered <strong>Reducers</strong> is applied to the <strong>State</strong>.</li><li>the new <strong>State</strong> replaces the old one.</li></ul><p>Let's see two examples of Actions:</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">LoadUserAction</span><span class="p">:</span> <span class="n">Action</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">firstname</span><span class="p">:</span> <span class="nb">String</span>
    <span class="kd">let</span> <span class="nv">lastname</span><span class="p">:</span> <span class="nb">String</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="nc">LoadContactsAction</span><span class="p">:</span> <span class="n">Action</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">contacts</span><span class="p">:</span> <span class="p">[</span><span class="n">Contact</span><span class="p">]</span>
<span class="p">}</span>
</div></code></pre><p>No rocket science here … <strong>Actions</strong> just embed what's needed to mutate the <strong>State</strong>, no business logic.</p><p>Here are two examples of <strong>Reducers</strong>:</p><pre><code><div class="highlight"><span></span><span class="kd">func</span> <span class="nf">userReducer</span> <span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">AppState</span><span class="p">?,</span> <span class="n">action</span><span class="p">:</span> <span class="n">Action</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">AppState</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nv">currentState</span> <span class="p">=</span> <span class="n">state</span> <span class="p">??</span> <span class="n">AppState</span><span class="p">(</span><span class="n">userState</span><span class="p">:</span> <span class="n">UserState</span><span class="p">.</span><span class="n">empty</span><span class="p">,</span>
                                         <span class="n">contactsState</span><span class="p">:</span> <span class="n">ContactsState</span><span class="p">.</span><span class="n">empty</span><span class="p">)</span>

    <span class="c1">// according to the action we create a new state</span>
    <span class="k">switch</span> <span class="n">action</span> <span class="p">{</span>
    <span class="k">case</span> <span class="kd">let</span> <span class="nv">action</span> <span class="k">as</span> <span class="n">LoadUserAction</span><span class="p">:</span>
        <span class="n">currentState</span><span class="p">.</span><span class="n">userState</span> <span class="p">=</span> <span class="n">UserState</span><span class="p">.</span><span class="n">loaded</span><span class="p">(</span><span class="n">User</span><span class="p">(</span><span class="n">firstname</span><span class="p">:</span> <span class="n">action</span><span class="p">.</span><span class="n">firstname</span><span class="p">,</span>
                                                       <span class="n">lastname</span><span class="p">:</span> <span class="n">action</span><span class="p">.</span><span class="n">lastname</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">currentState</span>
    <span class="k">default</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">currentState</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">contactsReducer</span> <span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">AppState</span><span class="p">?,</span> <span class="n">action</span><span class="p">:</span> <span class="n">Action</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">AppState</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nv">currentState</span> <span class="p">=</span> <span class="n">state</span> <span class="p">??</span> <span class="n">AppState</span><span class="p">(</span><span class="n">userState</span><span class="p">:</span> <span class="n">UserState</span><span class="p">.</span><span class="n">empty</span><span class="p">,</span>
                                         <span class="n">contactsState</span><span class="p">:</span> <span class="n">ContactsState</span><span class="p">.</span><span class="n">empty</span><span class="p">)</span>

    <span class="c1">// according to the action we create a new state</span>
    <span class="k">switch</span> <span class="n">action</span> <span class="p">{</span>
    <span class="k">case</span> <span class="kd">let</span> <span class="nv">action</span> <span class="k">as</span> <span class="n">LoadContactsAction</span><span class="p">:</span>
        <span class="n">currentState</span><span class="p">.</span><span class="n">contactsState</span> <span class="p">=</span> <span class="n">ContactsState</span><span class="p">.</span><span class="n">loaded</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">contacts</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">currentState</span>
    <span class="k">default</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">currentState</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Each <strong>Reducer</strong> handles the <strong>Actions</strong> it cares about. It allows to split the <strong>State</strong> mutations into logical units.</p><h2>Need to focus on your state ? Use Lenses !</h2><p><strong>Lenses</strong> is a technic from the functional programming that will address the remaining issue: "<strong>what if I don't want to be notified by a State mutation that happens on a part I'm not interested in ?</strong>"</p><p>A few resources about <strong>Lenses</strong>:</p><ul><li><a href="http://chris.eidhof.nl/post/lenses-in-swift/">Lenses in Swift by Chris Eidhof</a>.</li><li><a href="https://broomburgo.github.io/fun-ios/post/lenses-and-prisms-in-swift-a-pragmatic-approach/">Lenses and Prisms in Swift by Elviro Rocca</a>.</li></ul><p>In a few words, Lenses allow you to focus on a sub-part of a value type. Being a functional programming technic, it uses a function to do so. Let's try this on our model:</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">Lens</span><span class="p">&lt;</span><span class="n">A</span><span class="p">,</span><span class="n">B</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">from</span> <span class="p">:</span> <span class="n">A</span> <span class="p">-&gt;</span> <span class="n">B</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nv">firstname</span> <span class="p">=</span> <span class="n">Lens</span><span class="p">&lt;</span><span class="n">Contact</span><span class="p">,</span> <span class="nb">String</span><span class="p">&gt;(</span><span class="n">from</span><span class="p">:</span> <span class="p">{</span> <span class="nv">$0</span><span class="p">.</span><span class="n">user</span><span class="p">.</span><span class="n">firstname</span> <span class="p">})</span>

<span class="p">...</span>

<span class="kd">let</span> <span class="nv">myContact</span> <span class="p">=</span> <span class="n">Contact</span><span class="p">(</span><span class="n">user</span><span class="p">:</span> <span class="n">User</span><span class="p">(</span><span class="n">firstname</span><span class="p">:</span> <span class="s">&quot;James&quot;</span><span class="p">,</span> <span class="n">lastname</span><span class="p">:</span> <span class="s">&quot;Kirk&quot;</span><span class="p">),</span>
                        <span class="n">isConnected</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>

<span class="n">firstname</span><span class="p">.</span><span class="n">from</span><span class="p">(</span><span class="n">myContact</span><span class="p">)</span> <span class="c1">// will return &quot;James&quot;</span>
</div></code></pre><p>RxReduce uses the very same technic to expose a <strong>State</strong> in a <strong>Store</strong>. You just have to call the "<strong>state()</strong>" function with the closure that focuses on the sub-State you want to listen to:</p><pre><code><div class="highlight"><span></span><span class="kd">func</span> <span class="nf">state</span><span class="p">&lt;</span><span class="n">SubState</span><span class="p">:</span> <span class="nb">Equatable</span><span class="p">&gt;(</span><span class="n">from</span><span class="p">:</span> <span class="p">(</span><span class="n">StateType</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">SubState</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Driver</span><span class="p">&lt;</span><span class="n">SubState</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kc">self</span><span class="p">.</span><span class="n">stateSubject</span>
        <span class="p">.</span><span class="n">asDriver</span><span class="p">()</span>
        <span class="p">.</span><span class="bp">map</span> <span class="p">{</span> <span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">SubStateType</span> <span class="k">in</span>
            <span class="k">return</span> <span class="n">from</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
        <span class="p">}.</span><span class="n">distinctUntilChanged</span><span class="p">()</span>
<span class="p">}</span>
</div></code></pre><p>This function addresses our two issues:</p><ul><li>it does not trigger a new event if two consecutives <strong>States</strong> are equal (thanks to "<strong>distinctUntilChanged()</strong>").</li><li>it allows to not listen to the whole <strong>State</strong>.</li></ul><p>Of course, you noticed the <strong>State</strong> is exposed via a <strong>Driver</strong> 😀👌 (remember: <strong>State drives your UI</strong>).</p><p>For the record, <strong>RxReduce</strong> also provides an implementation of this function without parameters, you will get a <strong>Driver</strong> for the whole <strong>State</strong>.</p><p>A typical workflow with RxReduce would look like that:</p><pre><code><div class="highlight"><span></span><span class="c1">// init the Store with the list of the Reducers to apply</span>
<span class="kd">let</span> <span class="nv">store</span> <span class="p">=</span> <span class="n">Store</span><span class="p">&lt;</span><span class="n">AppState</span><span class="p">&gt;(</span><span class="n">withReducers</span><span class="p">:</span> <span class="p">[</span><span class="n">userReducer</span><span class="p">,</span> <span class="n">contactsReducer</span><span class="p">])</span>

<span class="p">...</span>

<span class="c1">// listen for the UserState mutations</span>
<span class="kd">let</span> <span class="nv">userState</span><span class="p">:</span> <span class="n">Driver</span><span class="p">&lt;</span><span class="n">UserState</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">store</span><span class="p">.</span><span class="n">state</span> <span class="p">{</span> <span class="p">(</span><span class="n">appState</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">UserState</span> <span class="k">in</span>
    <span class="k">return</span> <span class="n">appState</span><span class="p">.</span><span class="n">userState</span>
<span class="p">}</span>

<span class="p">...</span>

<span class="c1">// react to the UserState mutations</span>
<span class="n">userState</span><span class="p">.</span><span class="n">drive</span><span class="p">(</span><span class="n">onNext</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="n">userState</span><span class="p">)</span> <span class="k">in</span>
    <span class="bp">print</span> <span class="p">(</span><span class="s">&quot;New userState is </span><span class="si">\(</span><span class="n">userState</span><span class="si">)</span><span class="s">&quot;</span><span class="p">)</span>
    <span class="c1">// update the UI in a Thread safe way</span>
    <span class="p">...</span>
<span class="p">}).</span><span class="n">disposed</span><span class="p">(</span><span class="n">by</span><span class="p">:</span> <span class="kc">self</span><span class="p">.</span><span class="n">disposeBag</span><span class="p">)</span>

<span class="p">...</span>

<span class="c1">// ask the Store to mutate the State</span>
<span class="n">store</span><span class="p">.</span><span class="n">dispatch</span><span class="p">(</span><span class="n">action</span><span class="p">:</span> <span class="n">LoadUserAction</span><span class="p">(</span><span class="n">firstname</span><span class="p">:</span> <span class="s">&quot;Tony&quot;</span><span class="p">,</span> <span class="n">lastname</span><span class="p">:</span> <span class="s">&quot;Stark&quot;</span><span class="p">))</span>
</div></code></pre><h2>Conditional Conformance is magic</h2><p>There is one concern left to address … side effects.</p><p>In functional programming, side effects are all the things that can mutate a <strong>State</strong> using I/O. It can be networking, persistence, file access, … Having side effects, a function can be unpredictable depending on the state of the system. When a function has no side effect, we can execute it anytime, it will always return the same result, given the same input.</p><p>In unidirectional data flow architectures, we will try to isolate side effects out of the golden path: <strong>View -&gt; Action -&gt; Store -&gt; Reducer -&gt; State -&gt; View</strong>.</p><p>Redux has a solution for that: <strong>Action Creators</strong>. It is something that will emit an <strong>Action</strong> and dispatch it to the <strong>Store</strong> once an asynchronous job is finished.</p><p>Hum, it looks familiar to me … wouldn't be exactly what an Observable&lt;<strong>Action</strong>&gt; is in RxSwift ? Does it mean that the <strong>Store</strong>'s "<strong>dispatch()</strong>" function should not take an <strong>Action</strong> as a parameter but an Observable&lt;<strong>Action</strong>&gt; ?</p><p>Well … yes and no ! In fact it can take both, because sometimes we want synchronous mutation and sometimes asynchronous mutation.</p><p>He who can most can least. A synchronous job is just an asynchronous job that ends at job start 👍. RxReduce provides a way to convert a synchronous action to an asynchronous one:</p><pre><code><div class="highlight"><span></span><span class="kd">public</span> <span class="kd">protocol</span> <span class="nc">Action</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">toAsync</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="n">Action</span><span class="p">&gt;</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="nc">Action</span> <span class="p">{</span>
    <span class="kd">public</span> <span class="kd">func</span> <span class="nf">toAsync</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="n">Action</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="n">Action</span><span class="p">&gt;.</span><span class="n">just</span><span class="p">(</span><span class="kc">self</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Very easy. If you remember the implementation of the "<strong>dispatch()</strong>" function, the first thing it does is calling "<strong>action.toAsync()</strong>" … now you have the explanation.</p><p>It's great but that's only one part of the solution, it allows the <strong>Store</strong> to dispatch synchronous actions as they were asynchronous. What about truly asynchronous actions ?</p><p>Lately, Swift 4.1 has introduced conditional conformance. If you are not familiar with this concept: <a href="http://blog.warpfactor.io/posts/2018-04-02-GlanceAtConditionalConformance">A Glance at conditional conformance</a>.</p><p>Basically it allows to make a generic type conform to a protocol only if the associated inner type also conforms to this protocol. Let's apply this to Observable:</p><pre><code><div class="highlight"><span></span><span class="kd">extension</span> <span class="nc">Observable</span><span class="p">:</span> <span class="n">Action</span> <span class="k">where</span> <span class="n">Element</span> <span class="p">==</span> <span class="n">Action</span> <span class="p">{</span>
    <span class="kd">public</span> <span class="kd">func</span> <span class="nf">toAsync</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="n">Action</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">self</span><span class="p">.</span><span class="bp">map</span> <span class="p">{</span> <span class="nv">$0</span> <span class="k">as</span> <span class="n">Action</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>It means that an Observable&lt;<strong>Action</strong>&gt; is also in <strong>Action</strong>, only if the Element is itself an <strong>Action</strong>. Pretty neat.</p><p>The Store will dispatch an <strong>Action</strong> whether it is synchronous or asynchronous … seamlessly.</p><p>In fact, loading a User would look like that:</p><pre><code><div class="highlight"><span></span><span class="kd">let</span> <span class="nv">loadUserAction</span><span class="p">:</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="n">Action</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">UserApi</span><span class="p">.</span><span class="n">fetchUser</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">).</span><span class="bp">map</span> <span class="p">{</span> <span class="n">user</span> <span class="k">in</span>
    <span class="k">return</span> <span class="n">LoadUserAction</span><span class="p">(</span><span class="n">user</span><span class="p">:</span> <span class="n">user</span><span class="p">)</span>
<span class="p">}</span>

<span class="n">store</span><span class="p">.</span><span class="n">dispatch</span><span class="p">(</span><span class="n">action</span><span class="p">:</span> <span class="n">loadUserAction</span><span class="p">)</span>
</div></code></pre><p>Conditional Conformance is a very powerful feature, and no need for Action Creators at all 😀.</p><h2>Demo application</h2><p>You will find a complete <a href="https://github.com/RxSwiftCommunity/RxReduce/tree/master/RxReduceDemo">Demo application</a> in the RxReduce repo. It uses a combination of MVVM and State Container.</p><h2>Conclusion</h2><p>I think <strong>State Container Architectures</strong> are a great contribution to the mobile software engineering. It forces to ask yourself what should be the <strong>State</strong> of your application, how to mutate it, how to isolate the I/Os. It is a truly good complement to traditional patterns that are only view oriented.</p><p>RxReduce leverages functional reactive programming to address issues that could repel you otherwise.</p><p>If you'd like to know more about RxReduce, feel free to visit the <a href="https://github.com/RxSwiftCommunity/RxReduce">GitHub repo</a> and contribute 👍.</p><p>I hope you enjoyed this topic.</p><p>Stay tuned.</p>]]></content:encoded></item><item><guid isPermaLink="true">http://blog.warpfactor.io/posts/2018-06-24-RxReduce-Part1</guid><title>RxReduce: Reactive State Container Architecture Part 1</title><description>State management has become a very popular concern lately in mobile applications. The idea of a state that should be the single source of truth within an application is quite attractive ! The views would only be a displayable artefact of this state 👌.</description><link>http://blog.warpfactor.io/posts/2018-06-24-RxReduce-Part1</link><pubDate>Sun, 24 Jun 2018 17:01:00 -0400</pubDate><content:encoded><![CDATA[<p>State management has become a very popular concern lately in mobile applications. The idea of a state that should be the single source of truth within an application is quite attractive ! The views would only be a displayable artefact of this state 👌.</p><p>But as you all know, with great powers comes great responsibility … and a bunch of questions 😀 :</p><ul><li>What the hell is a state ?</li><li>How do I build my application around a state ?</li><li>Is there a pattern or an architecture that ease the state management ?</li><li>How do I leverage Swift's type safety and value types in order to elegantly manage state mutation ?</li></ul><p>That's a lot to cover, but let's not be afraid because this is pretty straightforward in the end.</p><p>This is a two parts article. In the first part I will try to guide you through the wonderful land of State and State immutability. <a href="http://blog.warpfactor.io/posts/2018-06-25-RxReduce-Part2">In the second part</a>, I will introduce RxReduce, a framework I've opensourced that implement a <strong>Reactive State Container Architecture</strong>.</p><h1>What is a State ?</h1><p>State is a notion that we find in a lot of domains: classical mechanics, quantum mechanics, thermodynamics, physics, politics, computer science, software engineering…</p><p>A few definitions from Wikipedia:</p><blockquote><p>For thermodynamics, a state of a system is its condition at a specific time, that is fully identified by values of a suitable set of parameters known as state variables, state parameters or thermodynamic variables.</p></blockquote><blockquote><p><em>In information technology and computer science, a program is described as stateful if it is designed to remember preceding events or user interactions; the remembered information is called the state of the system.</em></p></blockquote><blockquote><p>In physics, a state of matter is one of the distinct forms in which matter can exist. Four states of matter are observable in everyday life: solid, liquid, gas, and plasma.</p></blockquote><p>No matter the field of knowledge, a state is defined by :</p><ul><li>some intrinsic properties &nbsp;(shape, color, weight, …)</li><li>the values of those properties at a give time</li><li>the condition of its existence and the rules that drive its mutation</li></ul><p>If we refer to computer science, we all learned how a state machine works. I find its definition pretty great and it brings some very good insights about what's coming next in this post:</p><blockquote><p>It is an abstract machine that can be in exactly one of a finite number of states at any given time. The state machine can change from one state to another in response to some external inputs. The change from one state to another is called a transition. An state machine is defined by a list of its states, its initial state, and the conditions for each transition.</p></blockquote><p>Guess what ? An application is a state machine:</p><ul><li>a state for an application is the agregat of: its screens layouts, the navigation between those screens, the data it displays, the sounds it can emit, …</li><li>it has a finite number of possible states&nbsp;</li><li>it can only be in one state at a time depending on user inputs, runtime environment, physical device, external data, …</li><li>according to external inputs (user, network, …), an application will go from a state to another (navigation between screens, view update, …): these are state transitions.</li></ul><p><strong>State is the heart of your application, by definition !</strong></p><p>If <strong>State</strong>&nbsp;is correctly handled, you are on a good path to have a safe, bug free application.</p><h1>State Container Architectures</h1><p>Mastering the notion of state is only the first half of the way 😀. The challenge is to handle it well. This is where "<strong>State Container Architectures</strong>" come into play.</p><p>State Container Architectures are not a brand new idea, they all rely on well known concepts such as value types, immutability, functional programming and unidirectional data flow. <strong>Redux</strong> is a famous implementation of this kind of architecture.</p><p>Before going further, I strongly encourage you to read these 2 great articles about state container and unidirectional data flow architectures:</p><ul><li><a href="https://jobandtalent.engineering/ios-architecture-an-state-container-based-approach-4f1a9b00b82e">iOS Architecture: A State Container based approach</a></li><li><a href="https://academy.realm.io/posts/benji-encz-unidirectional-data-flow-swift/">Unidirectional Data Flow: Shrinking Massive View Controllers</a></li></ul><h2>A picture worth a thousand words</h2><p>The only purpose of a <strong>State Container Architecture</strong> is to provide a safe way to mutate and expose the state within your application. Here is the flow of such a pattern:</p><img src="http://blog.warpfactor.io/Images/2018-06-24-RxReduce-Part1/rxreducescheme.gif"/><p>The first thing to notice here is the unidirectional aspect of the flow: you can imagine a loop of events coming from and going back to the view and producing a new version of the state at each iteration. This is our state transitions from the previous state machine definition.&nbsp;</p><h2>A glance at each concept of this pattern</h2><ul><li>The&nbsp;<strong>Store</strong>&nbsp;is the component that handles your <strong>State</strong>. It has only one input: a "<strong>dispatch()</strong>" function, that takes an&nbsp;<strong>Action</strong>&nbsp;as a parameter.</li><li>The <strong>State</strong> must be immutable by definition. The only way to trigger a&nbsp;<strong>State</strong>&nbsp;mutation is to call the <strong>Store</strong>'s "<strong>dispatch()</strong>" function with an <strong>Action</strong>, it will create a new <strong>State</strong>.</li><li><strong>Actions</strong>&nbsp;are simple types with no business logic (structs for instance). They embed the payload needed to mutate the <strong>State</strong> (ids, search strings, …).&nbsp;</li><li>Only pure and testable functions called&nbsp;<strong>Reducers</strong> can mutate a&nbsp;<strong>State</strong>. A "<strong>reduce()</strong>" function takes a&nbsp;<strong>State</strong>, an&nbsp;<strong>Action</strong>&nbsp;and returns the new&nbsp;<strong>State</strong>&nbsp;… that simple (this is the <strong>State</strong> transition).</li><li>You can have as many <strong>Reducers</strong> as you want, they will be applied by the&nbsp;<strong>Store</strong>'s "<strong>dispatch()</strong>" function sequentially. It could be nice to have a <strong>R</strong><strong>educer</strong> per business concern for instance.</li><li><strong>Reducers</strong>&nbsp;cannot perform asynchronous logic, they can only mutate the <strong>State</strong> in a synchronous and testable way. Asynchronous work, being side effects, will be taken care of by other mechanisms (we will see that in the second part of this article).</li><li>The <strong>Store</strong> exposes some kind of <strong>State</strong> observable so that your views can be notified each time a new <strong>State</strong> is calculated.</li></ul><h1>Why is this a nice pattern ?</h1><p>As we saw earlier: "<strong>State is the heart of your application, by definition !"</strong>. Having a reproductible, safe, state centric pattern brings some nice garanties:</p><ul><li>No uncontrolled propagation for the <strong>State</strong> modifications. As it is a value type, each mutation creates a new copy of the <strong>State</strong>. It is not a shared reference type which mutations could lead to inconsistency all across the application.</li><li><strong>State</strong> mutation is very strictly framed by <strong>Actions</strong> dispatching. This provides a very safe environment to onboard new players in your development team.&nbsp;</li><li>Race conditions are avoided thanks to <strong>State</strong> being a value type and asynchronous works being very segregated.</li><li>Application global <strong>State</strong> is extremely reproducible. It is an undeniable benefit of <strong>State</strong> being centralized within a <strong>Store</strong>. We can serialize it, save it on the filesystem and replay it at will. The application will be restored in a similar configuration each time.</li><li>Not only <strong>State</strong> mutations are reproducible but also very testable because they are induced by pure functions free from side effects. All we have to test is <strong>Reducers</strong>' outputs consistency given a stable input.</li></ul><p>I find this approach very interesting compared to the more traditional patterns, because it takes care of the consistency of your application state. MVC, MVP, MVVM or VIPER help you slice your application into well defined layers but they don't guide you so much when it comes to handle the state of your app.</p><p>That's it for the first part of this topic. We've learned a lot about the basics of State Container Architectures. <a href="http://blog.warpfactor.io/posts/2018-06-25-RxReduce-Part2">In part 2</a>, we will dive in a Reactive implementation called RxReduce that will help you handle the state, its mutations and the asynchronous work related to the side effects.</p><p>Stay tuned.</p>]]></content:encoded></item><item><guid isPermaLink="true">http://blog.warpfactor.io/posts/2018-04-28-TypeSafeNetworkLayer</guid><title>Type safe network layer</title><description>There are plenty of posts about doing a network layer in a type safe way with Swift. No matter the used network API, those approaches all rely on returning a data type that is precisely what we expect. In this post we will try to go a little bit further by strongly coupling the endpoint we want to fetch and the data type we are expecting.</description><link>http://blog.warpfactor.io/posts/2018-04-28-TypeSafeNetworkLayer</link><pubDate>Sat, 28 Apr 2018 17:01:00 -0400</pubDate><content:encoded><![CDATA[<h1>A quick reminder</h1><p>Let's say we want to fetch one of the "<strong>dog.ceo</strong>" endpoints. It usually begins with defining the routes. Enums are great for that:</p><pre><code><div class="highlight"><span></span><span class="kd">enum</span> <span class="nc">Routes</span><span class="p">:</span> <span class="nb">String</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">allBreeds</span> <span class="p">=</span> <span class="s">&quot;breeds/list/all&quot;</span>
    <span class="k">case</span> <span class="n">beagles</span> <span class="p">=</span> <span class="s">&quot;beagle/images&quot;</span>
<span class="p">}</span>
</div></code></pre><p>As the purpose of the post is not to implement a fully functional network layer, we won't consider the different kinds of HTTP methods or Headers / Parameters customization here. A "String Enum" is a satisfying solution in our case.</p><p>We then define a model that fits with the ".<strong>allBreeds</strong>" endpoint JSON response. Of course we will use <strong>Codable</strong> to ease its deserialization.</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">Breeds</span><span class="p">:</span> <span class="n">Codable</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">status</span><span class="p">:</span> <span class="nb">String</span>
    <span class="kd">let</span> <span class="nv">message</span><span class="p">:</span> <span class="p">[</span><span class="nb">String</span><span class="p">:</span> <span class="p">[</span><span class="nb">String</span><span class="p">]]</span>
<span class="p">}</span>
</div></code></pre><p>Here is the model that represents the "<strong>.beagles</strong>" endpoint:</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">Beagles</span><span class="p">:</span> <span class="n">Codable</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">status</span><span class="p">:</span> <span class="nb">String</span>
    <span class="kd">let</span> <span class="nv">message</span><span class="p">:</span> <span class="p">[</span><span class="nb">String</span><span class="p">]</span>
<span class="p">}</span>
</div></code></pre><p>We can also define a "<strong>Result</strong>" type that will wrap the data returned by the endpoint. As this can fail, the "<strong>Result</strong>" type will be an enum that can be either a success or a failure:</p><pre><code><div class="highlight"><span></span><span class="kd">enum</span> <span class="nc">Result</span><span class="p">&lt;</span><span class="n">Model</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">success</span><span class="p">(</span><span class="n">Model</span><span class="p">)</span>
    <span class="k">case</span> <span class="n">failure</span><span class="p">(</span><span class="n">Error</span><span class="p">)</span>
<span class="p">}</span>
</div></code></pre><p>We can now dive into the fetching mechanism itself. For the sake of simplicity, we will use Alamofire to fetch the request, but a simple UrlSession would also do the job.</p><pre><code><div class="highlight"><span></span><span class="kr">final</span> <span class="kd">class</span> <span class="nc">NetworkService</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">baseURL</span><span class="p">:</span> <span class="nb">String</span>

    <span class="kd">init</span><span class="p">(</span><span class="n">withBaseURL</span> <span class="n">baseURL</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">baseURL</span> <span class="p">=</span> <span class="n">baseURL</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">fetch</span><span class="p">&lt;</span><span class="n">Model</span><span class="p">:</span> <span class="n">Codable</span><span class="p">&gt;</span> <span class="p">(</span><span class="n">fromRoute</span> <span class="n">route</span><span class="p">:</span> <span class="n">Routes</span><span class="p">,</span>
                                <span class="n">then</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="p">(</span><span class="n">Result</span><span class="p">&lt;</span><span class="n">Model</span><span class="p">&gt;)</span> <span class="p">-&gt;</span> <span class="nb">Void</span><span class="p">)</span> <span class="p">{</span>

        <span class="c1">// make sure the endpoint path is a valid URL</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">url</span> <span class="p">=</span> <span class="n">URL</span><span class="p">(</span><span class="n">string</span><span class="p">:</span> <span class="kc">self</span><span class="p">.</span><span class="n">baseURL</span><span class="o">+</span><span class="n">route</span><span class="p">.</span><span class="n">rawValue</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">then</span><span class="p">(.</span><span class="n">failure</span><span class="p">(</span><span class="bp">NSError</span><span class="p">(</span><span class="n">domain</span><span class="p">:</span> <span class="s">&quot;warpfactor.io&quot;</span><span class="p">,</span> <span class="n">code</span><span class="p">:</span> <span class="mi">500</span><span class="p">)))</span>
            <span class="k">return</span>
        <span class="p">}</span>

        <span class="n">Alamofire</span>
            <span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
            <span class="p">.</span><span class="n">responseData</span> <span class="p">{</span> <span class="p">(</span><span class="n">response</span><span class="p">)</span> <span class="k">in</span>
                <span class="k">guard</span> <span class="n">response</span><span class="p">.</span><span class="n">error</span> <span class="p">==</span> <span class="kc">nil</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="n">then</span><span class="p">(.</span><span class="n">failure</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">error</span><span class="p">!))</span>
                    <span class="k">return</span>
                <span class="p">}</span>

                <span class="k">if</span>  <span class="kd">let</span> <span class="nv">data</span> <span class="p">=</span> <span class="n">response</span><span class="p">.</span><span class="n">data</span><span class="p">,</span>
                    <span class="kd">let</span> <span class="nv">model</span> <span class="p">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">JSONDecoder</span><span class="p">().</span><span class="n">decode</span><span class="p">(</span><span class="n">Model</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">from</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">then</span><span class="p">(.</span><span class="n">success</span><span class="p">(</span><span class="n">model</span><span class="p">))</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="n">then</span><span class="p">(.</span><span class="n">failure</span><span class="p">(</span><span class="bp">NSError</span><span class="p">(</span>  <span class="n">domain</span><span class="p">:</span> <span class="s">&quot;warpfactor.io&quot;</span><span class="p">,</span>
                                            <span class="n">code</span><span class="p">:</span> <span class="mi">1000</span><span class="p">,</span>
                                            <span class="n">userInfo</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;error&quot;</span><span class="p">:</span><span class="s">&quot;wrong model&quot;</span><span class="p">])))</span>
                <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>The type safety is assured by the combination of 2 Swift features:</p><ul><li>generic function: the "<strong>fetch&lt;Model: Codable&gt;</strong>" syntax let the compiler know that in the "<strong>Result&lt;Model&gt;</strong>" statement, the "<strong>Model</strong>" will be a subtype of "<strong>Codable</strong>". It assures us that once the model is unwrapped from the "<strong>Result.success</strong>" value it will be of the type we want.&nbsp;</li><li>type inference: the "<strong>fetch&lt;Model: Codable&gt;</strong>" syntax also allows to be able to instantiate the "<strong>Model</strong>" as we know it has a "<strong>Codable</strong>" initializer for sure. This is what makes this statement "<strong>let model = try? JSONDecoder().decode(Model.self, from: data)</strong>" possible.</li></ul><p>The usage of such a network layer is pretty easy and straight forward:</p><pre><code><div class="highlight"><span></span><span class="kd">let</span> <span class="nv">networkService</span> <span class="p">=</span> <span class="n">NetworkService</span><span class="p">(</span><span class="n">withBaseURL</span><span class="p">:</span> <span class="s">&quot;https://dog.ceo/api/&quot;</span><span class="p">)</span>

<span class="n">networkService</span><span class="p">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">fromRoute</span><span class="p">:</span> <span class="n">Routes</span><span class="p">.</span><span class="n">allBreeds</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">result</span><span class="p">:</span> <span class="n">Result</span><span class="p">&lt;</span><span class="n">Breeds</span><span class="p">&gt;)</span> <span class="k">in</span>
    <span class="k">switch</span> <span class="n">result</span> <span class="p">{</span>
    <span class="k">case</span> <span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="kd">let</span> <span class="nv">model</span><span class="p">):</span>
        <span class="bp">print</span> <span class="p">(</span><span class="n">model</span><span class="p">)</span>
    <span class="k">case</span> <span class="p">.</span><span class="n">failure</span><span class="p">(</span><span class="kd">let</span> <span class="nv">error</span><span class="p">):</span>
        <span class="bp">print</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>We can clearly see the type inference in action as we explicitly tell the compiler that we expect a "<strong>Model</strong>" to be a "<strong>Breeds</strong>" in the closure parameter.</p><p>What we achieved here is indeed type safe, in the meaning that if the request succeeds on the "<strong>.allBreeds</strong>" endpoint, we will be given a "<strong>Breeds</strong>" typed response for sure.</p><p>What happens if, while still fetching the "<strong>.allBreeds</strong>" endpoint, we modify the result type to be a "<strong>Result&lt;Beagles&gt;</strong>" ?&nbsp;</p><h1>Not that safe !</h1><p>From the compiler perspective: nothing happens. It is perfectly OK, because "<strong>Beagles</strong>" respects the only condition the fetch function requires: to be a Codable.</p><p>It means that there is no correlation between the endpoint and its result !</p><p>The following code will compile, but will crash at runtime:&nbsp;</p><pre><code><div class="highlight"><span></span><span class="n">networkService</span><span class="p">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">fromRoute</span><span class="p">:</span> <span class="n">Routes</span><span class="p">.</span><span class="n">allBreeds</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">result</span><span class="p">:</span> <span class="n">Result</span><span class="p">&lt;</span><span class="n">Beagles</span><span class="p">&gt;)</span> <span class="k">in</span>
    <span class="k">switch</span> <span class="n">result</span> <span class="p">{</span>
    <span class="k">case</span> <span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="kd">let</span> <span class="nv">model</span><span class="p">):</span>
        <span class="bp">print</span> <span class="p">(</span><span class="n">model</span><span class="p">)</span>
    <span class="k">case</span> <span class="p">.</span><span class="n">failure</span><span class="p">(</span><span class="kd">let</span> <span class="nv">error</span><span class="p">):</span>
        <span class="bp">print</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Swift is a language that promotes a "compile time" safety, so there has to be a way to ensure the consistency between the endpoints and their return types.</p><h1>Make it safer for your team</h1><p>Introducing a lack of type safety in your application is an open gate for errors and bugs that your teammates will surely introduce, not by their fault but by yours. As an application architect or an API designer you have to provide a safe pattern for your team.</p><p>Lets improve the situation in a few steps.</p><h2>Step 1: Generic endpoints</h2><p>The source of our issue is the lack of coupling between the endpoint and the model it is supposed to return. It is easy to address with a generic struct:</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">Route</span><span class="p">&lt;</span><span class="n">Model</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">endpoint</span><span class="p">:</span> <span class="nb">String</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="nc">Routes</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">let</span> <span class="nv">allBreeds</span> <span class="p">=</span> <span class="n">Route</span><span class="p">&lt;</span><span class="n">Breeds</span><span class="p">&gt;(</span><span class="n">endpoint</span><span class="p">:</span> <span class="s">&quot;breeds/list/all&quot;</span><span class="p">)</span>
    <span class="kd">static</span> <span class="kd">let</span> <span class="nv">beagles</span> <span class="p">=</span> <span class="n">Route</span><span class="p">&lt;</span><span class="n">Beagles</span><span class="p">&gt;(</span><span class="n">endpoint</span><span class="p">:</span> <span class="s">&quot;breed/beagle/images&quot;</span><span class="p">)</span>
<span class="p">}</span>
</div></code></pre><p>Routes are not enums anymore, they are structs that are typed by a Model. It means that when I want to declare a new Route, I also have to be precise on the type of model it will return. We have our coupling !</p><h2>Step 2: Adapt the network layer</h2><p>We have to slightly modify the fetch function because the generic type is no more attached to the model directly but to the model of the <strong>Route</strong>.</p><p>so we're going from:</p><pre><code><div class="highlight"><span></span><span class="kd">func</span> <span class="nf">fetch</span><span class="p">&lt;</span><span class="n">Model</span><span class="p">:</span> <span class="n">Codable</span><span class="p">&gt;</span> <span class="p">(</span><span class="n">fromRoute</span> <span class="n">route</span><span class="p">:</span> <span class="n">Routes</span><span class="p">,</span>
                            <span class="n">then</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="p">(</span><span class="n">Result</span><span class="p">&lt;</span><span class="n">Model</span><span class="p">&gt;)</span> <span class="p">-&gt;</span> <span class="nb">Void</span><span class="p">)</span> <span class="p">{</span>
</div></code></pre><p>to</p><pre><code><div class="highlight"><span></span><span class="kd">func</span> <span class="nf">fetch</span><span class="p">&lt;</span><span class="n">Model</span><span class="p">:</span> <span class="n">Codable</span><span class="p">&gt;</span> <span class="p">(</span><span class="n">fromRoute</span> <span class="n">route</span><span class="p">:</span> <span class="n">Route</span><span class="p">&lt;</span><span class="n">Model</span><span class="p">&gt;,</span>
                            <span class="n">then</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="p">(</span><span class="n">Result</span><span class="p">&lt;</span><span class="n">Model</span><span class="p">&gt;)</span> <span class="p">-&gt;</span> <span class="nb">Void</span><span class="p">)</span> <span class="p">{</span>
</div></code></pre><h2>Step 3: Just use it</h2><p>By just coupling the endpoint with the model, the Swift compiler knows what it should give you back in the closure parameter. As we can see here, there is no more a need to explicitly specify the type of "<strong>result</strong>", it will be for sure "<strong>Breeds</strong>", because the endpoint "<strong>.allBreeds</strong>" is related to that type by definition.</p><pre><code><div class="highlight"><span></span><span class="n">networkService</span><span class="p">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">fromRoute</span><span class="p">:</span> <span class="n">Routes</span><span class="p">.</span><span class="n">allBreeds</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="k">in</span>
    <span class="k">switch</span> <span class="n">result</span> <span class="p">{</span>
    <span class="k">case</span> <span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="kd">let</span> <span class="nv">model</span><span class="p">):</span>
        <span class="bp">print</span> <span class="p">(</span><span class="n">model</span><span class="p">)</span>
    <span class="k">case</span> <span class="p">.</span><span class="n">failure</span><span class="p">(</span><span class="kd">let</span> <span class="nv">error</span><span class="p">):</span>
        <span class="bp">print</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>As a proof, we can display the information about the unwrapped "model" from the result, the compiler knows it is a "<strong>Breeds</strong>" 👍</p><img src="http://blog.warpfactor.io/Images/2018-04-28-TypeSafeNetworkLayer/network1.png"/><p>​​​​​​</p><p>Let's try to misuse the mechanism: while still using the same endpoint we try to explicitly tell the compiler that the result is a "<strong>Result&lt;Beagles&gt;</strong>".</p><img src="http://blog.warpfactor.io/Images/2018-04-28-TypeSafeNetworkLayer/network2.png"/><p>As expected, it fails 👌. We truly have a compile time type safe network layer 😏, with minor changes to our API. Very cool.</p><p>Thanks for reading !</p><p>Stay tuned.</p>]]></content:encoded></item><item><guid isPermaLink="true">http://blog.warpfactor.io/posts/2018-04-02-GlanceAtConditionalConformance</guid><title>A glance at conditional conformance</title><description>Swift 4.1 is available since a few days now and it comes with an interesting feature: Conditional conformance. This is a new tool for achieving Protocol Oriented Programming as well as API designing. This post is a quick take on this brand new technic and will be followed for sure by deep dive posts in a few weeks.</description><link>http://blog.warpfactor.io/posts/2018-04-02-GlanceAtConditionalConformance</link><pubDate>Mon, 2 Apr 2018 17:01:00 -0400</pubDate><content:encoded><![CDATA[<p>Swift 4.1 is available since a few days now and it comes with an interesting feature: <strong>Conditional conformance</strong>. This is a new tool for achieving Protocol Oriented Programming as well as API designing. This post is a quick take on this brand new technic and will be followed for sure by deep dive posts in a few weeks.</p><h1>It's all about extensions</h1><p>With Swift, one can be a little bit confused with all the different ways of implementing extensions. As the language matures, new extensions possibilities come up and developers have to choose the good one 🤨.</p><h2>Basic extensions</h2><p>Basically an extension allows to augment the behavior of a type without having to subclass it:</p><pre><code><div class="highlight"><span></span><span class="kd">extension</span> <span class="nc">String</span> <span class="p">{</span>
    <span class="kd">public</span> <span class="kd">func</span> <span class="nf">numberOf</span> <span class="p">(</span><span class="n">letter</span><span class="p">:</span> <span class="nb">Character</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">self</span><span class="p">.</span><span class="bp">filter</span> <span class="p">{</span> <span class="nv">$0</span> <span class="p">==</span> <span class="n">letter</span> <span class="p">}.</span><span class="bp">count</span>
    <span class="p">}</span>

    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">build</span> <span class="p">(</span><span class="n">withNumberOfSpaces</span> <span class="n">spaces</span><span class="p">:</span> <span class="nb">Int</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">[</span><span class="nb">Int</span><span class="p">](</span><span class="mf">1.</span><span class="p">..</span><span class="n">spaces</span><span class="p">).</span><span class="bp">reduce</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="p">(</span><span class="n">previous</span><span class="p">,</span> <span class="kc">_</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">String</span> <span class="k">in</span>
            <span class="k">return</span> <span class="n">previous</span> <span class="o">+</span> <span class="s">&quot; &quot;</span>
        <span class="p">})</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nv">blog</span> <span class="p">=</span> <span class="s">&quot;twittemb.github.io&quot;</span>
<span class="kd">let</span> <span class="nv">emptySpaces</span> <span class="p">=</span> <span class="nb">String</span><span class="p">.</span><span class="n">build</span><span class="p">(</span><span class="n">withNumberOfSpaces</span><span class="p">:</span> <span class="mi">10</span><span class="p">)</span>

<span class="bp">print</span> <span class="p">(</span><span class="s">&quot;Number of t in </span><span class="si">\(</span><span class="n">blog</span><span class="si">)</span><span class="s">: </span><span class="si">\(</span><span class="n">blog</span><span class="p">.</span><span class="n">numberOf</span><span class="si">(</span><span class="n">letter</span><span class="p">:</span> <span class="s">&quot;t&quot;</span><span class="si">))</span><span class="s">&quot;&quot;)</span>
<span class="s">/// will print: Number of t in twittemb.github.io: 4</span>

<span class="s">print (&quot;</span><span class="nb">String</span> <span class="n">from</span> <span class="n">factory</span><span class="p">:</span> <span class="o">|</span><span class="err">\</span><span class="p">(</span><span class="n">emptySpaces</span><span class="p">)</span><span class="o">|</span><span class="s">&quot;)</span>
<span class="s">/// will print: String from factory: |          |</span>
</div></code></pre><p>It is useful to make utility functions or to implement an efficient factory pattern.</p><h2>Conditional extensions</h2><p>There is a refinement to basic extension dedicated to generic types:</p><pre><code><div class="highlight"><span></span><span class="kd">extension</span> <span class="nc">Array</span> <span class="k">where</span> <span class="n">Element</span><span class="p">:</span> <span class="n">Numeric</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">sum</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Element</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">self</span><span class="p">.</span><span class="bp">reduce</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">+</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nv">numerics</span> <span class="p">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mf">5.5</span><span class="p">]</span>
<span class="bp">print</span> <span class="p">(</span><span class="s">&quot;Sum of elements in </span><span class="si">\(</span><span class="n">numerics</span><span class="si">)</span><span class="s">: </span><span class="si">\(</span><span class="n">numerics</span><span class="p">.</span><span class="n">sum</span><span class="si">())</span><span class="s">&quot;</span><span class="p">)</span>

<span class="c1">/// will print: Sum of elements in [1.0, 2.0, 3.0, 4.0, 5.5]: 15.5</span>
</div></code></pre><p>It would probably not make sense to apply a sum() function to an Array of Bool for instance. This kind of extension allows the developer to bring new features to an existing type but make them safe to use at the same time. It is something very useful when you're designing an API that is to be used by other developers. They can benefit some code for "free" once and only once they meet the good requirements.</p><h2>Conformance extensions</h2><p>Not only can extensions add behaviors to existing types but also can they amend a type itself to make it conform to a Protocol.</p><pre><code><div class="highlight"><span></span><span class="kd">protocol</span> <span class="nc">Resettable</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">reset</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="kc">Self</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="nc">String</span><span class="p">:</span> <span class="n">Resettable</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">reset</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="nb">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">&quot;&quot;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="nc">Int</span><span class="p">:</span> <span class="n">Resettable</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">reset</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="nb">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">0</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="nc">Optional</span><span class="p">:</span> <span class="n">Resettable</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">reset</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="nb">Optional</span><span class="p">&lt;</span><span class="n">Wrapped</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">nil</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nv">name</span> <span class="p">=</span> <span class="s">&quot;Spock&quot;</span>
<span class="kd">let</span> <span class="nv">age</span> <span class="p">=</span> <span class="mi">120</span>
<span class="kd">let</span> <span class="nv">isVulcan</span><span class="p">:</span> <span class="nb">Bool</span><span class="p">?</span> <span class="p">=</span> <span class="kc">true</span>

<span class="kd">let</span> <span class="nv">resettables</span><span class="p">:</span> <span class="p">[</span><span class="n">Resettable</span><span class="p">]</span> <span class="p">=</span> <span class="p">[</span><span class="s">&quot;Spock&quot;</span><span class="p">,</span> <span class="mi">120</span> <span class="p">,</span> <span class="n">isVulcan</span><span class="p">]</span>
<span class="bp">print</span> <span class="p">(</span><span class="s">&quot;Array before reset: </span><span class="si">\(</span><span class="n">resettables</span><span class="si">)</span><span class="s">&quot;</span><span class="p">)</span>
<span class="c1">/// will print: Array before reset: [&quot;Spock&quot;, 120, Optional(true)]</span>

<span class="kd">let</span> <span class="nv">reset</span> <span class="p">=</span> <span class="n">resettables</span><span class="p">.</span><span class="bp">map</span> <span class="p">{</span> <span class="nv">$0</span><span class="p">.</span><span class="n">reset</span><span class="p">()</span> <span class="p">}</span>
<span class="bp">print</span> <span class="p">(</span><span class="s">&quot;Array after reset: </span><span class="si">\(</span><span class="n">reset</span><span class="si">)</span><span class="s">&quot;</span><span class="p">)</span>
<span class="c1">/// will print: Array after reset: [&quot;&quot;, 0, nil]</span>
</div></code></pre><p>This brings uniformity where there was heterogeneity. It would have been impossible to mix <strong>Strings</strong>, <strong>Ints</strong> and <strong>Optionals</strong> into an <strong>Array</strong> without having them conformed to the same Protocol.</p><p>But, although every element of the Array is a "<strong>Resettable</strong>", we still have to parse it (with <strong>map</strong>) and call "<strong>reset()</strong>" on each of these to achieve a global operation.</p><p>Conditional conformace will help a lot in making this operation seamless for the developer who wants to reset the whole Array.</p><h2>Protocol extensions</h2><p>So far we haven't spoken about Protocol Oriented Programming. This paradigm comes with the ability to add a default behavior to a Protocol. Types that conform to this protocol will benefit this default behavior as well (or override it). It is a special type of extension and it is not really the point of this blog post. So, let's not introduce to much noise here and focus on the ability to extend a concrete type.</p><h1>Conform only if …</h1><p><strong>Conditional conformance</strong> is the brand new feature that comes with Swift 4.1. It is a mix between <strong>conditional extension</strong> and <strong>conformance extension</strong>. Being so, it inherits both of their key principles:</p><ul><li>bring new features but make them safe to use at the same time</li><li>bring uniformity where there was heterogeneity</li></ul><p>In fact one of the main idea behind that is: if a behavior can be applied to each element of a superset, then we can consider that this behavior can also be applied to the superset itself :</p><pre><code><div class="highlight"><span></span><span class="kd">extension</span> <span class="nc">Array</span><span class="p">:</span> <span class="n">Resettable</span> <span class="k">where</span> <span class="n">Element</span> <span class="p">==</span> <span class="n">Resettable</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">reset</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="nb">Array</span><span class="p">&lt;</span><span class="n">Element</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">self</span><span class="p">.</span><span class="bp">map</span> <span class="p">{</span> <span class="nv">$0</span><span class="p">.</span><span class="n">reset</span><span class="p">()</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nv">innerResettableArray</span><span class="p">:</span> <span class="p">[</span><span class="n">Resettable</span><span class="p">]</span> <span class="p">=</span> <span class="p">[</span><span class="s">&quot;Spock&quot;</span><span class="p">,</span> <span class="mi">120</span><span class="p">]</span>
<span class="kd">let</span> <span class="nv">resettableArray</span><span class="p">:</span> <span class="p">[</span><span class="n">Resettable</span><span class="p">]</span> <span class="p">=</span> <span class="p">[</span><span class="s">&quot;Kirk&quot;</span><span class="p">,</span>
                                      <span class="mi">45</span><span class="p">,</span>
                                      <span class="nb">Optional</span><span class="p">&lt;</span><span class="nb">Bool</span><span class="p">&gt;(</span><span class="kc">true</span><span class="p">),</span>
                                      <span class="n">innerResettableArray</span><span class="p">]</span>

<span class="bp">print</span> <span class="p">(</span><span class="s">&quot;Array before reset: </span><span class="si">\(</span><span class="n">resettableArray</span><span class="si">)</span><span class="s">&quot;</span><span class="p">)</span>
<span class="c1">/// will print: Array before reset: [&quot;Kirk&quot;, 45, Optional(true), [&quot;Spock&quot;, 120]]</span>

<span class="bp">print</span> <span class="p">(</span><span class="s">&quot;Array after reset: </span><span class="si">\(</span><span class="n">resettableArray</span><span class="p">.</span><span class="n">reset</span><span class="si">())</span><span class="s">&quot;</span><span class="p">)</span>
<span class="c1">/// will print: Array after reset: [&quot;&quot;, 0, nil, [&quot;&quot;, 0]]</span>
</div></code></pre><p>As every element of the Array is <strong>Resettable</strong>, so is the whole Array. It is exactly what Apple has done with Equatable and Hashable for instance. With Swift 4.1, an Array of Elements that are Equatables, is Equatable itself.</p><p>What's great and very powerful in our example is that we can embed an Array of Resettables inside the root Array, and with only one statement "<strong>resettableArray.reset()</strong>", the whole data structure is being reset. It is a very elegant way to deal with <strong>recursivity</strong>.</p><p>As we can see, in terms of API designing we have a great benefit in using "<strong>Conditional conformance</strong>" over basic "<strong>Conformance extension</strong>". The API designer will internalize in its framework the code (here the <strong>reset()</strong> function) he thinks smart to offer for free to the developers who match the appropriate requirements.</p><h2>Leverage conditional conformance to ease Design Patterns implementation</h2><p>There are certain kinds of design patterns that can benefit from the ability that comes with conditional conformance to make a behavior apply to a "container" type. Again, this is mostly seen from an API designer perspective.</p><p><strong>Visitor</strong> is a pretty simple Design Pattern that allows to externalize the parsing of a data structure. If you want a detailed explanation: <a href="https://en.wikipedia.org/wiki/Visitor_pattern">Visitor Pattern</a>.</p><p>Here, we will implement <strong>Persons</strong> and <strong>Cars,</strong>&nbsp;data structures that are "<strong>Visitables</strong>". With conditional conformance, <strong>Containers</strong> of "<strong>Visitables</strong>" will be "<strong>Visitable</strong>" as well:</p><pre><code><div class="highlight"><span></span><span class="kd">protocol</span> <span class="nc">Visitor</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">visit</span> <span class="p">(</span><span class="n">visitable</span><span class="p">:</span> <span class="n">Visitable</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">protocol</span> <span class="nc">Visitable</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">accept</span> <span class="p">(</span><span class="n">visitor</span><span class="p">:</span> <span class="n">Visitor</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">/// a Person can be visited</span>
<span class="kd">struct</span> <span class="nc">Person</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">name</span><span class="p">:</span> <span class="nb">String</span>
    <span class="kd">let</span> <span class="nv">age</span><span class="p">:</span> <span class="nb">Int</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="nc">Person</span><span class="p">:</span> <span class="n">Visitable</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">accept</span> <span class="p">(</span><span class="n">visitor</span><span class="p">:</span> <span class="n">Visitor</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="kc">self</span><span class="p">.</span><span class="n">age</span> <span class="o">&gt;</span> <span class="mi">30</span> <span class="p">{</span>
            <span class="n">visitor</span><span class="p">.</span><span class="n">visit</span><span class="p">(</span><span class="n">visitable</span><span class="p">:</span> <span class="kc">self</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// a Car can be visited</span>
<span class="kd">struct</span> <span class="nc">Car</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">isElectric</span><span class="p">:</span> <span class="nb">Bool</span>
    <span class="kd">let</span> <span class="nv">model</span><span class="p">:</span> <span class="nb">String</span>
    <span class="kd">let</span> <span class="nv">price</span><span class="p">:</span> <span class="nb">Double</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="nc">Car</span><span class="p">:</span> <span class="n">Visitable</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">accept</span> <span class="p">(</span><span class="n">visitor</span><span class="p">:</span> <span class="n">Visitor</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="kc">self</span><span class="p">.</span><span class="n">isElectric</span> <span class="p">{</span>
            <span class="n">visitor</span><span class="p">.</span><span class="n">visit</span><span class="p">(</span><span class="n">visitable</span><span class="p">:</span> <span class="kc">self</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// an Array of Visitables is also Visitable</span>
<span class="kd">extension</span> <span class="nc">Array</span><span class="p">:</span> <span class="n">Visitable</span> <span class="k">where</span> <span class="n">Element</span> <span class="p">==</span> <span class="n">Visitable</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">accept</span> <span class="p">(</span><span class="n">visitor</span><span class="p">:</span> <span class="n">Visitor</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="nv">$0</span><span class="p">.</span><span class="n">accept</span><span class="p">(</span><span class="n">visitor</span><span class="p">:</span> <span class="n">visitor</span><span class="p">)</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// an Dictionary of Visitables is also Visitable</span>
<span class="kd">extension</span> <span class="nc">Dictionary</span><span class="p">:</span> <span class="n">Visitable</span> <span class="k">where</span> <span class="n">Value</span> <span class="p">==</span> <span class="n">Visitable</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">accept</span> <span class="p">(</span><span class="n">visitor</span><span class="p">:</span> <span class="n">Visitor</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">values</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="nv">$0</span><span class="p">.</span><span class="n">accept</span><span class="p">(</span><span class="n">visitor</span><span class="p">:</span> <span class="n">visitor</span><span class="p">)</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">AnyVisitor</span><span class="p">:</span> <span class="n">Visitor</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">visit</span> <span class="p">(</span><span class="n">visitable</span><span class="p">:</span> <span class="n">Visitable</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">switch</span> <span class="n">visitable</span> <span class="p">{</span>
        <span class="k">case</span> <span class="kd">let</span> <span class="nv">person</span> <span class="k">as</span> <span class="n">Person</span><span class="p">:</span>
            <span class="bp">print</span> <span class="p">(</span><span class="s">&quot;</span><span class="si">\(</span><span class="n">person</span><span class="p">.</span><span class="n">name</span><span class="si">)</span><span class="s"> is </span><span class="si">\(</span><span class="n">person</span><span class="p">.</span><span class="n">age</span><span class="si">)</span><span class="s"> years old&quot;</span><span class="p">)</span>
        <span class="k">case</span> <span class="kd">let</span> <span class="nv">car</span> <span class="k">as</span> <span class="n">Car</span><span class="p">:</span>
            <span class="bp">print</span> <span class="p">(</span><span class="s">&quot;</span><span class="si">\(</span><span class="n">car</span><span class="p">.</span><span class="n">model</span><span class="si">)</span><span class="s">&#39;s price is </span><span class="si">\(</span><span class="n">car</span><span class="p">.</span><span class="n">price</span><span class="si">)</span><span class="s">$&quot;</span><span class="p">)</span>
        <span class="k">default</span><span class="p">:</span>
            <span class="bp">print</span> <span class="p">(</span><span class="n">visitable</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nv">ironman</span> <span class="p">=</span> <span class="n">Person</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&quot;Tony Stark&quot;</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">45</span><span class="p">)</span>
<span class="kd">let</span> <span class="nv">hulk</span> <span class="p">=</span> <span class="n">Person</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&quot;Bruce Banner&quot;</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">40</span><span class="p">)</span>
<span class="kd">let</span> <span class="nv">captain</span> <span class="p">=</span> <span class="n">Person</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&quot;Steve Rogers&quot;</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">29</span><span class="p">)</span>
<span class="kd">let</span> <span class="nv">spiderman</span> <span class="p">=</span> <span class="n">Person</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&quot;Peter Parker&quot;</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">16</span><span class="p">)</span>

<span class="kd">let</span> <span class="nv">tesla</span> <span class="p">=</span> <span class="n">Car</span><span class="p">(</span><span class="n">isElectric</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="n">model</span><span class="p">:</span> <span class="s">&quot;Roadster&quot;</span><span class="p">,</span> <span class="n">price</span><span class="p">:</span> <span class="mi">120000</span><span class="p">)</span>
<span class="kd">let</span> <span class="nv">porsche</span> <span class="p">=</span> <span class="n">Car</span><span class="p">(</span><span class="n">isElectric</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span> <span class="n">model</span><span class="p">:</span> <span class="s">&quot;911&quot;</span><span class="p">,</span> <span class="n">price</span><span class="p">:</span> <span class="mi">250000</span><span class="p">)</span>
<span class="kd">let</span> <span class="nv">ferrari</span> <span class="p">=</span> <span class="n">Car</span><span class="p">(</span><span class="n">isElectric</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span> <span class="n">model</span><span class="p">:</span> <span class="s">&quot;GTO&quot;</span><span class="p">,</span> <span class="n">price</span><span class="p">:</span> <span class="mi">1000000</span><span class="p">)</span>
<span class="kd">let</span> <span class="nv">nissan</span> <span class="p">=</span> <span class="n">Car</span><span class="p">(</span><span class="n">isElectric</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="n">model</span><span class="p">:</span> <span class="s">&quot;Leaf&quot;</span><span class="p">,</span> <span class="n">price</span><span class="p">:</span> <span class="mi">30000</span><span class="p">)</span>

<span class="kd">let</span> <span class="nv">arrayToVisit</span><span class="p">:</span> <span class="p">[</span><span class="n">Visitable</span><span class="p">]</span> <span class="p">=</span> <span class="p">[</span><span class="n">ironman</span><span class="p">,</span> <span class="n">spiderman</span><span class="p">,</span> <span class="n">tesla</span><span class="p">,</span> <span class="n">porsche</span><span class="p">]</span>
<span class="kd">let</span> <span class="nv">dictionnaryToVisit</span><span class="p">:</span> <span class="p">[</span><span class="nb">String</span><span class="p">:</span> <span class="n">Visitable</span><span class="p">]</span> <span class="p">=</span> <span class="p">[</span> <span class="s">&quot;key1&quot;</span><span class="p">:</span> <span class="n">hulk</span><span class="p">,</span>
                                                <span class="s">&quot;key2&quot;</span><span class="p">:</span> <span class="n">captain</span><span class="p">,</span>
                                                <span class="s">&quot;key3&quot;</span><span class="p">:</span> <span class="n">ferrari</span><span class="p">,</span>
                                                <span class="s">&quot;key4&quot;</span><span class="p">:</span> <span class="n">nissan</span><span class="p">,</span>
                                                <span class="s">&quot;key5&quot;</span><span class="p">:</span> <span class="n">arrayToVisit</span><span class="p">]</span>

<span class="kd">let</span> <span class="nv">anyVisitor</span> <span class="p">=</span> <span class="n">AnyVisitor</span><span class="p">()</span>
<span class="n">dictionnaryToVisit</span><span class="p">.</span><span class="n">accept</span><span class="p">(</span><span class="n">visitor</span><span class="p">:</span> <span class="n">anyVisitor</span><span class="p">)</span>

<span class="c1">/// will print:</span>
<span class="c1">/// Leaf&#39;s price is 30000.0$</span>
<span class="c1">/// Tony Stark is 45 years old</span>
<span class="c1">/// Roadster&#39;s price is 120000.0$</span>
<span class="c1">/// Bruce Banner is 40 years old</span>
</div></code></pre><p>To visit a bunch of <strong>Visitables</strong>, all you have to do is adding them to a container such as an <strong>Array</strong> or a <strong>Dictionnary</strong> and visit this one. From the Developer perspective, only the <strong>AnyVisitor</strong> has to be implemented.</p><h2>Be careful with auto-completion</h2><p>There is a small drawback in using <strong>conditional conformance</strong> with XCode. If we get back to our <strong>Resettable</strong> example, <strong>Bool</strong> is not Resettable but if we declare an <strong>Array&lt;Bool&gt;</strong>, XCode will offer the <strong>reset()</strong> function with the auto-completion.</p><p>Of course the compiler will then inform you that Bool is not a Resettable … but still, perhaps XCode could have been more restrictive ! Not that big a deal 😊 but I had to point that out.</p><p>I hope you enjoyed this first take on conditional conformance. New usages will come out for sure in the weeks to come.</p><p>Stay tuned.</p>]]></content:encoded></item><item><guid isPermaLink="true">http://blog.warpfactor.io/posts/2018-03-24-ElegantlyChainingUiviewpropertyAnimators</guid><title>Elegantly chaining UIViewPropertyAnimators</title><description>Usually my posts are mostly about design patterns, software architectures (or RxFlow 😀), but this time it will be different and frankly I didn't think I would write about this kind of topic. But I think I have something cool to share: so today we are going to talk about Animations with Swift.</description><link>http://blog.warpfactor.io/posts/2018-03-24-ElegantlyChainingUiviewpropertyAnimators</link><pubDate>Sat, 24 Mar 2018 17:01:00 -0400</pubDate><content:encoded><![CDATA[<p>Usually my posts are mostly about design patterns, software architectures (or RxFlow 😀), but this time it will be different and frankly I didn’t think I would write about this kind of topic. But I think I have something cool to share: so today we are going to talk about Animations with Swift.</p><p>I am not a UI/UX expert, so we are not going to dive into iOS animation frameworks, but lately I had a challenge to address at work. A colleague of mine came with this issue: “Guys, in our application we have some animations played in sequence and the way we do it is pretty ugly. Is there a better way ?”.</p><h1>UIView.animate()</h1><p>The ugliness he was referring to is the way we traditionally chain animations with UIKit. To illustrate my point, let’s consider this sequence:</p><img src="http://blog.warpfactor.io/Images/2018-03-24-ElegantlyChainingUiviewpropertyAnimators/animator-4.gif"/><p>Before iOS 10, one could have coded this sequence this way:</p><pre><code><div class="highlight"><span></span><span class="c1">/// on the &quot;Play animation&quot; click</span>

<span class="bp">UIView</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="n">withDuration</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="n">animations</span><span class="p">:</span> <span class="p">{</span> <span class="p">[</span><span class="kr">unowned</span> <span class="kc">self</span><span class="p">]</span> <span class="k">in</span>
    <span class="kc">self</span><span class="p">.</span><span class="n">box1</span><span class="p">.</span><span class="n">transform</span> <span class="p">=</span> <span class="bp">CGAffineTransform</span><span class="p">(</span><span class="n">translationX</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
                                            <span class="n">y</span><span class="p">:</span> <span class="o">-</span><span class="mi">100</span><span class="p">)</span>
<span class="p">})</span> <span class="p">{</span> <span class="p">(</span><span class="n">completed</span><span class="p">)</span> <span class="k">in</span>
    <span class="k">if</span> <span class="n">completed</span> <span class="p">{</span>
        <span class="bp">UIView</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="n">withDuration</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="n">animations</span><span class="p">:</span> <span class="p">{</span> <span class="p">[</span><span class="kr">unowned</span> <span class="kc">self</span><span class="p">]</span> <span class="k">in</span>
            <span class="kc">self</span><span class="p">.</span><span class="n">box2</span><span class="p">.</span><span class="n">transform</span> <span class="p">=</span> <span class="bp">CGAffineTransform</span><span class="p">(</span><span class="n">translationX</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
                                                    <span class="n">y</span><span class="p">:</span> <span class="o">-</span><span class="mi">100</span><span class="p">)</span>
        <span class="p">})</span> <span class="p">{</span> <span class="p">(</span><span class="n">completed</span><span class="p">)</span> <span class="k">in</span>
            <span class="k">if</span> <span class="n">completed</span> <span class="p">{</span>
                <span class="bp">UIView</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="n">withDuration</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="n">animations</span><span class="p">:</span> <span class="p">{</span> <span class="p">[</span><span class="kr">unowned</span> <span class="kc">self</span><span class="p">]</span> <span class="k">in</span>
                    <span class="kc">self</span><span class="p">.</span><span class="n">box3</span><span class="p">.</span><span class="n">transform</span> <span class="p">=</span> <span class="bp">CGAffineTransform</span><span class="p">(</span><span class="n">translationX</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
                                                            <span class="n">y</span><span class="p">:</span> <span class="o">-</span><span class="mi">100</span><span class="p">)</span>
                <span class="p">})</span> <span class="p">{</span> <span class="p">(</span><span class="n">completed</span><span class="p">)</span> <span class="k">in</span>
                    <span class="k">if</span> <span class="n">completed</span> <span class="p">{</span>
                        <span class="bp">UIView</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="n">withDuration</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="n">animations</span><span class="p">:</span> <span class="p">{</span> <span class="p">[</span><span class="kr">unowned</span> <span class="kc">self</span><span class="p">]</span> <span class="k">in</span>
                            <span class="kc">self</span><span class="p">.</span><span class="n">box1</span><span class="p">.</span><span class="n">transform</span> <span class="p">=</span> <span class="bp">CGAffineTransform</span><span class="p">(</span><span class="n">translationX</span><span class="p">:</span> <span class="o">-</span><span class="mi">100</span><span class="p">,</span>
                                                                    <span class="n">y</span><span class="p">:</span> <span class="o">-</span><span class="mi">100</span><span class="p">)</span>
                            <span class="kc">self</span><span class="p">.</span><span class="n">box3</span><span class="p">.</span><span class="n">transform</span> <span class="p">=</span> <span class="bp">CGAffineTransform</span><span class="p">(</span><span class="n">translationX</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
                                                                    <span class="n">y</span><span class="p">:</span> <span class="o">-</span><span class="mi">100</span><span class="p">)</span>
                        <span class="p">})</span> <span class="p">{</span> <span class="p">(</span><span class="n">completed</span><span class="p">)</span> <span class="k">in</span>
                            <span class="k">if</span> <span class="n">completed</span> <span class="p">{</span>
                                <span class="bp">print</span> <span class="p">(</span><span class="s">&quot;Animations are over&quot;</span><span class="p">)</span>
                            <span class="p">}</span>
                        <span class="p">}</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>UIView.animate() provides a completion block we can use to trigger the next animation. Doing so, we can create a chain of animations. As you can see, the main drawback of this technic is the ugliness of the code. It is barely readable.</p><h1>UIViewPropertyAnimator</h1><p>Hopefully iOS 10 has introduced <strong>UIViewPropertyAnimator</strong>. I am not going to describe all the features it offers, there is a nice introduction here: <a href="https://useyourloaf.com/blog/quick-guide-to-property-animators/">useyourloaf</a>.</p><p>What I'm concerned about is how to improve the readability of the chaining mechanism. First thing first, UIViewPropertyAnimator natively enhance the completion technic.</p><p>The previous code snippet would become:</p><pre><code><div class="highlight"><span></span><span class="c1">/// initialize UIViewPropertyAnimator lazily</span>

<span class="kr">lazy</span> <span class="kd">var</span> <span class="nv">animator1</span> <span class="p">=</span> <span class="p">{</span>
    <span class="bp">UIViewPropertyAnimator</span><span class="p">(</span><span class="n">duration</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="n">curve</span><span class="p">:</span> <span class="p">.</span><span class="n">linear</span><span class="p">)</span> <span class="p">{</span> <span class="p">[</span><span class="kr">unowned</span> <span class="kc">self</span><span class="p">]</span> <span class="k">in</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">box1</span><span class="p">.</span><span class="n">transform</span> <span class="p">=</span> <span class="bp">CGAffineTransform</span><span class="p">(</span><span class="n">translationX</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="o">-</span><span class="mi">100</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}()</span>

<span class="kr">lazy</span> <span class="kd">var</span> <span class="nv">animator2</span> <span class="p">=</span> <span class="p">{</span>
    <span class="bp">UIViewPropertyAnimator</span><span class="p">(</span><span class="n">duration</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="n">curve</span><span class="p">:</span> <span class="p">.</span><span class="n">linear</span><span class="p">)</span> <span class="p">{</span> <span class="p">[</span><span class="kr">unowned</span> <span class="kc">self</span><span class="p">]</span> <span class="k">in</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">box2</span><span class="p">.</span><span class="n">transform</span> <span class="p">=</span> <span class="bp">CGAffineTransform</span><span class="p">(</span><span class="n">translationX</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="o">-</span><span class="mi">100</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}()</span>

<span class="kr">lazy</span> <span class="kd">var</span> <span class="nv">animator3</span> <span class="p">=</span> <span class="p">{</span>
    <span class="bp">UIViewPropertyAnimator</span><span class="p">(</span><span class="n">duration</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="n">curve</span><span class="p">:</span> <span class="p">.</span><span class="n">linear</span><span class="p">)</span> <span class="p">{</span> <span class="p">[</span><span class="kr">unowned</span> <span class="kc">self</span><span class="p">]</span> <span class="k">in</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">box3</span><span class="p">.</span><span class="n">transform</span> <span class="p">=</span> <span class="bp">CGAffineTransform</span><span class="p">(</span><span class="n">translationX</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="o">-</span><span class="mi">100</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}()</span>

<span class="kr">lazy</span> <span class="kd">var</span> <span class="nv">animator4</span> <span class="p">=</span> <span class="p">{</span>
    <span class="bp">UIViewPropertyAnimator</span><span class="p">(</span><span class="n">duration</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="n">curve</span><span class="p">:</span> <span class="p">.</span><span class="n">linear</span><span class="p">)</span> <span class="p">{</span> <span class="p">[</span><span class="kr">unowned</span> <span class="kc">self</span><span class="p">]</span> <span class="k">in</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">box1</span><span class="p">.</span><span class="n">transform</span> <span class="p">=</span> <span class="bp">CGAffineTransform</span><span class="p">(</span><span class="n">translationX</span><span class="p">:</span> <span class="o">-</span><span class="mi">100</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="o">-</span><span class="mi">100</span><span class="p">)</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">box3</span><span class="p">.</span><span class="n">transform</span> <span class="p">=</span> <span class="bp">CGAffineTransform</span><span class="p">(</span><span class="n">translationX</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="o">-</span><span class="mi">100</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}()</span>

<span class="p">...</span>

<span class="c1">/// connect animations together</span>

<span class="kc">self</span><span class="p">.</span><span class="n">animator1</span><span class="p">.</span><span class="n">addCompletion</span> <span class="p">{</span> <span class="p">[</span><span class="kr">unowned</span> <span class="kc">self</span><span class="p">]</span> <span class="kc">_</span> <span class="k">in</span>
    <span class="kc">self</span><span class="p">.</span><span class="n">animator2</span><span class="p">.</span><span class="n">startAnimation</span><span class="p">()</span>
<span class="p">}</span>

<span class="kc">self</span><span class="p">.</span><span class="n">animator2</span><span class="p">.</span><span class="n">addCompletion</span> <span class="p">{</span> <span class="p">[</span><span class="kr">unowned</span> <span class="kc">self</span><span class="p">]</span> <span class="kc">_</span> <span class="k">in</span>
    <span class="kc">self</span><span class="p">.</span><span class="n">animator3</span><span class="p">.</span><span class="n">startAnimation</span><span class="p">()</span>
<span class="p">}</span>

<span class="kc">self</span><span class="p">.</span><span class="n">animator3</span><span class="p">.</span><span class="n">addCompletion</span> <span class="p">{</span> <span class="p">[</span><span class="kr">unowned</span> <span class="kc">self</span><span class="p">]</span> <span class="kc">_</span> <span class="k">in</span>
    <span class="kc">self</span><span class="p">.</span><span class="n">animator4</span><span class="p">.</span><span class="n">startAnimation</span><span class="p">()</span>
<span class="p">}</span>

<span class="p">...</span>

<span class="c1">/// on the &quot;Play animation&quot; click</span>

<span class="kc">self</span><span class="p">.</span><span class="n">animator1</span><span class="p">.</span><span class="n">startAnimation</span><span class="p">()</span>
</div></code></pre><p>It allows to clearly separate the definition of each animation from the way they are connected together.</p><p>Not only have we a far better readability but also a better decoupling. We could imagine chaining animations differently according to some context. Pretty neat.</p><p>But there is one more thing …</p><h1>Reactive animation chaining</h1><p>I am a big fan of Reactive programming and the first thing that came to my mind was: Is there a way to make <strong>UIViewPropertyAnimation</strong> RxSwift compliant ?</p><p>What do we want to be aware of in a Reactive way ? pretty easy: the end of an animation, so we can trigger the next one.</p><p>Traditionally with RxSwift, making something compliant with reactive programming consists of adding an extension to the Reactive struct. That sounds like a good start.</p><p>We have to figure out what kind of extension we need and what should be the return type of this extension ?</p><p>The extension will somehow have to wrap the "<strong>startAnimation</strong>" and "<strong>addCompletion</strong>" mechanisms of UIViewPropertyAnimator. It will have to return some kind of <strong>Observable</strong> as well. But for the sake of simplicity, we will assume that an animation can only "<strong>complete</strong>", there is no "<strong>stream</strong>" management (such as <strong>onNext</strong>, <strong>onSubscribed</strong>, <strong>onDisposed</strong> and so on). This assumption has a nice consequence on our implementation. Our Reactive extension won't return an <strong>Observable</strong> but a <strong>Completable</strong> which is a <strong>Trait</strong> that implies the Observable can only be <strong>Completed</strong> (or failed).</p><p>Without further ado, let's see this extension:</p><pre><code><div class="highlight"><span></span><span class="kd">extension</span> <span class="nc">Reactive</span> <span class="k">where</span> <span class="n">Base</span> <span class="p">==</span> <span class="bp">UIViewPropertyAnimator</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nv">animate</span><span class="p">:</span> <span class="n">Completable</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">Completable</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">subscribe</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="n">completable</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Disposable</span> <span class="k">in</span>

            <span class="kc">self</span><span class="p">.</span><span class="n">base</span><span class="p">.</span><span class="n">addCompletion</span><span class="p">({</span> <span class="p">(</span><span class="n">position</span><span class="p">)</span> <span class="k">in</span>
                <span class="k">if</span> <span class="n">position</span> <span class="p">==</span> <span class="p">.</span><span class="n">end</span> <span class="p">{</span>
                    <span class="n">completable</span><span class="p">(.</span><span class="n">completed</span><span class="p">)</span>
                <span class="p">}</span>
            <span class="p">})</span>

            <span class="kc">self</span><span class="p">.</span><span class="n">base</span><span class="p">.</span><span class="n">startAnimation</span><span class="p">()</span>

            <span class="k">return</span> <span class="n">Disposables</span><span class="p">.</span><span class="n">create</span> <span class="p">{</span>
                <span class="kc">self</span><span class="p">.</span><span class="n">base</span><span class="p">.</span><span class="n">stopAnimation</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">})</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="bp">UIViewPropertyAnimator</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">rx</span><span class="p">:</span> <span class="n">Reactive</span><span class="p">&lt;</span><span class="bp">UIViewPropertyAnimator</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">Reactive</span><span class="p">&lt;</span><span class="bp">UIViewPropertyAnimator</span><span class="p">&gt;(</span><span class="kc">self</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Basically the "<strong>animate</strong>" extension returns a <strong>Completable</strong> which, when being subscribed to, will start the animation and add a completion block that sends a "<strong>.</strong><strong>completed</strong>" event to the returned&nbsp;<strong>Completable</strong>.</p><p>The purpose is very simple: to be triggered when an animation is finished, so the next one can start.</p><p>The awesome thing with <strong>Completables</strong> is the ability to chain them with the very nice syntactic sugar expression "<strong>andThen</strong>".</p><p>Let's see that in action:</p><pre><code><div class="highlight"><span></span><span class="kc">self</span><span class="p">.</span><span class="n">animator1</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">animate</span>
    <span class="p">.</span><span class="n">andThen</span><span class="p">(</span><span class="kc">self</span><span class="p">.</span><span class="n">animator2</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">animate</span><span class="p">)</span>
    <span class="p">.</span><span class="n">andThen</span><span class="p">(</span><span class="kc">self</span><span class="p">.</span><span class="n">animator3</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">animate</span><span class="p">)</span>
    <span class="p">.</span><span class="n">andThen</span><span class="p">(</span><span class="kc">self</span><span class="p">.</span><span class="n">animator4</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">animate</span><span class="p">)</span>
    <span class="p">.</span><span class="n">subscribe</span><span class="p">()</span>
    <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="n">by</span><span class="p">:</span> <span class="kc">self</span><span class="p">.</span><span class="n">disposeBag</span><span class="p">)</span>
</div></code></pre><p>It is very easy to read and is self explanatory. The animation sequence can even vary depending on some context, and the code structure is still very clear:</p><pre><code><div class="highlight"><span></span><span class="kd">var</span> <span class="nv">completable</span> <span class="p">=</span> <span class="kc">self</span><span class="p">.</span><span class="n">animator1</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">animate</span>

<span class="k">if</span> <span class="n">shouldAnimateBox2</span> <span class="p">{</span>
    <span class="n">completable</span> <span class="p">=</span> <span class="n">completable</span><span class="p">.</span><span class="n">andThen</span><span class="p">(</span><span class="kc">self</span><span class="p">.</span><span class="n">animator2</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">animate</span><span class="p">)</span>
<span class="p">}</span>

<span class="n">completable</span><span class="p">.</span><span class="n">andThen</span><span class="p">(</span><span class="kc">self</span><span class="p">.</span><span class="n">animator3</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">animate</span><span class="p">)</span>
    <span class="p">.</span><span class="n">andThen</span><span class="p">(</span><span class="kc">self</span><span class="p">.</span><span class="n">animator4</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">animate</span><span class="p">)</span>
    <span class="p">.</span><span class="n">subscribe</span><span class="p">()</span>
    <span class="p">.</span><span class="n">disposed</span><span class="p">(</span><span class="n">by</span><span class="p">:</span> <span class="kc">self</span><span class="p">.</span><span class="n">disposeBag</span><span class="p">)</span>
</div></code></pre><p>But wait, there is one <strong>last</strong> thing …</p><h1>Magic animation chaining</h1><p>Although reactive chaining is quite satisfying, not everyone wants to rely on RxSwift to improve their code awesomeness !</p><p>Swift has a really cool feature to shorten complex statements while magnifying their expressivity: <strong>custom operators</strong>.</p><p>It takes some creativity to figure out the right way of doing this. So I asked myself what would be the most appropriate syntax for other developers to understand my code just by having a glance at it. I ended up with something like that :</p><pre><code><div class="highlight"><span></span><span class="n">animation1</span> <span class="o">~&gt;</span> <span class="n">animation2</span> <span class="o">~&gt;</span> <span class="n">animation3</span> <span class="o">~&gt;</span> <span class="n">animation4</span>
</div></code></pre><p>&nbsp;Could it be simpler ?</p><p>Let's do this:</p><pre><code><div class="highlight"><span></span><span class="kr">infix</span> <span class="kd">operator</span> <span class="o">~&gt;</span><span class="p">:</span> <span class="n">AdditionPrecedence</span>

<span class="p">@</span><span class="n">discardableResult</span>
<span class="kd">func</span> <span class="o">~&gt;</span><span class="p">(</span><span class="kr">left</span><span class="p">:</span> <span class="bp">UIViewPropertyAnimator</span><span class="p">,</span> <span class="kr">right</span><span class="p">:</span> <span class="bp">UIViewPropertyAnimator</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="bp">UIViewPropertyAnimator</span><span class="p">{</span>

    <span class="kr">left</span><span class="p">.</span><span class="n">addCompletion</span> <span class="p">{</span> <span class="p">(</span><span class="kc">_</span><span class="p">)</span> <span class="k">in</span>
        <span class="kr">right</span><span class="p">.</span><span class="n">startAnimation</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="kr">right</span>
<span class="p">}</span>
</div></code></pre><p>What have we done here ?</p><ul><li>define a new binary operator: <strong>~&gt;</strong></li><li>define what is the behavior of this operator when applied to two UIViewPropertyAnimators</li></ul><p>This is just a way to connect two UIViewPropertyAnimators together and to hook the start of the second one to the end of the first one.</p><p>Using this new syntax couldn't be easier:</p><pre><code><div class="highlight"><span></span><span class="kc">self</span><span class="p">.</span><span class="n">animator1</span> <span class="o">~&gt;</span> <span class="kc">self</span><span class="p">.</span><span class="n">animator2</span> <span class="o">~&gt;</span> <span class="kc">self</span><span class="p">.</span><span class="n">animator3</span> <span class="o">~&gt;</span> <span class="kc">self</span><span class="p">.</span><span class="n">animator4</span>
<span class="kc">self</span><span class="p">.</span><span class="n">animator1</span><span class="p">.</span><span class="n">startAnimation</span><span class="p">()</span>
</div></code></pre><p>I am always amazed by the effectiveness Swift can bring to our coding flow. I used to be a Java guy, and believe me, having such a concise syntax is a relief.</p><p>I hope it will give you new ideas to go even further into chaining animations with Swift.</p><p>Stay tuned.</p>]]></content:encoded></item><item><guid isPermaLink="true">http://blog.warpfactor.io/posts/2018-01-02-ProtocolOrientedTipsMvvm</guid><title>Protocol Oriented Tips For MVVM in Swift</title><description>Hi folks. Lately MVVM has become some sort of standard as an architecture for iOS apps. It offers a good separation of concerns, a good way to format data and great view binding mechanisms with frameworks such as RxSwift. In this post I will give few tips I use to ease the implementation of this pattern.</description><link>http://blog.warpfactor.io/posts/2018-01-02-ProtocolOrientedTipsMvvm</link><pubDate>Tue, 2 Jan 2018 17:01:00 -0500</pubDate><content:encoded><![CDATA[<p>Hi folks. Lately MVVM has become some sort of standard as an architecture for iOS apps. It offers a good separation of concerns, a good way to format data and great view binding mechanisms with frameworks such as RxSwift. In this post I will give few tips I use to ease the implementation of this pattern.</p><h1>Views made easy with Reusable</h1><p>With MVVM, separation between Views and the rest of your architecture is very clear. Views include UIViewControllers and their outlets. As a matter of fact, instantiating Views becomes more and more important, especially since patterns such as Coordinator gain in popularity. We will assume in the rest of this article that you are implementing this kind of architecture.</p><p>Reusable is an API that comes with handy extensions to UIViews and UIViewControllers that ease their instantiation in a type safe manner.</p><p>Here is the GitHub repo: <a href="https://github.com/AliSoftware/Reusable">Reusable</a>. It is a lightweight API compatible with Carthage, CocoaPods and SPM. It would be a shame not to use it regarding the happiness it brings 🖖.</p><p>Basically, Reusable provides mixins (Protocols with default implementation) that will add instantiation functions to UIViews and UIViewControllers, as soon as you make them conform to the appropriate protocol.</p><p>While using Coordinator pattern, at some point you will want to instantiate UIViewControllers and pass them ViewModels. Lucky you, because Reusable helps a lot in doing that.</p><p>Here are the things you have to do to use Reusable for UIViewControllers instantiation:</p><ul><li>Create a Storyboard file per UIViewController (of course it is possible to have several UIViewControllers in the same storyboard, but for the sake of the simplicity we will consider only one UIViewController)</li><li>Set the UIViewController as the initial ViewController in the scene</li><li>Create a UIViewController file in which the ViewController class name is the same as the Storyboard file name. For instance if the Storyboard file is named “SettingsViewController.storyboard”, then the UIViewController class will be named “SettingsViewController”</li><li>Make the UIViewController implement the Protocol “StoryboardBased”</li></ul><p>And that’s it. You can now instantiate the ViewController with a single line of code:</p><pre><code><div class="highlight"><span></span><span class="kd">let</span> <span class="nv">settingsViewController</span> <span class="p">=</span> <span class="n">SettingsViewController</span><span class="p">.</span><span class="n">instantiate</span><span class="p">()</span>
</div></code></pre><p>What is cool about that is that settingsViewController’s type is SettingsViewController without the need for a cast statement.</p><p>In fact the StoryboardBased protocol is pretty straight forward. Let’s dive into it:</p><pre><code><div class="highlight"><span></span><span class="kd">public</span> <span class="kd">protocol</span> <span class="nc">StoryboardBased</span><span class="p">:</span> <span class="kd">class</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="kd">var</span> <span class="nv">storyboard</span><span class="p">:</span> <span class="bp">UIStoryboard</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">public</span> <span class="kd">extension</span> <span class="nc">StoryboardBased</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="kd">var</span> <span class="nv">storyboard</span><span class="p">:</span> <span class="bp">UIStoryboard</span> <span class="p">{</span>
    <span class="k">return</span> <span class="bp">UIStoryboard</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">(</span><span class="n">describing</span><span class="p">:</span> <span class="kc">self</span><span class="p">),</span> <span class="n">bundle</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">(</span><span class="k">for</span><span class="p">:</span> <span class="kc">self</span><span class="p">))</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">public</span> <span class="kd">extension</span> <span class="nc">StoryboardBased</span> <span class="k">where</span> <span class="kc">Self</span><span class="p">:</span> <span class="bp">UIViewController</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="kd">func</span> <span class="nf">instantiate</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="kc">Self</span> <span class="p">{</span>
    <span class="k">guard</span> <span class="kd">let</span> <span class="nv">vc</span> <span class="p">=</span> <span class="n">storyboard</span><span class="p">.</span><span class="n">instantiateInitialViewController</span><span class="p">()</span> <span class="k">as</span><span class="p">?</span> <span class="kc">Self</span> <span class="k">else</span> <span class="p">{</span>
      <span class="bp">fatalError</span><span class="p">(</span><span class="s">&quot;The VC of </span><span class="se">\\</span><span class="s">(sceneStoryboard) is not of class </span><span class="se">\\</span><span class="s">(self)&quot;</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">vc</span>
  <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Basically, what it does is providing a static “instantiate” function to each UIViewController that implements the Protocol. This function returns an instance of the UIViewController. As “Self” is the return type of the function, type inference assures we won’t have to cast the result.</p><p>I strongly encourage you to take a deep look at Reusable. It will be also helpful when it comes to instantiate UIViews from Xib or dequeue UITableViewCells in a type safe way.</p><h1>Protocol oriented ViewModels</h1><p>Coordinator-like architectures are common in nowadays applications, especially when being combined to a MVVM pattern. That is why I wished to talk about Reusable in the first place.</p><p>But there is a trick that I find very useful and complementary to Reusable. It fits very well with the MVVM pattern in a Protocol Oriented approach.</p><p>The idea is not only to ease the instantiation of UIViewControllers but also to provide a nice way to pass them their associated ViewModels. Let’s write a Protocol that defines what it is to have a ViewModel.</p><pre><code><div class="highlight"><span></span><span class="kd">protocol</span> <span class="nc">ViewModelBased</span><span class="p">:</span> <span class="kd">class</span> <span class="p">{</span>
    <span class="n">associatedtype</span> <span class="n">ViewModel</span>
    <span class="kd">var</span> <span class="nv">viewModel</span><span class="p">:</span> <span class="n">ViewModel</span> <span class="p">{</span> <span class="kr">get</span> <span class="kr">set</span> <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>We can now mix it with StoryboardBased and provide a static function that instantiates a UIViewController with a ViewModel as a parameter.</p><pre><code><div class="highlight"><span></span><span class="kd">extension</span> <span class="nc">ViewModelBased</span> <span class="k">where</span> <span class="kc">Self</span><span class="p">:</span> <span class="n">StoryboardBased</span> <span class="o">&amp;</span> <span class="bp">UIViewController</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">instantiate</span> <span class="p">(</span><span class="n">with</span> <span class="n">viewModel</span><span class="p">:</span> <span class="n">ViewModel</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="kc">Self</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">viewController</span> <span class="p">=</span> <span class="kc">Self</span><span class="p">.</span><span class="n">instantiate</span><span class="p">()</span>
        <span class="n">viewController</span><span class="p">.</span><span class="n">viewModel</span> <span class="p">=</span> <span class="n">viewModel</span>
        <span class="k">return</span> <span class="n">viewController</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Conditional extension is a very powerful tool. The “where” statement that combines “StoryboardBased” and “UIViewController” makes the Self.instantiate function available, so we just have to wrap this call in another static function that sets the UIViewController.viewModel property</p><p>Let’s say we have a MyViewController that conforms to the ViewModelBased protocol:</p><pre><code><div class="highlight"><span></span><span class="kd">class</span> <span class="nc">MyViewController</span><span class="p">:</span> <span class="bp">UIViewController</span><span class="p">,</span> <span class="n">StoryboardBased</span><span class="p">,</span> <span class="n">ViewModelBased</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">viewModel</span><span class="p">:</span> <span class="n">MyViewModel</span><span class="p">!</span>

    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="kc">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Its instantiation with the ViewModel will be super easy:</p><pre><code><div class="highlight"><span></span><span class="kd">let</span> <span class="nv">myViewController</span> <span class="p">=</span> <span class="n">MyViewController</span><span class="p">.</span><span class="n">instantiate</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="n">MyViewModel</span><span class="p">())</span>
</div></code></pre><h1>Let’s go further in ViewModel abstraction</h1><p>In what we’ve done so far, we still have to instantiate the ViewModel and give it to the View. Wouldn’t it be nice to just instantiate the View and let it deal with the ViewModel instantiation in a generic way ? Swift type inference can help a lot in doing so.</p><p>Before we dive into the code, I’d like to warn you that some may say this technic introduce a strong coupling between the View and the ViewModel. In a way this is true, but depending on the amount of time, energy, complexity allocated to your app, it can be an efficient strategy anyway.</p><p>First of all we will define WHAT is a ViewModel. Of course we will use a Protocol for that. And by doing so, we’ll introduce the notion of Services. Services are low level layers that are needed by the ViewModel to retrieve data or perform actions.</p><pre><code><div class="highlight"><span></span><span class="kd">protocol</span> <span class="nc">ViewModel</span> <span class="p">{</span>
    <span class="n">associatedtype</span> <span class="n">Services</span>
    <span class="kd">init</span> <span class="p">(</span><span class="n">withServices</span> <span class="n">services</span><span class="p">:</span> <span class="n">Services</span><span class="p">)</span>
<span class="p">}</span>
</div></code></pre><p>We have to amend the ViewModelBased definition to introduce the ViewModel protocol in the associated type.</p><pre><code><div class="highlight"><span></span><span class="kd">protocol</span> <span class="nc">ViewModelBased</span><span class="p">:</span> <span class="kd">class</span> <span class="p">{</span>
    <span class="n">associatedtype</span> <span class="n">ViewModelType</span><span class="p">:</span> <span class="n">ViewModel</span>
    <span class="kd">var</span> <span class="nv">viewModel</span><span class="p">:</span> <span class="n">ViewModelType</span> <span class="p">{</span> <span class="kr">get</span> <span class="kr">set</span> <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Finally we can adapt the ViewModelBased extension like this:</p><pre><code><div class="highlight"><span></span><span class="kd">extension</span> <span class="nc">ViewModelBased</span> <span class="k">where</span> <span class="kc">Self</span><span class="p">:</span> <span class="n">StoryboardBased</span> <span class="o">&amp;</span> <span class="bp">UIViewController</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">instantiate</span><span class="p">&lt;</span><span class="n">ServicesT</span><span class="p">&gt;</span> <span class="p">(</span><span class="n">withServices</span> <span class="n">services</span><span class="p">:</span> <span class="n">ServicesT</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="kc">Self</span>
    <span class="k">where</span> <span class="n">ServicesT</span> <span class="p">==</span> <span class="kc">Self</span><span class="p">.</span><span class="n">ViewModelType</span><span class="p">.</span><span class="n">Services</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">viewController</span> <span class="p">=</span> <span class="kc">Self</span><span class="p">.</span><span class="n">instantiate</span><span class="p">()</span>
        <span class="n">viewController</span><span class="p">.</span><span class="n">viewModel</span> <span class="p">=</span> <span class="n">ViewModelType</span><span class="p">(</span><span class="n">withServices</span><span class="p">:</span> <span class="n">services</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">viewController</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>There are 2 main differences between this version and the previous one:</p><ul><li>the first difference is obvious: this static function not only instantiates the UIViewController but also the ViewModel. That’s one thing the developper won’t have to do anymore 👍</li><li>the second difference is the function signature. It now takes some kind of Services as a parameter. As you can see, this is a generic function. The “where” statement forces the developper to pass a ServicesT that is the same as the one required in the ViewModelType. This brings safety and consistency 👍</li></ul><p>What is great here is that Swift will infer the ViewModelType according to the ViewModelBased implementation.</p><p>Let’s see this in action.</p><p>First thing first, we have to define a dumb Service for the sake of this demonstration:</p><pre><code><div class="highlight"><span></span><span class="kd">class</span> <span class="nc">MyService</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">executeService</span><span class="p">()</span> <span class="p">{</span>
        <span class="bp">print</span> <span class="p">(</span><span class="s">&quot;Service execution&quot;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>We can now define a ViewModel that needs this Service:</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">MyViewModel</span><span class="p">:</span> <span class="n">ViewModel</span> <span class="p">{</span>
    <span class="kd">typealias</span> <span class="n">Services</span> <span class="p">=</span> <span class="n">MyService</span>

    <span class="kd">init</span><span class="p">(</span><span class="n">withServices</span> <span class="n">services</span><span class="p">:</span> <span class="n">Services</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">services</span><span class="p">.</span><span class="n">executeService</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>MyViewController instantiation with its ViewModel becomes that easy (considering that we already have a MyService instance):</p><pre><code><div class="highlight"><span></span><span class="kd">let</span> <span class="nv">myViewController</span> <span class="p">=</span> <span class="n">MyViewController</span><span class="p">.</span><span class="n">instantiate</span><span class="p">(</span><span class="n">withServices</span><span class="p">:</span> <span class="n">myService</span><span class="p">)</span>
<span class="c1">// we can access the inner ViewModel if needed: myViewController.viewModel</span>
</div></code></pre><h1>Protocol composition for Services</h1><p>Although this seems pretty handy, there is one drawback to this pattern: what if a ViewModel needs several Services ?</p><p>One solution would be to pass some kind of container that provides ALL the services of your application. This would work, but not very safe because the ViewModel could use every services of the container without restriction.</p><p>I once read a <a href="http://merowing.info/2017/04/using-protocol-compositon-for-dependency-injection/">post from Krzysztof Zablocki</a> about this issue and I though it would work very gently with my ViewModel approach.</p><p>Let’s say our application needs 3 services:</p><pre><code><div class="highlight"><span></span><span class="kd">class</span> <span class="nc">Service1</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">executeService1</span><span class="p">()</span> <span class="p">{</span>
        <span class="bp">print</span> <span class="p">(</span><span class="s">&quot;execution of Service1&quot;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Service2</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">executeService2</span><span class="p">()</span> <span class="p">{</span>
        <span class="bp">print</span> <span class="p">(</span><span class="s">&quot;execution of Service2&quot;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Service3</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">executeService3</span><span class="p">()</span> <span class="p">{</span>
        <span class="bp">print</span> <span class="p">(</span><span class="s">&quot;execution of Service3&quot;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>The idea is to use Protocol composition to express the services we need in our ViewModel. We will define a Protocol per Service that grants access to it:</p><pre><code><div class="highlight"><span></span><span class="kd">protocol</span> <span class="nc">HasService1</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">service1</span><span class="p">:</span> <span class="n">Service1</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">protocol</span> <span class="nc">HasService2</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">service2</span><span class="p">:</span> <span class="n">Service2</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">protocol</span> <span class="nc">HasService3</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">service3</span><span class="p">:</span> <span class="n">Service3</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>In our ViewModels we now have the ability to clearly define our dependancies, with a fine granularity:</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">MyViewModel</span><span class="p">:</span> <span class="n">ViewModel</span> <span class="p">{</span>

    <span class="c1">// thanks to protocol composition we define only the services we want to use</span>
    <span class="kd">typealias</span> <span class="n">Services</span> <span class="p">=</span> <span class="n">HasService1</span> <span class="o">&amp;</span> <span class="n">HasService2</span>

    <span class="kd">init</span><span class="p">(</span><span class="n">withServices</span> <span class="n">services</span><span class="p">:</span> <span class="n">Services</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">services</span><span class="p">.</span><span class="n">service1</span><span class="p">.</span><span class="n">executeService1</span><span class="p">()</span>
        <span class="n">services</span><span class="p">.</span><span class="n">service2</span><span class="p">.</span><span class="n">executeService2</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="nc">MyOtherViewModel</span><span class="p">:</span> <span class="n">ViewModel</span> <span class="p">{</span>
    <span class="kd">typealias</span> <span class="n">Services</span> <span class="p">=</span> <span class="n">HasService2</span> <span class="o">&amp;</span> <span class="n">HasService3</span>

    <span class="kd">init</span><span class="p">(</span><span class="n">withServices</span> <span class="n">services</span><span class="p">:</span> <span class="n">Services</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">services</span><span class="p">.</span><span class="n">service2</span><span class="p">.</span><span class="n">executeService2</span><span class="p">()</span>
        <span class="n">services</span><span class="p">.</span><span class="n">service3</span><span class="p">.</span><span class="n">executeService3</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>The last step is to define the dependancy container:</p><pre><code><div class="highlight"><span></span><span class="kd">class</span> <span class="nc">MyServices</span><span class="p">:</span> <span class="n">HasService1</span><span class="p">,</span> <span class="n">HasService2</span><span class="p">,</span> <span class="n">HasService3</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">service1</span> <span class="p">=</span> <span class="n">Service1</span><span class="p">()</span>
    <span class="kd">let</span> <span class="nv">service2</span> <span class="p">=</span> <span class="n">Service2</span><span class="p">()</span>
    <span class="kd">let</span> <span class="nv">service3</span> <span class="p">=</span> <span class="n">Service3</span><span class="p">()</span>
<span class="p">}</span>
</div></code></pre><p>And we’re good to go, we can now pass the container to our ViewModels with a decent safety but a great scalability. If we need to access another Service inside a ViewModel, we just have to update the protocol composition.</p><p>At the end, UIViewController instantiation is the same (consider that MyViewController2 is a ViewModelBased VC):</p><pre><code><div class="highlight"><span></span><span class="kd">let</span> <span class="nv">myViewController</span> <span class="p">=</span> <span class="n">MyViewController</span><span class="p">.</span><span class="n">instantiate</span><span class="p">(</span><span class="n">withServices</span><span class="p">:</span> <span class="n">myServices</span><span class="p">)</span>
<span class="kd">let</span> <span class="nv">myViewController2</span> <span class="p">=</span> <span class="n">MyViewController2</span><span class="p">.</span><span class="n">instantiate</span><span class="p">(</span><span class="n">withServices</span><span class="p">:</span> <span class="n">myServices</span><span class="p">)</span>
<span class="c1">// This is the same myServices instance for the 2 ViewControllers</span>
<span class="c1">// but each ViewModel will only access what&#39;s needed</span>
</div></code></pre><p>Et voila 👌.</p><p>I hope this helps.</p><p>Stay tuned.</p>]]></content:encoded></item><item><guid isPermaLink="true">http://blog.warpfactor.io/posts/2017-12-22-RxFlow-Part3</guid><title>RxFlow Part 3: Tips and tricks</title><description>This is the final chapter of our journey within RxFlow. I’ve already exposed all the key features/principles of the framework in these 2 previous parts, let’s dive into some tips and tricks I used thanks to Reactive Programming.</description><link>http://blog.warpfactor.io/posts/2017-12-22-RxFlow-Part3</link><pubDate>Fri, 22 Dec 2017 17:01:00 -0500</pubDate><content:encoded><![CDATA[<p>This is the final chapter of our journey within <strong>RxFlow</strong>. I've already exposed all the key features/principles of the framework in these 2 posts:</p><ul><li><a href="http://blog.warpfactor.io/posts/2017-11-08-RxFlow-Part1/">RxFlow Part 1: In Theory</a></li><li><a href="http://blog.warpfactor.io/posts/2017-12-09-RxFlow-Part2/">RxFlow Part 2: In Practice</a></li></ul><p>Let's dive into some tips and tricks I used thanks to Reactive Programming.</p><h1>UIViewControllers made Reactive</h1><p>As we saw in part 2, we needed, at some point, to know when a <strong>Presentable</strong> was displayed or not, in a Reactive way. A Presentable exposes 3 Observables:</p><pre><code><div class="highlight"><span></span><span class="c1">/// Observable that triggers a bool indicating if</span>
<span class="c1">/// the current Presentable is being displayed</span>
<span class="kd">var</span> <span class="nv">rxVisible</span><span class="p">:</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="nb">Bool</span><span class="p">&gt;</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>

<span class="c1">/// Single triggered when this presentable is displayed</span>
<span class="c1">/// for the first time</span>
<span class="kd">var</span> <span class="nv">rxFirstTimeVisible</span><span class="p">:</span> <span class="n">Single</span><span class="p">&lt;</span><span class="nb">Void</span><span class="p">&gt;</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>

<span class="c1">/// Single triggered when this presentable is dismissed</span>
<span class="kd">var</span> <span class="nv">rxDismissed</span><span class="p">:</span> <span class="n">Single</span><span class="p">&lt;</span><span class="nb">Void</span><span class="p">&gt;</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
</div></code></pre><p>In <strong>RxFlow</strong>, UIViewController conforms to this Protocol, therefore we must find a way to make them Reactive.</p><p>Hopefully a great project that have discovered along the way has helped a lot in doing this:&nbsp;<a href="https://github.com/devxoul/RxViewController">RxViewController</a>.</p><p>It gives a Reactive extension to UIViewControllers by applying the pattern I describe in this post: <a href="http://blog.warpfactor.io/posts/2017-11-22-VersatileNamespace/">Verstatile name space in Swift</a>. Moreover it uses RxCocoa built-in functions that allows to observe selector calls. Once I had understood the concept I made my own extension to UIViewController.</p><pre><code><div class="highlight"><span></span><span class="kd">extension</span> <span class="nc">Reactive</span> <span class="k">where</span> <span class="n">Base</span><span class="p">:</span> <span class="bp">UIViewController</span> <span class="p">{</span>

    <span class="c1">/// Observable, triggered when the view has appeared for the first time</span>
    <span class="kd">public</span> <span class="kd">var</span> <span class="nv">firstTimeViewDidAppear</span><span class="p">:</span> <span class="n">Single</span><span class="p">&lt;</span><span class="nb">Void</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">sentMessage</span><span class="p">(</span><span class="k">#selector</span><span class="p">(</span><span class="n">Base</span><span class="p">.</span><span class="n">viewDidAppear</span><span class="p">)).</span><span class="bp">map</span> <span class="p">{</span> <span class="kc">_</span> <span class="k">in</span>
            <span class="k">return</span> <span class="nb">Void</span><span class="p">()</span>
        <span class="p">}.</span><span class="n">take</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="n">asSingle</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="c1">/// Observable, triggered when the view is being dismissed</span>
    <span class="kd">public</span> <span class="kd">var</span> <span class="nv">dismissed</span><span class="p">:</span> <span class="n">ControlEvent</span><span class="p">&lt;</span><span class="nb">Bool</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">source</span> <span class="p">=</span> <span class="n">sentMessage</span><span class="p">(</span><span class="k">#selector</span><span class="p">(</span><span class="n">Base</span><span class="p">.</span><span class="n">dismiss</span><span class="p">))</span>
                     <span class="p">.</span><span class="bp">map</span> <span class="p">{</span> <span class="nv">$0</span><span class="p">.</span><span class="bp">first</span> <span class="k">as</span><span class="p">?</span> <span class="nb">Bool</span> <span class="p">??</span> <span class="kc">false</span> <span class="p">}</span>
        <span class="k">return</span> <span class="n">ControlEvent</span><span class="p">(</span><span class="n">events</span><span class="p">:</span> <span class="n">source</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">/// Observable, triggered when the view appearance state changes</span>
    <span class="kd">public</span> <span class="kd">var</span> <span class="nv">displayed</span><span class="p">:</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="nb">Bool</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">viewDidAppearObs</span> <span class="p">=</span> <span class="n">sentMessage</span><span class="p">(</span><span class="k">#selector</span><span class="p">(</span><span class="n">Base</span><span class="p">.</span><span class="n">viewDidAppear</span><span class="p">))</span>
                               <span class="p">.</span><span class="bp">map</span> <span class="p">{</span> <span class="kc">_</span> <span class="k">in</span> <span class="kc">true</span> <span class="p">}</span>
        <span class="kd">let</span> <span class="nv">viewWillDisappearObs</span> <span class="p">=</span> <span class="n">sentMessage</span><span class="p">(</span><span class="k">#selector</span><span class="p">(</span><span class="n">Base</span><span class="p">.</span><span class="n">viewWillDisappear</span><span class="p">))</span>
                                   <span class="p">.</span><span class="bp">map</span> <span class="p">{</span> <span class="kc">_</span> <span class="k">in</span> <span class="kc">false</span> <span class="p">}</span>
        <span class="k">return</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="nb">Bool</span><span class="p">&gt;.</span><span class="n">merge</span><span class="p">(</span><span class="n">viewDidAppearObs</span><span class="p">,</span> <span class="n">viewWillDisappearObs</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>For the record, this is how It is used by the <strong>Coordinator</strong>, where "nextPresentable" is the <strong>Presentable</strong> that has been produced by a "<strong>navigate(to:)</strong>" function on a <strong>Flow</strong>. We only listen for the next <strong>Stepper</strong> after the very first display of the associated <strong>Presentable</strong>.</p><pre><code><div class="highlight"><span></span><span class="n">nextPresentable</span><span class="p">.</span><span class="n">rxFirstTimeVisible</span><span class="p">.</span><span class="n">subscribe</span><span class="p">(</span><span class="n">onSuccess</span><span class="p">:</span> <span class="p">{</span> <span class="p">[</span><span class="kr">unowned</span> <span class="kc">self</span><span class="p">,</span>
                                                           <span class="kr">unowned</span> <span class="n">nextPresentable</span><span class="p">,</span>
                                                           <span class="kr">unowned</span> <span class="n">nextStepper</span><span class="p">]</span> <span class="p">(</span><span class="kc">_</span><span class="p">)</span> <span class="k">in</span>
    <span class="c1">// we listen to the presentable&#39;s Stepper.</span>
    <span class="c1">// For each new Step value, we trigger a new navigation process</span>
    <span class="c1">// this is the core principle of the whole RxFlow mechanism</span>
    <span class="c1">// The process is paused each time the presentable is not currently displayed</span>
    <span class="c1">// for instance when another presentable is above it in the VCs hierarchy.</span>
    <span class="n">nextStepper</span><span class="p">.</span><span class="n">steps</span>
        <span class="p">.</span><span class="n">pausable</span><span class="p">(</span><span class="n">nextPresentable</span><span class="p">.</span><span class="n">rxVisible</span><span class="p">.</span><span class="n">startWith</span><span class="p">(</span><span class="kc">true</span><span class="p">))</span>
        <span class="p">.</span><span class="n">asDriver</span><span class="p">(</span><span class="n">onErrorJustReturn</span><span class="p">:</span> <span class="n">NoStep</span><span class="p">())</span>
        <span class="p">.</span><span class="n">drive</span><span class="p">(</span><span class="n">onNext</span><span class="p">:</span> <span class="p">{</span> <span class="p">[</span><span class="kr">unowned</span> <span class="kc">self</span><span class="p">]</span> <span class="p">(</span><span class="n">step</span><span class="p">)</span> <span class="k">in</span>
            <span class="c1">// the nextPresentable&#39;s Stepper fires a new Step</span>
            <span class="kc">self</span><span class="p">.</span><span class="n">steps</span><span class="p">.</span><span class="n">onNext</span><span class="p">(</span><span class="n">step</span><span class="p">)</span>
        <span class="p">}).</span><span class="n">disposed</span><span class="p">(</span><span class="n">by</span><span class="p">:</span> <span class="n">nextPresentable</span><span class="p">.</span><span class="n">disposeBag</span><span class="p">)</span>

<span class="p">}).</span><span class="n">disposed</span><span class="p">(</span><span class="n">by</span><span class="p">:</span> <span class="kc">self</span><span class="p">.</span><span class="n">disposeBag</span><span class="p">)</span>
</div></code></pre><h1>Let's take a pause</h1><p>Another key principle in <strong>RxFlow</strong> is: what happens in a <strong>Flow</strong>, stays in a <strong>Flow</strong>. Therefore, I had to find a way to "pause" the <strong>Steps</strong>' subscriptions if the <strong>Flow</strong> was not on the top of the view hierarchy anymore.</p><p>RxSwift does not provide "out of the box" a way to pause a subscription, but <a href="https://github.com/RxSwiftCommunity/RxSwiftExt">RxSwiftExt</a> does. This is a project from the <a href="https://github.com/RxSwiftCommunity">RxSwiftCommunity</a>. It adds a lot of new operators to RxSwift, such as "<a href="https://github.com/RxSwiftCommunity/RxSwiftExt#pausable">pausable</a>".</p><blockquote><p>It pauses the elements of the source observable sequence unless the latest element from the second observable sequence is true.</p></blockquote><p>Let's take a look at the implementation.</p><pre><code><div class="highlight"><span></span><span class="kd">extension</span> <span class="nc">ObservableType</span> <span class="p">{</span>

    <span class="c1">/// Pauses the elements of the source observable sequence based on</span>
    <span class="c1">/// the latest element from the second observable sequence.</span>
    <span class="c1">/// Elements are ignored unless the second sequence has most recently</span>
    <span class="c1">/// emitted `true`.</span>
    <span class="c1">/// - Parameter pauser: The observable sequence used to pause the source</span>
    <span class="c1">/// observable sequence.</span>
    <span class="c1">/// - Returns: The observable sequence which is paused based upon</span>
    <span class="c1">/// the pauser observable sequence.</span>
    <span class="kd">public</span> <span class="kd">func</span> <span class="nf">pausable</span><span class="p">&lt;</span><span class="n">P</span><span class="p">:</span> <span class="n">ObservableType</span><span class="p">&gt;</span> <span class="p">(</span> <span class="kc">_</span> <span class="n">pauser</span><span class="p">:</span> <span class="n">P</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="n">E</span><span class="p">&gt;</span>
                                                              <span class="k">where</span> <span class="n">P</span><span class="p">.</span><span class="n">E</span> <span class="p">==</span> <span class="nb">Bool</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">withLatestFrom</span><span class="p">(</span><span class="n">pauser</span><span class="p">)</span> <span class="p">{</span> <span class="n">element</span><span class="p">,</span> <span class="n">paused</span> <span class="k">in</span>
            <span class="p">(</span><span class="n">element</span><span class="p">,</span> <span class="n">paused</span><span class="p">)</span>
            <span class="p">}.</span><span class="bp">filter</span> <span class="p">{</span> <span class="kc">_</span><span class="p">,</span> <span class="n">paused</span> <span class="k">in</span>
                <span class="n">paused</span>
            <span class="p">}.</span><span class="bp">map</span> <span class="p">{</span> <span class="n">element</span><span class="p">,</span> <span class="kc">_</span> <span class="k">in</span>
                <span class="n">element</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>In fact, this is just a combination of 3 RxSwift built-in operators:</p><ul><li>withLatestFrom: which associates to the value triggered by the main Observable, the last value of another Observable called "pauser" (the one that drives the pause)</li><li>filter: which only accepts values from the "pauser" Observable that are true</li><li>map: which ignores the pauser Observable values so that only the value that is returned is the one from the main Observable</li></ul><p>Again, this is how it is used by the <strong>Coordinator</strong>:</p><pre><code><div class="highlight"><span></span><span class="n">nextStepper</span>
    <span class="p">.</span><span class="n">steps</span>
    <span class="p">.</span><span class="n">pausable</span><span class="p">(</span><span class="n">nextPresentable</span><span class="p">.</span><span class="n">rxVisible</span><span class="p">.</span><span class="n">startWith</span><span class="p">(</span><span class="kc">true</span><span class="p">))</span>
    <span class="p">.</span><span class="n">asDriver</span><span class="p">(</span><span class="n">onErrorJustReturn</span><span class="p">:</span> <span class="n">NoStep</span><span class="p">())</span>
    <span class="p">.</span><span class="n">drive</span><span class="p">(</span><span class="n">onNext</span><span class="p">:</span> <span class="p">{</span> <span class="p">[</span><span class="kr">unowned</span> <span class="kc">self</span><span class="p">]</span> <span class="p">(</span><span class="n">step</span><span class="p">)</span> <span class="k">in</span>
        <span class="c1">// the nextPresentable&#39;s Stepper fires a new Step</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">steps</span><span class="p">.</span><span class="n">onNext</span><span class="p">(</span><span class="n">step</span><span class="p">)</span>
    <span class="p">}).</span><span class="n">disposed</span><span class="p">(</span><span class="n">by</span><span class="p">:</span> <span class="n">nextPresentable</span><span class="p">.</span><span class="n">disposeBag</span><span class="p">)</span>
</div></code></pre><p>The is very straightforward to read: nextStepper's <strong>Steps</strong> are paused when values from "rxVisible" Observable are false.</p><h1>Protocols with stored properties ?</h1><p>Being a Protocol Oriented framework, <strong>RxFlow</strong> wants the developer to implement several Protocols. When you build that kind of framework, you don't want the user to struggle with too much functions or properties he would have to implement to fulfill those protocols.</p><p>Functions are not a problem, as you can provide default implementation with Protocol extensions. But properties are an issue, because Swift does not allow to store them in such an extension.</p><p>For instance, when you implement the <strong>Stepper</strong> Protocol, you are offered a "<strong>step</strong>" property that allows to trigger new <strong>Step</strong> values. How did I do this ?</p><p>Again the RxSwiftCommunity was of great help here. I was inspired by&nbsp;<a href="https://github.com/RxSwiftCommunity/NSObject-Rx">NSObject-Rx</a>. This project proposes an extension to NSObject that stores a RxSwift DisposeBag. The aim is to provide a default DisposeBag to every class that extends NSObject, in particular UIViewControllers. It was precisely what I needed but in a protocol extension. Here is the code of Stepper.</p><pre><code><div class="highlight"><span></span><span class="kd">private</span> <span class="kd">var</span> <span class="nv">subjectContext</span><span class="p">:</span> <span class="nb">UInt8</span> <span class="p">=</span> <span class="mi">0</span>

<span class="c1">/// a Stepper has only one purpose: emit Steps that correspond to</span>
<span class="c1">/// specific navigation states.</span>
<span class="c1">/// The state changes lead to navigation actions in the context of</span>
<span class="c1">/// a specific Flow</span>
<span class="kd">public</span> <span class="kd">protocol</span> <span class="nc">Stepper</span><span class="p">:</span> <span class="n">Synchronizable</span> <span class="p">{</span>

    <span class="c1">/// the Rx Obsersable that will trigger new Steps</span>
    <span class="kd">var</span> <span class="nv">steps</span><span class="p">:</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="n">Step</span><span class="p">&gt;</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">public</span> <span class="kd">extension</span> <span class="nc">Stepper</span> <span class="p">{</span>

    <span class="c1">/// The step in which to publish new Steps</span>
    <span class="kd">public</span> <span class="kd">var</span> <span class="nv">step</span><span class="p">:</span> <span class="n">BehaviorSubject</span><span class="p">&lt;</span><span class="n">Step</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">self</span><span class="p">.</span><span class="n">synchronized</span> <span class="p">{</span>
            <span class="k">if</span> <span class="kd">let</span> <span class="nv">subject</span> <span class="p">=</span> <span class="n">objc_getAssociatedObject</span><span class="p">(</span><span class="kc">self</span><span class="p">,</span> <span class="p">&amp;</span><span class="n">subjectContext</span><span class="p">)</span>
                             <span class="k">as</span><span class="p">?</span> <span class="n">BehaviorSubject</span><span class="p">&lt;</span><span class="n">Step</span><span class="p">&gt;</span> <span class="p">{</span>
                <span class="k">return</span> <span class="n">subject</span>
            <span class="p">}</span>
            <span class="kd">let</span> <span class="nv">newSubject</span> <span class="p">=</span> <span class="n">BehaviorSubject</span><span class="p">&lt;</span><span class="n">Step</span><span class="p">&gt;(</span><span class="n">value</span><span class="p">:</span> <span class="n">NoStep</span><span class="p">())</span>
            <span class="n">objc_setAssociatedObject</span><span class="p">(</span><span class="kc">self</span><span class="p">,</span>
                                     <span class="p">&amp;</span><span class="n">subjectContext</span><span class="p">,</span>
                                     <span class="n">newSubject</span><span class="p">,</span>
                                     <span class="p">.</span><span class="n">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">newSubject</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">/// the Rx Obsersable that will trigger new Steps</span>
    <span class="kd">public</span> <span class="kd">var</span> <span class="nv">steps</span><span class="p">:</span> <span class="n">Observable</span><span class="p">&lt;</span><span class="n">Step</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">self</span><span class="p">.</span><span class="n">step</span><span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>All the magic happens in the "<strong>step</strong>" computed property. We use the "objc_setAssociatedObject" function to store a reference to a BehaviorSuject (<a href="http://nshipster.com/associated-objects/">see this NSHipster article</a>). Each time this property is accessed, we retrieved this stored reference (at the first call, the BehaviorSubject is created and associated to the subjectContext reference).</p><p>There is a drawback to this trick. Protocols can be adopted by value types such as Structs which means memory is handled in the stack, not in the heap (like reference types). Therefore the lifecycle and reusability of a Struct instance are handled by the Swift runtime. When the runtime is going to reuse an instance it is not sure what happens to the "objc_getAssociatedObject" associated value. To make it safe, this kind of protocol should be constraint to be implemented by a class only, this will ensure that everything happens in the heap.</p><h1>Give it back to community</h1><p>As you can see, some key features in RxFlow are based on work done by the developers community. It is something you have to consider when you open source a project on your own: You will need help ! I think this is important to give it back to the community.</p><p>In RxFlow's case, I had the opportunity to open 2 PRs that have been merged:</p><ul><li><a href="https://github.com/RxSwiftCommunity/NSObject-Rx/pull/49">Rehabilitates the HasDisposeBag protocol</a></li><li><a href="https://github.com/devxoul/RxViewController/pull/4">Add new observables for displayed and dismissed states</a></li></ul><p>It felt really good to know that my code could help other developers.</p><h1>Conclusion</h1><p>It has been quite a challenge to make my first open source project available. This was NOT as easy as one can think because you have to:</p><ul><li>gather and synthesize all the ideas that have led you to your project (ideas from former projects, problems and solutions you've encountered, …). So take it easy and think about it before coding anything :-)</li><li>try to pick the appropriate patterns according to the complexity of your project, do not over engineer your work</li><li>think as if you were the guy who will use your code, keep it as simple as possible (this is the hardest thing)</li><li>write a good README because the code is not enough to make your project attractive</li><li>be professional with your sources management. Nobody wants to contribute to a project that seems ugly (git CLI is your best friend)</li><li>try to write blog articles to share your work, you will get feedback from smart people</li><li>keep the faith, you will be discouraged from time to time. So give it a break if you are overwhelmed, do some brain washing, and ideas will come back later.</li></ul><p>RxFlow is out in version 2.9.0 on CocoaPods, Cartage and SPM.</p><p>RxFlow Github repo: <a href="https://github.com/RxSwiftCommunity/RxFlow">https://github.com/RxSwiftCommunity/RxFlow</a></p><p>Stay tuned.</p>]]></content:encoded></item><item><guid isPermaLink="true">http://blog.warpfactor.io/posts/2017-12-09-RxFlow-Part2</guid><title>RxFlow Part 2: In Practice</title><description>A few weeks ago I introduced in this blog an iOS framework called RxFlow. I’ve been working on this framework for several months, and it is now ready to be used. If you haven’t read it yet, I suggest you take a look at this post "RxFlow Part1: In Theory".</description><link>http://blog.warpfactor.io/posts/2017-12-09-RxFlow-Part2</link><pubDate>Sat, 9 Dec 2017 17:01:00 -0500</pubDate><content:encoded><![CDATA[<p>A few weeks ago I introduced in this blog an iOS framework called RxFlow. I’ve been working on this framework for several months, and it is now ready to be used. If you haven’t read it yet, I suggest you take a look at this <a href="http://blog.warpfactor.io/posts/2017-11-08-RxFlow-Part1/">post</a>.</p><p>To sum up, RxFlow aims to:</p><ul><li>ease the cutting of your navigation into logical sections</li><li>remove the navigation code from the View Controllers</li><li>encourage the reusability of the View Controllers</li><li>promote reactive programming</li><li>promote dependency injection</li></ul><p>A quick reminder of the terminology:</p><ul><li>Flow: each Flow defines a navigation area within your application.</li><li>Step: each Step is a navigation state in your application. Combinaisons of Flows and Steps describe all the possible navigation actions.</li><li>Stepper: it can be anything that can emit Steps. Steppers will be responsible for triggering every navigation actions within the Flows</li><li>Presentable: it is an abstraction of something that can be presented, basically UIViewController and Flow are Presentable</li><li>NextFlowItem: it tells the Coordinator what will be the next thing that will produce new Steps in its Reactive mechanism</li><li>Coordinator: the job of the Coordinator is to mix combinaisons of Flows and Steps in a consistent way</li></ul><p>It is also important to keep in mind that RxFlow uses protocol oriented programming so that it doesn’t freeze your code in an inheritance hierarchy.</p><p>In the <a href="https://github.com/RxSwiftCommunity/RxFlow">RxFlow repo</a> you will find a demo application. It shows pretty much every possible navigation types:</p><ul><li>Navigation stack</li><li>Tab bar</li><li>Master / detail</li><li>Modal popup</li></ul><img src="http://blog.warpfactor.io/Images/2017-12-09-RxFlow-Part2/demo_rxflow.gif"/><h1>It’s all about States</h1><p>RxFlow is mainly about handling navigation state changes in a reactive way. In order to be reused in multiple contexts, these states must be unaware of the current navigation Flow the user is in. Therefore, instead of meaning “I want to go to this screen”, a state will rather mean “Someone or something has done this action” and RxFlow will pick the right screen according to the current navigation Flow. With RxFlow, this navigation states are called Steps.</p><p>Enums are a great way to describe Steps:</p><ul><li>they are easy to use</li><li>a value can be defined only one time (therefore a state is unique)</li><li>they are safe to use as Swift wants you to implement all their possible values in switch statements</li><li>they can embed values that will be given from one screen to another</li><li>they are value types, so there is no shared reference with uncontrolled propagation</li></ul><p>For instance, in the demo application, those are all the Steps that we need to cover the navigations possibilities.</p><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">RxFlow</span>

<span class="kd">enum</span> <span class="nc">DemoStep</span><span class="p">:</span> <span class="n">Step</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">apiKey</span>
    <span class="k">case</span> <span class="n">apiKeyIsComplete</span>

    <span class="k">case</span> <span class="n">movieList</span>

    <span class="k">case</span> <span class="n">moviePicked</span> <span class="p">(</span><span class="n">withMovieId</span><span class="p">:</span> <span class="nb">Int</span><span class="p">)</span>
    <span class="k">case</span> <span class="n">castPicked</span> <span class="p">(</span><span class="n">withCastId</span><span class="p">:</span> <span class="nb">Int</span><span class="p">)</span>

    <span class="k">case</span> <span class="n">settings</span>
    <span class="k">case</span> <span class="n">settingsDone</span>
    <span class="k">case</span> <span class="n">about</span>
<span class="p">}</span>
</div></code></pre><h1>Go with the Flow</h1><p>With RxFlow, all the navigation code, such as presenting or pushing view controllers, is declared in Flows. A Flow represents a logical navigation section in your application, and when combined to a specific Step, it triggers some navigation actions.</p><p>To do so, a Flow has to implement:</p><ul><li>a “navigate(to:)” function that makes the navigation actions happen according the Flow and the Step</li><li>a “root” UIViewController on which will be based the navigation in this Flow</li></ul><p>Here is a Flow example that handles a UINavigationController and its navigation stack. In this Flow, three navigation actions are possible.</p><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">RxFlow</span>
<span class="kd">import</span> <span class="nc">UIKit</span>

<span class="kd">class</span> <span class="nc">WatchedFlow</span><span class="p">:</span> <span class="n">Flow</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nv">root</span><span class="p">:</span> <span class="bp">UIViewController</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">self</span><span class="p">.</span><span class="n">rootViewController</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">let</span> <span class="nv">rootViewController</span> <span class="p">=</span> <span class="bp">UINavigationController</span><span class="p">()</span>
    <span class="kd">private</span> <span class="kd">let</span> <span class="nv">service</span><span class="p">:</span> <span class="n">MoviesService</span>

    <span class="kd">init</span><span class="p">(</span><span class="n">withService</span> <span class="n">service</span><span class="p">:</span> <span class="n">MoviesService</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">service</span> <span class="p">=</span> <span class="n">service</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">navigate</span><span class="p">(</span><span class="n">to</span> <span class="n">step</span><span class="p">:</span> <span class="n">Step</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="p">[</span><span class="n">NextFlowItem</span><span class="p">]</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">step</span> <span class="p">=</span> <span class="n">step</span> <span class="k">as</span><span class="p">?</span> <span class="n">DemoStep</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">NextFlowItem</span><span class="p">.</span><span class="n">noNavigation</span>
        <span class="p">}</span>

        <span class="k">switch</span> <span class="n">step</span> <span class="p">{</span>

        <span class="k">case</span> <span class="p">.</span><span class="n">movieList</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">navigateToMovieListScreen</span><span class="p">()</span>
        <span class="k">case</span> <span class="p">.</span><span class="n">moviePicked</span><span class="p">(</span><span class="kd">let</span> <span class="nv">movieId</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">navigateToMovieDetailScreen</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="n">movieId</span><span class="p">)</span>
        <span class="k">case</span> <span class="p">.</span><span class="n">castPicked</span><span class="p">(</span><span class="kd">let</span> <span class="nv">castId</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">navigateToCastDetailScreen</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="n">castId</span><span class="p">)</span>
        <span class="k">default</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">NextFlowItem</span><span class="p">.</span><span class="n">noNavigation</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">navigateToMovieListScreen</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="p">[</span><span class="n">NextFlowItem</span><span class="p">]</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">viewModel</span> <span class="p">=</span> <span class="n">WatchedViewModel</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="kc">self</span><span class="p">.</span><span class="n">service</span><span class="p">)</span>
        <span class="kd">let</span> <span class="nv">viewController</span> <span class="p">=</span> <span class="n">WatchedViewController</span><span class="p">.</span><span class="n">instantiate</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="n">viewModel</span><span class="p">)</span>
        <span class="n">viewController</span><span class="p">.</span><span class="n">title</span> <span class="p">=</span> <span class="s">&quot;Watched&quot;</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">rootViewController</span><span class="p">.</span><span class="n">pushViewController</span><span class="p">(</span><span class="n">viewController</span><span class="p">,</span> <span class="n">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">NextFlowItem</span><span class="p">(</span><span class="n">nextPresentable</span><span class="p">:</span> <span class="n">viewController</span><span class="p">,</span> <span class="n">nextStepper</span><span class="p">:</span> <span class="n">viewModel</span><span class="p">)]</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">navigateToMovieDetailScreen</span> <span class="p">(</span><span class="n">with</span> <span class="n">movieId</span><span class="p">:</span> <span class="nb">Int</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="p">[</span><span class="n">NextFlowItem</span><span class="p">]</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">viewModel</span> <span class="p">=</span> <span class="n">MovieDetailViewModel</span><span class="p">(</span><span class="n">withService</span><span class="p">:</span> <span class="kc">self</span><span class="p">.</span><span class="n">service</span><span class="p">,</span> <span class="n">andMovieId</span><span class="p">:</span> <span class="n">movieId</span><span class="p">)</span>
        <span class="kd">let</span> <span class="nv">viewController</span> <span class="p">=</span> <span class="n">MovieDetailViewController</span><span class="p">.</span><span class="n">instantiate</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="n">viewModel</span><span class="p">)</span>
        <span class="n">viewController</span><span class="p">.</span><span class="n">title</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">title</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">rootViewController</span><span class="p">.</span><span class="n">pushViewController</span><span class="p">(</span><span class="n">viewController</span><span class="p">,</span> <span class="n">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">NextFlowItem</span><span class="p">(</span><span class="n">nextPresentable</span><span class="p">:</span> <span class="n">viewController</span><span class="p">,</span> <span class="n">nextStepper</span><span class="p">:</span> <span class="n">viewModel</span><span class="p">)]</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">navigateToCastDetailScreen</span> <span class="p">(</span><span class="n">with</span> <span class="n">castId</span><span class="p">:</span> <span class="nb">Int</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="p">[</span><span class="n">NextFlowItem</span><span class="p">]</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">viewModel</span> <span class="p">=</span> <span class="n">CastDetailViewModel</span><span class="p">(</span><span class="n">withService</span><span class="p">:</span> <span class="kc">self</span><span class="p">.</span><span class="n">service</span><span class="p">,</span> <span class="n">andCastId</span><span class="p">:</span> <span class="n">castId</span><span class="p">)</span>
        <span class="kd">let</span> <span class="nv">viewController</span> <span class="p">=</span> <span class="n">CastDetailViewController</span><span class="p">.</span><span class="n">instantiate</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="n">viewModel</span><span class="p">)</span>
        <span class="n">viewController</span><span class="p">.</span><span class="n">title</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">name</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">rootViewController</span><span class="p">.</span><span class="n">pushViewController</span><span class="p">(</span><span class="n">viewController</span><span class="p">,</span> <span class="n">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">NextFlowItem</span><span class="p">.</span><span class="n">noNavigation</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><h1>Navigation is a side effect</h1><p>When we learn Functional Reactive Programming, we often read about side effects. The aim of FRP is to propagate events and apply them functions all along the way. These functions may transform those events and eventually (but not necessarily) execute code that will perform whatever feature you want (do some networking, save a file, display an alert, …): those are side effects.</p><p>Because RxFlow relies on Reactive Programming, we can easily identify the inherent notions:</p><ul><li>events: those are the emitted Steps</li><li>function: this is the “navigate(to:)” function</li><li>transformation: the “navigate(to:)” function transforms a <strong> Step</strong> into NextFlowItem</li><li>side effects: those are the navigation actions performed in “navigate(to:)” (for instance, the function “navigateToMovieListScreen()” pushes a new UIViewController on the navigation stack)</li></ul><h1>Navigating consists in making NextFlowItems</h1><p>Basically, a NextFlowItem is a simple data structure that holds a Presentable and a Stepper.</p><p>A Presentable tells the Coordinator what will be the next thing you will present, and a Stepper tells the Coordinator what will be the next thing to emit Steps.</p><p>By default, all kinds of UIViewControllers are Presentable. Flows are also Presentable because at some point you will want to launch a whole new navigation area described in its own Flow, so RxFlow consider it as something that can be presented.</p><p>Why should the Coordinator know about Presentables ?</p><p>Presentable is an abstraction of something that can be presented. Because a Step cannot be emitted unless its associated Presentable is displayed, Presentable offers Reactive observables that the Coordinator will subscribe to (so it will be aware of the presentation state of the Presentable). Therefore there is no risk of firing a Step while its Presentable is not yet fully displayed.</p><p>A Stepper can be anything: a custom UIViewController, a ViewModel, a Presenter… Once it is registered in the Coordinator, a Stepper can emits Steps via its “step” property (which is a RxSwift subject). The Coordinator will listen for these Steps and call the Flow’s “navigate(to:)” function.</p><p>Here is an exemple of Stepper in the demo app.</p><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">RxFlow</span>
<span class="kd">import</span> <span class="nc">RxSwift</span>

<span class="kd">class</span> <span class="nc">WatchedViewModel</span><span class="p">:</span> <span class="n">Stepper</span> <span class="p">{</span>

    <span class="kd">let</span> <span class="nv">movies</span><span class="p">:</span> <span class="p">[</span><span class="n">MovieViewModel</span><span class="p">]</span>

    <span class="kd">init</span><span class="p">(</span><span class="n">with</span> <span class="n">service</span><span class="p">:</span> <span class="n">MoviesService</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// we can do some data refactoring in order to display</span>
        <span class="c1">// things exactly the way we want (this is the aim of a ViewModel)</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">movies</span> <span class="p">=</span> <span class="n">service</span><span class="p">.</span><span class="n">watchedMovies</span><span class="p">().</span><span class="bp">map</span><span class="p">({</span> <span class="p">(</span><span class="n">movie</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">MovieViewModel</span> <span class="k">in</span>
            <span class="k">return</span> <span class="n">MovieViewModel</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">movie</span><span class="p">.</span><span class="n">id</span><span class="p">,</span>
                                  <span class="n">title</span><span class="p">:</span> <span class="n">movie</span><span class="p">.</span><span class="n">title</span><span class="p">,</span>
                                  <span class="n">image</span><span class="p">:</span> <span class="n">movie</span><span class="p">.</span><span class="n">image</span><span class="p">)</span>
        <span class="p">})</span>
    <span class="p">}</span>

    <span class="kd">public</span> <span class="kd">func</span> <span class="nf">pick</span> <span class="p">(</span><span class="n">movieId</span><span class="p">:</span> <span class="nb">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">step</span><span class="p">.</span><span class="n">onNext</span><span class="p">(</span><span class="n">DemoStep</span><span class="p">.</span><span class="n">moviePicked</span><span class="p">(</span><span class="n">withMovieId</span><span class="p">:</span> <span class="n">movieId</span><span class="p">))</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>In this example, the pick function is called when the user picks a movie in a list. This function emits a new value in the “self.step” Rx stream.</p><p>To sum up the navigation process :</p><ul><li>the navigate(to:) function is called with a Step as a parameter</li><li>according to this Step, some navigation code is called (side effects)</li><li>also according to this Step, NextFlowItems are produced. Therefore, Presentables and Steppers are registered into the Coordinator</li><li>Steppers emit new Steps and here we go again</li></ul><h1>Why is it OK to produce multiple NextFlowItems for a single combination of Flow and Step ?</h1><p>Because nothing forbids an application to have several navigations at a time. For instance each item of a tab bar can lead to a navigation stack. The Step that triggers the display of the UITabbarController will result in a NextFlowItem per navigation stack.</p><p>You can have a look at the demo app to understand the concept. Here is an extract where we wire a UITabBarController with 2 Flows (each Flow describes the navigation stack associated with a tab bar item):</p><pre><code><div class="highlight"><span></span><span class="kd">private</span> <span class="kd">func</span> <span class="nf">navigationToDashboardScreen</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="p">[</span><span class="n">NextFlowItem</span><span class="p">]</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">tabbarController</span> <span class="p">=</span> <span class="bp">UITabBarController</span><span class="p">()</span>
    <span class="kd">let</span> <span class="nv">wishlistStepper</span> <span class="p">=</span> <span class="n">WishlistStepper</span><span class="p">()</span>
    <span class="kd">let</span> <span class="nv">wishListFlow</span> <span class="p">=</span> <span class="n">WishlistWarp</span><span class="p">(</span><span class="n">withService</span><span class="p">:</span> <span class="kc">self</span><span class="p">.</span><span class="n">service</span><span class="p">,</span>
                                    <span class="n">andStepper</span><span class="p">:</span> <span class="n">wishlistStepper</span><span class="p">)</span>
    <span class="kd">let</span> <span class="nv">watchedFlow</span> <span class="p">=</span> <span class="n">WatchedFlow</span><span class="p">(</span><span class="n">withService</span><span class="p">:</span> <span class="kc">self</span><span class="p">.</span><span class="n">service</span><span class="p">)</span>

    <span class="n">Flows</span><span class="p">.</span><span class="n">whenReady</span><span class="p">(</span><span class="n">flow1</span><span class="p">:</span> <span class="n">wishListFlow</span><span class="p">,</span> <span class="n">flow2</span><span class="p">:</span> <span class="n">watchedFlow</span><span class="p">,</span> <span class="n">block</span><span class="p">:</span> <span class="p">{</span> <span class="p">[</span><span class="kr">unowned</span> <span class="kc">self</span><span class="p">]</span>
    <span class="p">(</span><span class="n">root1</span><span class="p">:</span> <span class="bp">UINavigationController</span><span class="p">,</span> <span class="n">root2</span><span class="p">:</span> <span class="bp">UINavigationController</span><span class="p">)</span> <span class="k">in</span>
        <span class="kd">let</span> <span class="nv">tabBarItem1</span> <span class="p">=</span> <span class="bp">UITabBarItem</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="s">&quot;Wishlist&quot;</span><span class="p">,</span>
                                       <span class="n">image</span><span class="p">:</span> <span class="bp">UIImage</span><span class="p">(</span><span class="n">named</span><span class="p">:</span> <span class="s">&quot;wishlist&quot;</span><span class="p">),</span>
                                       <span class="n">selectedImage</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
        <span class="kd">let</span> <span class="nv">tabBarItem2</span> <span class="p">=</span> <span class="bp">UITabBarItem</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="s">&quot;Watched&quot;</span><span class="p">,</span>
                                       <span class="n">image</span><span class="p">:</span> <span class="bp">UIImage</span><span class="p">(</span><span class="n">named</span><span class="p">:</span> <span class="s">&quot;watched&quot;</span><span class="p">),</span>
                                       <span class="n">selectedImage</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
        <span class="n">root1</span><span class="p">.</span><span class="n">tabBarItem</span> <span class="p">=</span> <span class="n">tabBarItem1</span>
        <span class="n">root1</span><span class="p">.</span><span class="n">title</span> <span class="p">=</span> <span class="s">&quot;Wishlist&quot;</span>
        <span class="n">root2</span><span class="p">.</span><span class="n">tabBarItem</span> <span class="p">=</span> <span class="n">tabBarItem2</span>
        <span class="n">root2</span><span class="p">.</span><span class="n">title</span> <span class="p">=</span> <span class="s">&quot;Watched&quot;</span>

        <span class="n">tabbarController</span><span class="p">.</span><span class="n">setViewControllers</span><span class="p">([</span><span class="n">root1</span><span class="p">,</span> <span class="n">root2</span><span class="p">],</span> <span class="n">animated</span><span class="p">:</span> <span class="kc">false</span><span class="p">)</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">rootViewController</span><span class="p">.</span><span class="n">pushViewController</span><span class="p">(</span><span class="n">tabbarController</span><span class="p">,</span> <span class="n">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
    <span class="p">})</span>

    <span class="k">return</span> <span class="p">([</span><span class="n">NextFlowItem</span><span class="p">(</span><span class="n">nextPresentable</span><span class="p">:</span> <span class="n">wishListFlow</span><span class="p">,</span>
                      <span class="n">nextStepper</span><span class="p">:</span> <span class="n">wishlistStepper</span><span class="p">),</span>
             <span class="n">NextFlowItem</span><span class="p">(</span><span class="n">nextPresentable</span><span class="p">:</span> <span class="n">watchedFlow</span><span class="p">,</span>
                      <span class="n">nextStepper</span><span class="p">:</span> <span class="n">OneStepper</span><span class="p">(</span><span class="n">withSingleStep</span><span class="p">:</span> <span class="n">DemoStep</span><span class="p">.</span><span class="n">movieList</span><span class="p">))])</span>
<span class="p">}</span>
</div></code></pre><p>The static function “Flows.whenReady()” takes the Flows to launch and a closure that will be called when these Flows are ready to be displayed (ie when the first screen of this Flow has been picked).</p><h1>Why is it OK to produce no NextFlowItem at all for a combination of Flow and Step ?</h1><p>Because a navigation Flow has to have an end ! For instance the last screen of a navigation stack will not allow further navigation but only a back action handled by the UINavigationController itself. In this case, the navigate(to:) function will return NextFlowItem.noNavigation.</p><h1>What happens in a Flow … stays in a Flow !</h1><p>As we’ve already seen, it is possible to have multiple Flows being navigated at the same time. For instance, a screen in a navigation stack could launch a popup which could also contain another navigation stack. From a UIKit point of view, the UIViewController hierarchy is very important, and we cannot mess up with that inside the Coordinator.</p><p>This is why when a Flow is not currently displayed (in our example, it is when the first navigation stack is under the popup), the Steps that could be emitted within it will be ignored by the Coordinator.</p><p>In a more general point of view, the Steps emitted in the context of a Flow will be interpreted only in the context of that Flow(they cannot be caught by other ones).</p><h1>Dependency Injection made easy</h1><p>DI is one of the main goal of RxFlow. Basically, dependency injection can be done by passing an implementation of something (a service, a manager, …) as a parameter to an initializer or a method (it can also be done via property).</p><p>In a RxFlow, as the developer takes care of instantiating UIViewControllers, ViewModels, Presenters, and so on, it is a great opportunity to inject whatever you need. Here is an example of dependency injection in a ViewModel.</p><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">RxFlow</span>
<span class="kd">import</span> <span class="nc">UIKit</span>

<span class="kd">class</span> <span class="nc">WatchedFlow</span><span class="p">:</span> <span class="n">Flow</span> <span class="p">{</span>

    <span class="p">...</span>
    <span class="kd">private</span> <span class="kd">let</span> <span class="nv">service</span><span class="p">:</span> <span class="n">MoviesService</span>

    <span class="kd">init</span><span class="p">(</span><span class="n">withService</span> <span class="n">service</span><span class="p">:</span> <span class="n">MoviesService</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">service</span> <span class="p">=</span> <span class="n">service</span>
    <span class="p">}</span>
    <span class="p">...</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">navigateToMovieListScreen</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="p">[</span><span class="n">NextFlowItem</span><span class="p">]</span> <span class="p">{</span>
        <span class="c1">// inject Service into ViewModel</span>
        <span class="kd">let</span> <span class="nv">viewModel</span> <span class="p">=</span> <span class="n">WatchedViewModel</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="kc">self</span><span class="p">.</span><span class="n">service</span><span class="p">)</span>

        <span class="c1">// injecy ViewMNodel into UIViewController</span>
        <span class="kd">let</span> <span class="nv">viewController</span> <span class="p">=</span> <span class="n">WatchedViewController</span><span class="p">.</span><span class="n">instantiate</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="n">viewModel</span><span class="p">)</span>

        <span class="n">viewController</span><span class="p">.</span><span class="n">title</span> <span class="p">=</span> <span class="s">&quot;Watched&quot;</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">rootViewController</span><span class="p">.</span><span class="n">pushViewController</span><span class="p">(</span><span class="n">viewController</span><span class="p">,</span> <span class="n">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">NextFlowItem</span><span class="p">(</span><span class="n">nextPresentable</span><span class="p">:</span> <span class="n">viewController</span><span class="p">,</span> <span class="n">nextStepper</span><span class="p">:</span> <span class="n">viewModel</span><span class="p">)]</span>
    <span class="p">}</span>
    <span class="p">...</span>
<span class="p">}</span>
</div></code></pre><h1>How to bootstrap a navigation process</h1><p>Now that you know how to wire things together, to mix Flows and Steps to trigger navigation actions and to produce NextFlowItems, there is one thing left to do: bootstrap the navigation process when the application starts.</p><p>Everything happens in the AppDelegate, and you’ll see that this is pretty straightforward:</p><ul><li>instantiate the Coordinator</li><li>instantiate the first Flow to be navigated</li><li>ask the Coordinator to coordinate this Flow with a first Step</li><li>when the first Flow is ready, set its root as the rootViewController of the Window</li></ul><p>Here is how it is done in the demo app.</p><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">UIKit</span>
<span class="kd">import</span> <span class="nc">RxFlow</span>
<span class="kd">import</span> <span class="nc">RxSwift</span>
<span class="kd">import</span> <span class="nc">RxCocoa</span>

<span class="kr">@UIApplicationMain</span>
<span class="kd">class</span> <span class="nc">AppDelegate</span><span class="p">:</span> <span class="bp">UIResponder</span><span class="p">,</span> <span class="bp">UIApplicationDelegate</span> <span class="p">{</span>

    <span class="kd">let</span> <span class="nv">disposeBag</span> <span class="p">=</span> <span class="n">DisposeBag</span><span class="p">()</span>
    <span class="kd">var</span> <span class="nv">window</span><span class="p">:</span> <span class="bp">UIWindow</span><span class="p">?</span>
    <span class="kd">var</span> <span class="nv">coordinator</span> <span class="p">=</span> <span class="n">Coordinator</span><span class="p">()</span>
    <span class="kd">let</span> <span class="nv">movieService</span> <span class="p">=</span> <span class="n">MoviesService</span><span class="p">()</span>
    <span class="kr">lazy</span> <span class="kd">var</span> <span class="nv">mainFlow</span> <span class="p">=</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">MainFlow</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="kc">self</span><span class="p">.</span><span class="n">movieService</span><span class="p">)</span>
    <span class="p">}()</span>

    <span class="kd">func</span> <span class="nf">application</span><span class="p">(</span><span class="kc">_</span> <span class="n">application</span><span class="p">:</span> <span class="bp">UIApplication</span><span class="p">,</span>
                     <span class="n">didFinishWithOptions</span> <span class="n">options</span><span class="p">:</span> <span class="p">[</span><span class="n">UIApplicationLaunchOptionsKey</span><span class="p">:</span> <span class="nb">Any</span><span class="p">]?)</span>
                     <span class="p">-&gt;</span> <span class="nb">Bool</span> <span class="p">{</span>

        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">window</span> <span class="p">=</span> <span class="kc">self</span><span class="p">.</span><span class="n">window</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">false</span> <span class="p">}</span>

        <span class="n">Flows</span><span class="p">.</span><span class="n">whenReady</span><span class="p">(</span><span class="n">flow</span><span class="p">:</span> <span class="n">mainFlow</span><span class="p">,</span> <span class="n">block</span><span class="p">:</span> <span class="p">{</span> <span class="p">[</span><span class="kr">unowned</span> <span class="n">window</span><span class="p">]</span> <span class="p">(</span><span class="n">root</span><span class="p">)</span> <span class="k">in</span>
            <span class="n">window</span><span class="p">.</span><span class="n">rootViewController</span> <span class="p">=</span> <span class="n">root</span>
        <span class="p">})</span>

        <span class="n">coordinator</span><span class="p">.</span><span class="n">coordinate</span><span class="p">(</span><span class="n">flow</span><span class="p">:</span> <span class="n">mainFlow</span><span class="p">,</span>
                               <span class="n">withStepper</span><span class="p">:</span> <span class="n">OneStepper</span><span class="p">(</span><span class="n">withSingleStep</span><span class="p">:</span> <span class="n">DemoStep</span><span class="p">.</span><span class="n">apiKey</span><span class="p">))</span>

        <span class="k">return</span> <span class="kc">true</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><h1>Bonus</h1><p>There are two reactive extensions to the Coordinator: willNavigate and didNavigate. You can subscribe to them in the AppDelegate for instance.</p><pre><code><div class="highlight"><span></span><span class="n">coordinator</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">didNavigate</span><span class="p">.</span><span class="n">subscribe</span><span class="p">(</span><span class="n">onNext</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="n">flow</span><span class="p">,</span> <span class="n">step</span><span class="p">)</span> <span class="k">in</span>
    <span class="bp">print</span> <span class="p">(</span><span class="s">&quot;did navigate to flow=</span><span class="si">\(</span><span class="n">flow</span><span class="si">)</span><span class="s"> and step=</span><span class="si">\(</span><span class="n">step</span><span class="si">)</span><span class="s">&quot;</span><span class="p">)</span>
<span class="p">}).</span><span class="n">disposed</span><span class="p">(</span><span class="n">by</span><span class="p">:</span> <span class="kc">self</span><span class="p">.</span><span class="n">disposeBag</span><span class="p">)</span>
</div></code></pre><p>This will produce this kind of logs:</p><pre><code><div class="highlight"><span></span><span class="n">did</span> <span class="n">navigate</span> <span class="n">flow</span><span class="p">=</span><span class="n">RxFlowDemo</span><span class="p">.</span><span class="n">MainFlow</span> <span class="n">step</span><span class="p">=</span><span class="n">apiKeyIsComplete</span>
<span class="n">did</span> <span class="n">navigate</span> <span class="n">flow</span><span class="p">=</span><span class="n">RxFlowDemo</span><span class="p">.</span><span class="n">WishlistFlow</span> <span class="n">step</span><span class="p">=</span><span class="n">movieList</span>
<span class="n">did</span> <span class="n">navigate</span> <span class="n">flow</span><span class="p">=</span><span class="n">RxFlowDemo</span><span class="p">.</span><span class="n">WatchedFlow</span> <span class="n">step</span><span class="p">=</span><span class="n">movieList</span>
<span class="n">did</span> <span class="n">navigate</span> <span class="n">flow</span><span class="p">=</span><span class="n">RxFlowDemo</span><span class="p">.</span><span class="n">WishlistFlow</span> <span class="n">step</span><span class="p">=</span><span class="n">moviePicked</span><span class="p">(</span><span class="mi">23452</span><span class="p">)</span>
<span class="n">did</span> <span class="n">navigate</span> <span class="n">flow</span><span class="p">=</span><span class="n">RxFlowDemo</span><span class="p">.</span><span class="n">WishlistFlow</span> <span class="n">step</span><span class="p">=</span><span class="n">castPicked</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="n">did</span> <span class="n">navigate</span> <span class="n">flow</span><span class="p">=</span><span class="n">RxFlowDemo</span><span class="p">.</span><span class="n">WatchedFlow</span> <span class="n">step</span><span class="p">=</span><span class="n">moviePicked</span><span class="p">(</span><span class="mi">55423</span><span class="p">)</span>
<span class="n">did</span> <span class="n">navigate</span> <span class="n">flow</span><span class="p">=</span><span class="n">RxFlowDemo</span><span class="p">.</span><span class="n">WatchedFlow</span> <span class="n">step</span><span class="p">=</span><span class="n">castPicked</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="n">did</span> <span class="n">navigate</span> <span class="n">flow</span><span class="p">=</span><span class="n">RxFlowDemo</span><span class="p">.</span><span class="n">WishlistFlow</span> <span class="n">step</span><span class="p">=</span><span class="n">settings</span>
<span class="n">did</span> <span class="n">navigate</span> <span class="n">flow</span><span class="p">=</span><span class="n">RxFlowDemo</span><span class="p">.</span><span class="n">SettingsFlow</span> <span class="n">step</span><span class="p">=</span><span class="n">settings</span>
<span class="n">did</span> <span class="n">navigate</span> <span class="n">flow</span><span class="p">=</span><span class="n">RxFlowDemo</span><span class="p">.</span><span class="n">SettingsFlow</span> <span class="n">step</span><span class="p">=</span><span class="n">apiKey</span>
<span class="n">did</span> <span class="n">navigate</span> <span class="n">flow</span><span class="p">=</span><span class="n">RxFlowDemo</span><span class="p">.</span><span class="n">SettingsFlow</span> <span class="n">step</span><span class="p">=</span><span class="n">about</span>
<span class="n">did</span> <span class="n">navigate</span> <span class="n">flow</span><span class="p">=</span><span class="n">RxFlowDemo</span><span class="p">.</span><span class="n">SettingsFlow</span> <span class="n">step</span><span class="p">=</span><span class="n">apiKey</span>
<span class="n">did</span> <span class="n">navigate</span> <span class="n">flow</span><span class="p">=</span><span class="n">RxFlowDemo</span><span class="p">.</span><span class="n">SettingsFlow</span> <span class="n">step</span><span class="p">=</span><span class="n">settingsDone</span>
</div></code></pre><p>It can be very helpful for analytics and debug purposes.</p><p>I hope you will find this Reactive Flow Coordinator pattern interesting and useful. Please, feel free to contribute and challenge my work: <a href="https://github.com/RxSwiftCommunity/RxFlow">RxFlow on GitHub</a>.</p><p>The third and last post about RxFlow will be about the tips and tricks I used to implement all the reactive mechanisms.</p><p>Stay tuned.</p>]]></content:encoded></item><item><guid isPermaLink="true">http://blog.warpfactor.io/posts/2017-11-22-VersatileNamespace</guid><title>Versatile Namespace</title><description>In Swift, some APIs such as RxSwift use a technic that confines the code they’re exposing in a dedicated namespace. In this post we will figure out how this is done in the most generic and versatile way.</description><link>http://blog.warpfactor.io/posts/2017-11-22-VersatileNamespace</link><pubDate>Wed, 22 Nov 2017 17:01:00 -0500</pubDate><content:encoded><![CDATA[<p>In Swift, some APIs such as RxSwift use a technic that confines the code they’re exposing in a dedicated namespace. In this post we will figure out how this is done in the most generic and versatile way.</p><pre><code><div class="highlight"><span></span><span class="kd">let</span> <span class="nv">myButton</span> <span class="p">=</span> <span class="bp">UIButton</span><span class="p">()</span>
<span class="n">myButton</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">tap</span><span class="p">.</span><span class="n">subscribe</span><span class="p">(</span><span class="err">…</span><span class="p">)</span> <span class="c1">// this is a RxCocoa kind of code</span>
</div></code></pre><p>Have you ever wondered how is it possible in Swift to write such a line of code ?</p><p>This is the <strong>.rx.</strong> part that seems awkward at first glance, isn’t it ? It acts like some kind of custom namespace.</p><ul><li>Is this a variable ?</li><li>Is this an inner class ?</li></ul><p>We have some clues to figure that out:</p><ul><li>As it is accessible via a dot notation. it must be a member of the UIButton class</li><li>It as some properties such as <strong>tap</strong>, so it is a data structure</li></ul><p>With these two clues we can try to make our very own namespace.</p><h1>Step 1: The naive and not so useful approach</h1><p>In the following examples we will try to add a custom name space to UIButton that exposes a single function <strong>hello</strong>.</p><p>As the namespace must be a data structure, let’s try with a Swift struct:</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">ButtonNameSpace</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">hello</span> <span class="p">()</span> <span class="p">{</span>
        <span class="bp">print</span> <span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>So far so good. Since the namespace should be a member of UIButton, we will add it as a computed property:</p><pre><code><div class="highlight"><span></span><span class="kd">extension</span> <span class="bp">UIButton</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">nameSpace</span><span class="p">:</span> <span class="n">ButtonNameSpace</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">ButtonNameSpace</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Now, we can use it like that:</p><pre><code><div class="highlight"><span></span><span class="kd">let</span> <span class="nv">myButton</span> <span class="p">=</span> <span class="bp">UIButton</span><span class="p">()</span>
<span class="n">myButton</span><span class="p">.</span><span class="n">nameSpace</span><span class="p">.</span><span class="n">hello</span><span class="p">()</span>
</div></code></pre><p>The result of this call will be: “<strong>Hello</strong>”.</p><p>What can this be used for ? Nothing interesting I would say because in the namespace we cannot access the UIButton properties and functions. We will only do some UIButton external stuff, it would be great to add some <strong>context</strong>&nbsp;to our namespace.</p><h1>Step 2: The useful approach</h1><p>In order to access the UIButton properties and functions, we have to give a reference on this button to the data structure used for the namespace.</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">ButtonNameSpace</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="kd">let</span> <span class="nv">button</span><span class="p">:</span> <span class="bp">UIButton</span>

    <span class="kd">init</span><span class="p">(</span><span class="n">with</span> <span class="n">button</span><span class="p">:</span> <span class="bp">UIButton</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">button</span> <span class="p">=</span> <span class="n">button</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">hello</span> <span class="p">()</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">title</span> <span class="p">=</span> <span class="kc">self</span><span class="p">.</span><span class="n">button</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="k">for</span><span class="p">:</span> <span class="p">.</span><span class="n">normal</span><span class="p">)</span> <span class="p">??</span> <span class="s">&quot;&quot;</span>
        <span class="bp">print</span> <span class="p">(</span><span class="s">&quot;Hello </span><span class="si">\(</span><span class="n">title</span><span class="si">)</span><span class="s">&quot;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>The <strong>ButtonNameSpace</strong> struct holds a reference on the UIButton that creates it.</p><p>We still add a computed property to UIButton, and when the <strong>ButtonNameSpace</strong> is created, we pass a reference to the button itself. We can now access the button properties, such as the <strong>title</strong>.</p><pre><code><div class="highlight"><span></span><span class="kd">extension</span> <span class="bp">UIButton</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">nameSpace</span><span class="p">:</span> <span class="n">ButtonNameSpace</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">ButtonNameSpace</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="kc">self</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>We can still use it like that:</p><pre><code><div class="highlight"><span></span><span class="kd">let</span> <span class="nv">myButton</span> <span class="p">=</span> <span class="bp">UIButton</span><span class="p">()</span>
<span class="n">myButton</span><span class="p">.</span><span class="n">setTitle</span><span class="p">(</span><span class="s">&quot;My button&quot;</span><span class="p">,</span> <span class="k">for</span><span class="p">:</span> <span class="p">.</span><span class="n">normal</span><span class="p">)</span>
<span class="n">myButton</span><span class="p">.</span><span class="n">nameSpace</span><span class="p">.</span><span class="n">hello</span><span class="p">()</span>
</div></code></pre><p>The result of this call will be: “<strong>Hello My Button</strong>”. The namespace makes a lot more sense here as it is related to the object within which it is created.</p><p>What if we had to write a namespace for UIImage for instance ? In the actual approach we should declare a <strong>ImageNameSpace</strong>&nbsp;struct as well.</p><p>Actually the true goal of such a struct is to hold a reference on the object in which it is created. It sounds like generics could be involved in this ? No ?</p><h1>Step 3: The best approach</h1><p>The answer is <strong>YES</strong>. This struct <strong>MUST</strong> be generic.</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">MyNameSpace</span><span class="p">&lt;</span><span class="n">Base</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="kd">let</span> <span class="nv">base</span><span class="p">:</span> <span class="n">Base</span>

    <span class="kd">init</span><span class="p">(</span><span class="n">with</span> <span class="n">base</span><span class="p">:</span> <span class="n">Base</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">base</span> <span class="p">=</span> <span class="n">base</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>As we can see, the only purpose of this struct is to hold a reference on <strong>something</strong>&nbsp;that is given as an init parameter so that we can access it in further calls.</p><p>Now, we can use something really great in Swift: <strong>conditional extensions</strong>. It will allow us to add features to this struct only and only if <strong>Base</strong>&nbsp;matches the type we want. For instance, if <strong>Base</strong>&nbsp;is a <strong>UIButton</strong>&nbsp;we add a <strong>Hello</strong>&nbsp;function that will perform the same stuff than the old <strong>ButtonNameSpace</strong>:</p><pre><code><div class="highlight"><span></span><span class="kd">extension</span> <span class="nc">MyNameSpace</span> <span class="k">where</span> <span class="n">Base</span><span class="p">:</span> <span class="bp">UIButton</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">hello</span> <span class="p">()</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">title</span> <span class="p">=</span> <span class="kc">self</span><span class="p">.</span><span class="n">base</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="k">for</span><span class="p">:</span> <span class="p">.</span><span class="n">normal</span><span class="p">)</span> <span class="p">??</span> <span class="s">&quot;&quot;</span>
        <span class="bp">print</span> <span class="p">(</span><span class="s">&quot;Hello </span><span class="si">\(</span><span class="n">title</span><span class="si">)</span><span class="s">&quot;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Instead of accessing <strong>self.button.title</strong>, we can access <strong>self.base.title</strong>&nbsp;as we know that <strong>base</strong> is a UIButton for sure. We can add a computed property to UIButton by taking care of the name space genericity.</p><pre><code><div class="highlight"><span></span><span class="kd">extension</span> <span class="bp">UIButton</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">myNameSpace</span><span class="p">:</span> <span class="n">MyNameSpace</span><span class="p">&lt;</span><span class="bp">UIButton</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">MyNameSpace</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="kc">self</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>The usage and the result are still the same.</p><pre><code><div class="highlight"><span></span><span class="kd">let</span> <span class="nv">myButton</span> <span class="p">=</span> <span class="bp">UIButton</span><span class="p">()</span>
<span class="n">myButton</span><span class="p">.</span><span class="n">setTitle</span><span class="p">(</span><span class="s">&quot;My button&quot;</span><span class="p">,</span> <span class="k">for</span><span class="p">:</span> <span class="p">.</span><span class="n">normal</span><span class="p">)</span>
<span class="n">myButton</span><span class="p">.</span><span class="n">myNameSpace</span><span class="p">.</span><span class="n">hello</span><span class="p">()</span>
</div></code></pre><p>Let’s get back to the UIImage case. It is no more necessary to define a dedicated namespace struct, we can use our generic one combined to a new conditional extension.</p><pre><code><div class="highlight"><span></span><span class="kd">extension</span> <span class="bp">UIImage</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">myNameSpace</span><span class="p">:</span> <span class="n">MyNameSpace</span><span class="p">&lt;</span><span class="bp">UIImage</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">MyNameSpace</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="kc">self</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="nc">MyNameSpace</span> <span class="k">where</span> <span class="n">Base</span><span class="p">:</span> <span class="bp">UIImage</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">hello</span> <span class="p">()</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">title</span> <span class="p">=</span> <span class="kc">self</span><span class="p">.</span><span class="n">base</span><span class="p">.</span><span class="n">accessibilityHint</span> <span class="p">??</span> <span class="s">&quot;&quot;</span>
        <span class="bp">print</span> <span class="p">(</span><span class="s">&quot;Hello </span><span class="si">\(</span><span class="n">title</span><span class="si">)</span><span class="s">&quot;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nv">myImage</span> <span class="p">=</span> <span class="bp">UIImage</span><span class="p">()</span>
<span class="n">myImage</span><span class="p">.</span><span class="n">accessibilityHint</span> <span class="p">=</span> <span class="s">&quot;My Image&quot;</span>
<span class="n">myImage</span><span class="p">.</span><span class="n">myNameSpace</span><span class="p">.</span><span class="n">hello</span><span class="p">()</span>
</div></code></pre><p>In fact this is exactly the way RxSwift has implemented the <strong>rx</strong>&nbsp;name space as we can see here: <a href="https://github.com/ReactiveX/RxSwift/blob/0b66f666ba6955a51cba1ad530311b030fa4db9c/RxSwift/Reactive.swift">Reactive.swift</a></p><p>Hope this helps.</p><p>Stay tuned.</p>]]></content:encoded></item><item><guid isPermaLink="true">http://blog.warpfactor.io/posts/2017-11-09-TypeErasure</guid><title>Type erasure in Swift</title><description>With Swift, you can define protocols by associating one or more generic types. These types are defined using the associatedtype keyword. The name “Generic Type” is a bit usurped here, we should talk about a placeholder for a reserved type. Indeed, we will see that such protocols do not offer great flexibility of use when it comes to consider them as generic.</description><link>http://blog.warpfactor.io/posts/2017-11-09-TypeErasure</link><pubDate>Thu, 9 Nov 2017 17:01:00 -0500</pubDate><content:encoded><![CDATA[<p>With Swift, you can define protocols by associating one or more generic types. These types are defined using the <strong>associatedtype</strong> keyword. The name “<strong>Generic Type</strong>” is a bit usurped here, we should talk about a placeholder for a reserved type. Indeed, we will see that such protocols do not offer great flexibility of use when it comes to consider them as generic.</p><h1>Imagine some protocols</h1><p>In the rest of this article we will rely on a simple case: A <strong>Cup</strong> is a type that can accommodate any type of <strong>Liquid</strong>. We will obviously use protocols to define these two types.</p><p>A <strong>Liquid</strong> is a protocol that exposes three properties: a color, a viscosity and a temperature (which is mutable)</p><pre><code><div class="highlight"><span></span><span class="kd">public</span> <span class="kd">protocol</span> <span class="nc">Liquid</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">temperature</span><span class="p">:</span> <span class="nb">Float</span> <span class="p">{</span> <span class="kr">get</span> <span class="kr">set</span> <span class="p">}</span>
    <span class="kd">var</span> <span class="nv">viscosity</span><span class="p">:</span> <span class="nb">Float</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
    <span class="kd">var</span> <span class="nv">color</span><span class="p">:</span> <span class="nb">String</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>A Cup is a protocol that declares using the <strong>LiquidType</strong> associatedtype. This associated type must be respect the <strong>Liquid</strong> protocol described above. A <strong>Cup</strong> exposes a simple property of type <strong>LiquidType</strong>, as well as a function to fill it.</p><pre><code><div class="highlight"><span></span><span class="kd">public</span> <span class="kd">protocol</span> <span class="nc">Cup</span> <span class="p">{</span>
    <span class="n">associatedtype</span> <span class="n">LiquidType</span><span class="p">:</span> <span class="n">Liquid</span>
    <span class="kd">var</span> <span class="nv">liquid</span><span class="p">:</span> <span class="n">LiquidType</span><span class="p">?</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
    <span class="kd">func</span> <span class="nf">fill</span> <span class="p">(</span><span class="n">with</span> <span class="n">liquid</span><span class="p">:</span> <span class="n">LiquidType</span><span class="p">)</span>
<span class="p">}</span>
</div></code></pre><h1>Let’s implement</h1><p>First of all, two types of liquids: <strong>Coffee</strong> and <strong>Milk</strong>.</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">Coffee</span><span class="p">:</span> <span class="n">Liquid</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">viscosity</span><span class="p">:</span> <span class="nb">Float</span> <span class="p">=</span> <span class="mf">3.4</span>
    <span class="kd">let</span> <span class="nv">color</span> <span class="p">=</span> <span class="s">&quot;black&quot;</span>
    <span class="kd">var</span> <span class="nv">temperature</span><span class="p">:</span> <span class="nb">Float</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="nc">Milk</span><span class="p">:</span> <span class="n">Liquid</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">viscosity</span><span class="p">:</span> <span class="nb">Float</span> <span class="p">=</span> <span class="mf">2.2</span>
    <span class="kd">let</span> <span class="nv">color</span> <span class="p">=</span> <span class="s">&quot;white&quot;</span>
    <span class="kd">var</span> <span class="nv">temperature</span><span class="p">:</span> <span class="nb">Float</span>
<span class="p">}</span>
</div></code></pre><p>Then two types of cups: <strong>CeramicCup</strong> and <strong>PlasticCup</strong>. These classes are generic (to be able to accommodate any type of <strong>Liquid</strong>) and replace the associated type of the protocol <strong>Cup</strong> by a type <strong>L</strong>. By the way, we are indeed obliged to compel <strong>L</strong> to respect the <strong>Liquid</strong> protocol (as defined in the <strong>Cup</strong> protocol).</p><pre><code><div class="highlight"><span></span><span class="kd">class</span> <span class="nc">CeramicCup</span><span class="p">&lt;</span><span class="n">L</span><span class="p">:</span> <span class="n">Liquid</span><span class="p">&gt;:</span> <span class="n">Cup</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">liquid</span><span class="p">:</span> <span class="n">L</span><span class="p">?</span>

    <span class="kd">func</span> <span class="nf">fill</span><span class="p">(</span><span class="n">with</span> <span class="n">liquid</span><span class="p">:</span> <span class="n">L</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">liquid</span> <span class="p">=</span> <span class="n">liquid</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">liquid</span><span class="p">!.</span><span class="n">temperature</span> <span class="o">-=</span> <span class="mi">1</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">PlasticCup</span><span class="p">&lt;</span><span class="n">L</span><span class="p">:</span> <span class="n">Liquid</span><span class="p">&gt;:</span> <span class="n">Cup</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">liquid</span><span class="p">:</span> <span class="n">L</span><span class="p">?</span>

    <span class="kd">func</span> <span class="nf">fill</span><span class="p">(</span><span class="n">with</span> <span class="n">liquid</span><span class="p">:</span> <span class="n">L</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">liquid</span> <span class="p">=</span> <span class="n">liquid</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">liquid</span><span class="p">!.</span><span class="n">temperature</span> <span class="o">-=</span> <span class="mi">10</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>We now have two concrete types of <strong>Cup</strong> that can accommodate any type of <strong>Liquid</strong>.</p><h1>The compiler does not like it …</h1><p>We would now be tempted to use our implementations like this:</p><img src="http://blog.warpfactor.io/Images/2017-11-09-TypeErasure/TypeErasure-Error.png"/><p><strong>And that’s a failure!</strong> We have all seen these kinds of creepy errors “<em>Protocol ‘xxx’ cannot be used as a generic constraint because it has Self or associatedtype</em>”</p><p>It is actually impossible to use <strong>Cup</strong> as a generic type. The compiler does not tolerate the unknown represented by the type associated with the protocol. It would be like solving a system of equations with two unknowns knowing only one equation.</p><p>Even if we tried to help the compiler by explicitly specifying the associated type, we would be blocked since the <strong>Cup&lt;Coffee&gt;</strong> notation is not even possible.</p><h1>… but Design patterns do</h1><p>Generic protocols will probably be supported one day if we refer to the <a href="https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md">Generics Manifesto</a> published on the Swift Github. But in the meantime there is a trick to achieve our ends: the <strong>Type Erasure</strong>. As its name implies, it’s a technique that will allow us to erase the type associated with the protocol and make it generic. This trick may initially scare you because it is not trivial, but it only required to mechanically apply two well-known design patterns to get it done:</p><ul><li>Abstract class: <a href="https://en.wikipedia.org/wiki/Template_method_pattern">https://en.wikipedia.org/wiki/Template_method_pattern</a></li><li>Decorator: <a href="https://en.wikipedia.org/wiki/Decorator_pattern">https://en.wikipedia.org/wiki/Decorator_pattern</a></li></ul><h2>An abstract Cup</h2><p>In Swift there is no abstract class as we know it in Java. However, an abstract class is only a partial and non-instantiable implementation of a type. It is thus easy to write such an implementation of <strong>Cup</strong>. It is done by declaring a generic class respecting the protocol (just like <strong>CeramicCup</strong> or <strong>PlasticCup</strong>) but not allowing its use (the instructions <strong>fatalError</strong> prohibit us the direct use of <strong>AbstractCup</strong>)</p><pre><code><div class="highlight"><span></span><span class="kd">private</span> <span class="kd">class</span> <span class="nc">AbstractCup</span><span class="p">&lt;</span><span class="n">L</span><span class="p">:</span> <span class="n">Liquid</span><span class="p">&gt;:</span> <span class="n">Cup</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">liquid</span><span class="p">:</span> <span class="n">L</span><span class="p">?</span> <span class="p">{</span>
        <span class="bp">fatalError</span><span class="p">(</span><span class="s">&quot;Must implement&quot;</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">fill</span><span class="p">(</span><span class="n">with</span> <span class="n">liquid</span><span class="p">:</span> <span class="n">L</span><span class="p">)</span> <span class="p">{</span>
        <span class="bp">fatalError</span><span class="p">(</span><span class="s">&quot;Must Implement&quot;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>The first step of this technique is now reached, let’s go to the decoration.</p><h2>A cool decorated Cup</h2><p>If you have already used <strong>InputStream</strong> in Java, then you have used the <strong>Decorator</strong> pattern without necessarily realizing it. It is this pattern that allows a <strong>FileInputStream</strong> to be an <strong>InputStream</strong> while adding new features to it. <strong>FileInputStream</strong> will encapsulate a classic <strong>InputStream</strong> (given as a parameter of its constructor), while specializing certain behaviors. The interest of such a pattern is that you can indefinitely nest decorators without freezing the inheritance tree. This is how a <strong>BufferedInputStream</strong> can decorate a <strong>FileInputStream</strong> as well as a basic <strong>InputStream</strong>.</p><p>But back to our cups. In our case, we will build a decorator encapsulating a <strong>Cup</strong>. We already have the basic implementation of our <strong>Cup</strong> with <strong>AbstractCup&nbsp;</strong>(same thing as <strong>InputStream</strong> in the Java example), so we can define a wrapper (or decorator) that will inherit our <strong>AbstractCup</strong> while delegating the properties and function calls to the Cup that it encapsulates.</p><pre><code><div class="highlight"><span></span><span class="kr">final</span> <span class="kd">private</span> <span class="kd">class</span> <span class="nc">CupWrapper</span><span class="p">&lt;</span><span class="n">C</span><span class="p">:</span> <span class="n">Cup</span><span class="p">&gt;:</span> <span class="n">AbstractCup</span><span class="p">&lt;</span><span class="n">C</span><span class="p">.</span><span class="n">LiquidType</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">cup</span><span class="p">:</span> <span class="n">C</span>

    <span class="kd">public</span> <span class="kd">init</span><span class="p">(</span><span class="n">with</span> <span class="n">cup</span><span class="p">:</span> <span class="n">C</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">cup</span> <span class="p">=</span> <span class="n">cup</span>
    <span class="p">}</span>

    <span class="kr">override</span> <span class="kd">var</span> <span class="nv">liquid</span><span class="p">:</span> <span class="n">C</span><span class="p">.</span><span class="n">LiquidType</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">self</span><span class="p">.</span><span class="n">cup</span><span class="p">.</span><span class="n">liquid</span>
    <span class="p">}</span>

    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">fill</span><span class="p">(</span><span class="n">with</span> <span class="n">liquid</span><span class="p">:</span> <span class="n">C</span><span class="p">.</span><span class="n">LiquidType</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">cup</span><span class="p">.</span><span class="n">fill</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="n">liquid</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>We can notice the constraint imposed on the <strong>Cup</strong> and <strong>LiquidType</strong> types. We must make sure that the type of liquid in the <strong>AbstractCup</strong> that we decorate is exactly the same as the one of the cup that we take in parameter in the constructor.</p><p><strong>CupWrapper</strong> is therefore at the same time a <strong>Cup</strong> and a <strong>Cup</strong> wrapper. In a way, it allows to transform a <strong>Cup</strong> (which is only a protocol) in a concrete type. But in the end, it is still well the <strong>Cup</strong> passed as a constructor parameter that will dictate the wrapper behavior.</p><p>At this stage of the process we already have a usable result and we have made our protocol usable in a generic way:</p><pre><code><div class="highlight"><span></span><span class="kd">var</span> <span class="nv">cupsOfCoffee</span> <span class="p">=</span> <span class="p">[</span><span class="n">AbstractCup</span><span class="p">&lt;</span><span class="n">Coffee</span><span class="p">&gt;]()</span>
<span class="n">cupsOfCoffee</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">CupWrapper</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="n">CeramicCup</span><span class="p">&lt;</span><span class="n">Coffee</span><span class="p">&gt;()))</span>
<span class="n">cupsOfCoffee</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">CupWrapper</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="n">PlasticCup</span><span class="p">&lt;</span><span class="n">Coffee</span><span class="p">&gt;()))</span>
</div></code></pre><p>We managed to declare an array of cups of coffee. The <strong>associated type</strong> has been erased as expected.</p><h1>Refinement</h1><p>If we want to bring the concept of Type Erasure to an end (and in the same way that it is implemented in Swift’s standard library), we have one last step to go. I invite you to see the official documentation of the type AnyIterator (<a href="https://developer.apple.com/documentation/swift/anyiterator">Standard Swift Library</a>) to give you an idea of the final goal that we set ourselves.</p><p>I would first like to draw your attention to the declaration of the <strong>AbstractCup</strong> and <strong>CupWrapper</strong> classes. Everything has been done so that they are neither visible nor directly modifiable by the user of our model (<strong>final / private</strong>). The idea is to hide as much as possible the implementation of our Erasure Type pattern and to expose to the outside world only the simplest possible mechanism.</p><p>We will therefore provide a truly generic <strong>AnyCup</strong> class that will be a simple Cup wrapper. Somewhere it is a matter of applying a decorator pattern a second time directly on the Cup protocol (using under the hood our CupWrapper to delegate the work):</p><pre><code><div class="highlight"><span></span><span class="kr">final</span> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">AnyCup</span><span class="p">&lt;</span><span class="n">L</span><span class="p">:</span> <span class="n">Liquid</span><span class="p">&gt;:</span> <span class="n">Cup</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="kd">let</span> <span class="nv">abstractCup</span><span class="p">:</span> <span class="n">AbstractCup</span><span class="p">&lt;</span><span class="n">L</span><span class="p">&gt;</span>

    <span class="kd">public</span> <span class="kd">init</span><span class="p">&lt;</span><span class="n">C</span><span class="p">:</span> <span class="n">Cup</span><span class="p">&gt;(</span><span class="n">with</span> <span class="n">cup</span><span class="p">:</span> <span class="n">C</span><span class="p">)</span> <span class="k">where</span> <span class="n">C</span><span class="p">.</span><span class="n">LiquidType</span> <span class="p">==</span> <span class="n">L</span> <span class="p">{</span>
        <span class="n">abstractCup</span> <span class="p">=</span> <span class="n">CupWrapper</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="n">cup</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">public</span> <span class="kd">func</span> <span class="nf">fill</span><span class="p">(</span><span class="n">with</span> <span class="n">liquid</span><span class="p">:</span> <span class="n">L</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">abstractCup</span><span class="p">.</span><span class="n">fill</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="n">liquid</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">public</span> <span class="kd">var</span> <span class="nv">liquid</span><span class="p">:</span> <span class="n">L</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">self</span><span class="p">.</span><span class="n">abstractCup</span><span class="p">.</span><span class="n">liquid</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Et voila …</p><p>It gives us something quite simple and intuitive to use:</p><pre><code><div class="highlight"><span></span><span class="kd">var</span> <span class="nv">coffeeCups</span> <span class="p">=</span> <span class="p">[</span><span class="n">AnyCup</span><span class="p">&lt;</span><span class="n">Coffee</span><span class="p">&gt;]()</span>
<span class="n">coffeeCups</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">AnyCup</span><span class="p">&lt;</span><span class="n">Coffee</span><span class="p">&gt;(</span><span class="n">with</span><span class="p">:</span> <span class="n">CeramicCup</span><span class="p">&lt;</span><span class="n">Coffee</span><span class="p">&gt;()))</span>
<span class="n">coffeeCups</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">AnyCup</span><span class="p">&lt;</span><span class="n">Coffee</span><span class="p">&gt;(</span><span class="n">with</span><span class="p">:</span> <span class="n">PlasticCup</span><span class="p">&lt;</span><span class="n">Coffee</span><span class="p">&gt;()))</span>

<span class="n">coffeeCups</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="p">(</span><span class="n">anyCup</span><span class="p">)</span> <span class="k">in</span>
    <span class="n">anyCup</span><span class="p">.</span><span class="n">fill</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="n">Coffee</span><span class="p">(</span><span class="n">temperature</span><span class="p">:</span> <span class="mf">60.4</span><span class="p">))</span>
    <span class="bp">print</span><span class="p">(</span><span class="n">anyCup</span><span class="p">.</span><span class="n">liquid</span><span class="p">!.</span><span class="n">color</span><span class="p">)</span>
    <span class="bp">print</span><span class="p">(</span><span class="n">anyCup</span><span class="p">.</span><span class="n">liquid</span><span class="p">!.</span><span class="n">temperature</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nv">milkCups</span> <span class="p">=</span> <span class="p">[</span><span class="n">AnyCup</span><span class="p">&lt;</span><span class="n">Milk</span><span class="p">&gt;]()</span>
<span class="n">milkCups</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">AnyCup</span><span class="p">&lt;</span><span class="n">Milk</span><span class="p">&gt;(</span><span class="n">with</span><span class="p">:</span> <span class="n">CeramicCup</span><span class="p">&lt;</span><span class="n">Milk</span><span class="p">&gt;()))</span>
<span class="n">milkCups</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">AnyCup</span><span class="p">&lt;</span><span class="n">Milk</span><span class="p">&gt;(</span><span class="n">with</span><span class="p">:</span> <span class="n">PlasticCup</span><span class="p">&lt;</span><span class="n">Milk</span><span class="p">&gt;()))</span>

<span class="n">milkCups</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="p">(</span><span class="n">anyCup</span><span class="p">)</span> <span class="k">in</span>
    <span class="n">anyCup</span><span class="p">.</span><span class="n">fill</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="n">Milk</span><span class="p">(</span><span class="n">temperature</span><span class="p">:</span> <span class="mf">30.9</span><span class="p">))</span>
    <span class="bp">print</span><span class="p">(</span><span class="n">anyCup</span><span class="p">.</span><span class="n">liquid</span><span class="p">!.</span><span class="n">color</span><span class="p">)</span>
    <span class="bp">print</span><span class="p">(</span><span class="n">anyCup</span><span class="p">.</span><span class="n">liquid</span><span class="p">!.</span><span class="n">temperature</span><span class="p">)</span>
<span class="p">}</span>
</div></code></pre><p>The line of code that was causing us a problem:</p><pre><code><div class="highlight"><span></span><span class="kd">var</span> <span class="nv">cupsOfCoffee</span> <span class="p">=</span> <span class="p">[</span><span class="n">Cup</span><span class="p">&lt;</span><span class="n">Coffee</span><span class="p">&gt;]()</span>
</div></code></pre><p>becomes:</p><pre><code><div class="highlight"><span></span><span class="kd">var</span> <span class="nv">coffeeCups</span> <span class="p">=</span> <span class="p">[</span><span class="n">AnyCup</span><span class="p">&lt;</span><span class="n">Coffee</span><span class="p">&gt;]()</span>
</div></code></pre><p>The bet is won.</p><p>Personally, I still struggle today with the use of such a mechanism because it is really not so trivial and I have to re-read it several times to be sure to understand it well :-) But if we apply mechanically enough the steps I have just outlined, one is sure to arrive at the expected result, hoping not to have to write it for too long.</p><p>The code is accessible on my Github: <a href="https://github.com/twittemb/TypeErasure">Playground Type Erasure</a></p><p>I hope this can be helpful..</p><h1>Bonus</h1><p>We can even add a little helper function to the <strong>Cup</strong> protocol:</p><pre><code><div class="highlight"><span></span><span class="kd">extension</span> <span class="nc">Cup</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">toAnyCup</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">AnyCup</span><span class="p">&lt;</span><span class="n">LiquidType</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">AnyCup</span><span class="p">&lt;</span><span class="n">LiquidType</span><span class="p">&gt;(</span><span class="n">with</span><span class="p">:</span> <span class="kc">self</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>This is a nice shortcut that can be used this way:</p><pre><code><div class="highlight"><span></span><span class="kd">var</span> <span class="nv">coffeeCups</span> <span class="p">=</span> <span class="p">[</span><span class="n">AnyCup</span><span class="p">&lt;</span><span class="n">Coffee</span><span class="p">&gt;]()</span>
<span class="n">coffeeCups</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">CeramicCup</span><span class="p">&lt;</span><span class="n">Coffee</span><span class="p">&gt;().</span><span class="n">toAnyCup</span><span class="p">())</span>
<span class="n">coffeeCups</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">PlasticCup</span><span class="p">&lt;</span><span class="n">Coffee</span><span class="p">&gt;().</span><span class="n">toAnyCup</span><span class="p">())</span>
</div></code></pre><p>pretty nice :-)</p><p>Stay tuned.</p><p><strong>[Update 2019-05-11]</strong></p><p>As I needed to setup "type erasure" for one of my professional project, I remembered a solution based on closures. I wanted to share it here as it is a very simple and elegant pattern.</p><p>A quick reminder of the protocols we had to "type erase":</p><pre><code><div class="highlight"><span></span><span class="kd">public</span> <span class="kd">protocol</span> <span class="nc">Liquid</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">temperature</span><span class="p">:</span> <span class="nb">Float</span> <span class="p">{</span> <span class="kr">get</span> <span class="kr">set</span> <span class="p">}</span>
    <span class="kd">var</span> <span class="nv">viscosity</span><span class="p">:</span> <span class="nb">Float</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
    <span class="kd">var</span> <span class="nv">color</span><span class="p">:</span> <span class="nb">String</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>and</p><pre><code><div class="highlight"><span></span><span class="kd">public</span> <span class="kd">protocol</span> <span class="nc">Cup</span> <span class="p">{</span>
    <span class="n">associatedtype</span> <span class="n">LiquidType</span><span class="p">:</span> <span class="n">Liquid</span>
    <span class="kd">var</span> <span class="nv">liquid</span><span class="p">:</span> <span class="n">LiquidType</span><span class="p">?</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
    <span class="kd">func</span> <span class="nf">fill</span> <span class="p">(</span><span class="n">with</span> <span class="n">liquid</span><span class="p">:</span> <span class="n">LiquidType</span><span class="p">)</span>
<span class="p">}</span>
</div></code></pre><p>Instead of creating an abstract Class and then a wrapper holding a reference on a type conforming to Cup, we can directly build a generic wrapper Class that will keep some references on the Cup's <strong>behaviors</strong>.</p><pre><code><div class="highlight"><span></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AnyCup</span><span class="p">&lt;</span><span class="n">LiquidType</span><span class="p">:</span> <span class="n">Liquid</span><span class="p">&gt;:</span> <span class="n">Cup</span> <span class="p">{</span>

    <span class="c1">// inner mechanism to &quot;remember&quot; the behavior of the cup</span>
    <span class="c1">// passed in the init function</span>
    <span class="kd">private</span> <span class="kd">let</span> <span class="nv">fillClosure</span><span class="p">:</span> <span class="p">(</span><span class="n">LiquidType</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">Void</span>
    <span class="kd">private</span> <span class="kd">let</span> <span class="nv">liquidClosure</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">LiquidType</span><span class="p">?</span>

    <span class="kd">init</span><span class="p">&lt;</span><span class="n">CupType</span><span class="p">:</span> <span class="n">Cup</span><span class="p">&gt;(</span><span class="n">with</span> <span class="n">cup</span><span class="p">:</span> <span class="n">CupType</span><span class="p">)</span>
    <span class="k">where</span> <span class="n">CupType</span><span class="p">.</span><span class="n">LiquidType</span> <span class="p">==</span> <span class="n">LiquidType</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">fillClosure</span> <span class="p">=</span> <span class="n">cup</span><span class="p">.</span><span class="n">fill</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">liquidClosure</span> <span class="p">=</span> <span class="p">{</span> <span class="k">return</span> <span class="n">cup</span><span class="p">.</span><span class="n">liquid</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// conformance to Cup protocol</span>
    <span class="kd">public</span> <span class="kd">var</span> <span class="nv">liquid</span><span class="p">:</span> <span class="n">LiquidType</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">self</span><span class="p">.</span><span class="n">liquidClosure</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="kd">public</span> <span class="kd">func</span> <span class="nf">fill</span><span class="p">(</span><span class="n">with</span> <span class="n">liquid</span><span class="p">:</span> <span class="n">LiquidType</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">fillClosure</span><span class="p">(</span><span class="n">liquid</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>You can see it as some kind of delegation mechanism. As we cannot keep a reference on a Cup because of its associated type, the wrapper keeps references on the Cup's functions and properties and is responsible for their execution.</p><p>Pretty straight forward 👍.</p>]]></content:encoded></item><item><guid isPermaLink="true">http://blog.warpfactor.io/posts/2017-11-08-RxFlow-Part1</guid><title>RxFlow Part 1: In Theory</title><description>This is a first article in a series that will be the heart of this blog for a while. I’m going to introduce RxFlow: a framework of my design implementing Reactive Flow Coordinator within iOS applications. RxFlow relies on RxSwift and is a project supported by the RxSwiftCommunity.</description><link>http://blog.warpfactor.io/posts/2017-11-08-RxFlow-Part1</link><pubDate>Wed, 8 Nov 2017 17:01:00 -0500</pubDate><content:encoded><![CDATA[<p>This is a first article in a series that will be the heart of this blog for a while. I’m going to introduce <strong>RxFlow</strong>: a framework of my design implementing Reactive Flow Coordinator within iOS applications. <strong>RxFlow</strong> is a project supported by the <a href="https://github.com/RxSwiftCommunity">RxSwiftCommunity</a>.</p><h1>The facts</h1><p>Regarding navigation within an iOS application, two choices are available:</p><ul><li>Use the builtin mechanism provided by Apple and Xcode: storyboard and segues</li><li>Implement a custom mechanism directly in the code</li></ul><p>The disadvantage of these two solutions:</p><ul><li>Builtin mechanism: navigation is relatively static and the storyboards are massive. The navigation code pollutes the UIViewControllers</li><li>Custom mechanism: code can be difficult to set up and can be complex depending on the chosen design pattern (Router, Coordinator)</li></ul><h1>The aim</h1><p><strong>RxFlow</strong> aims to:</p><ul><li>Promote the cutting of storyboards into atomic units to enable collaboration and reusability of UIViewControllers</li><li>Allow the presentation of a UIViewController in different ways according to the navigation context</li><li>Ease the implementation of dependency injection</li><li>Remove any navigation mechanism from UIViewControllers</li><li>Promote reactive programing</li><li>Express the navigation in a declarative way while addressing the majority of the navigation cases</li><li>Facilitate the cutting of an application into logical blocks of navigation</li></ul><h1>From Storyboard to Coordinator pattern</h1><p>As my experience grew as an iOS developper (as well as an Android or a Web app developer), I constantly faced the same doubts regarding navigation. For all other conception issues, there were plenty of patterns to address common architecture questions and separation of concerns needs (MVC, MVP, MVVM, VIPER, …).</p><p>But I was torn appart as soon as navigation was to be designed:</p><ul><li>How do I use dependency injection with Storyboards/Segues ?</li><li>How do I control the flow of the application ?</li><li>How do I get rid of the navigation boilerplate code from the UIViewControllers ?</li></ul><p>As time went by, my conception of an iOS application went from MVC with one Storyboard, to MVC with multiple Storyboards, to finally reach what we could name one of the nowadays best practices: MVVM with <strong>Flow Coordinator</strong>. Which is perfectly fine because we can play with dependency injection, UIViewControllers reusibility, testability. I had the chance to apply this pattern to huge and complex applications in production. But in the end, there were still a couple of issues that bothered me:</p><ul><li>I always had to write the Coordinator pattern, again and again,</li><li>there were a lot of delegation patterns used to allow ViewModels to communicate back with Coordinators.</li><li>I began to look at the Redux pattern, especially the navigation state mechanism. We could have a global navigation state, exposed with a RxSwift Observables, and something listening to this state and driving the navigation. The only thing that I found disturbing was the uniqueness of this navigation state, and the uncontroled responsabilities it could have (as well as the massive data it could store)</li></ul><p>The idea that the navigation was only the reflexion of a state that could be modified step by step begun to emerge. A state that would be spread within the whole application structure, not stored in a single place, but unified by an observer that could react to it and drive the navigation as a consequence. Later in this article, these little states spreaded in the application are called the <strong>Steps</strong> and the observer is called the <strong>Coordinator</strong>.</p><p><strong>RxFlow</strong>&nbsp;is born from all that experience and addressed the two mains concerns that remained from the traditional; Coordinator pattern:</p><ul><li>the developper must no more write Coordinators, he only has to declare the navigation and the states it react to,</li><li>delegation is not needed anymore, since states are RxSwift Observable observed by the FlowCoordinator</li></ul><h1>The key principles</h1><p>To learn more about Coordinator pattern, I suggest you take a look at this article: <a href="http://khanlou.com/2015/10/coordinators-redux/">Coordinator Redux</a>.</p><p>Although this a very good architecture, the <strong>Coordinator</strong> pattern has some drawbacks:</p><ul><li>you have to write the coordination mechanism each time you bootstrap an application</li><li>there can be a lot of boilerplate code because of the delegation pattern that allows to communicate with Coordinators</li></ul><p>RxFlow is a reactive implementation of the Coordinator pattern. It has all the great features of this architecture, but introduces some improvements:</p><ul><li>makes the navigation more declarative</li><li>provides a built-in Coordinator that handles the navigation flows you've declared</li><li>uses reactive programming to address the communication with Coordinators issue</li></ul><p>There are 6 terms you have to be familiar with to understand RxFlow:</p><ul><li><strong>Flow</strong>: each Flow defines a navigation area within your application. This is the place where you declare the navigation actions (such as presenting a UIViewController or another Flow)</li><li><strong>Step</strong>: each Step is a navigation state in your application. Combinaisons of Flows and Steps describe all the possible navigation actions. A Step can even embed inner values (such as Ids, URLs, …) that will be propagated to screens declared in the Flows</li><li><strong>Stepper</strong>: it can be anything that can emit Steps. Steppers will be responsible for triggering every navigation actions within the Flows</li><li><strong>Presentable</strong>: it is an abstraction of something that can be presented (basically UIViewController and Flow are Presentable). Presentables offer Reactive observables that the Coordinator will subscribe to in order to handle Flow Steps in a UIKit compliant way</li><li><strong>Flowable</strong>: it is a simple data structure that combines a Presentable and a stepper. It tells the Coordinator what will be the next thing that will produce new Steps in your Reactive mechanism</li><li><strong>Coordinator</strong>: once the developer has defined the suitable combinations of Flows and Steps representing the navigation possibilities, the job of the Coordinator is to mix these combinaisons in a consistent way.</li></ul><p>This first article just addresses the conceptual and theoretical aspect of this framework. The following articles will talk about <strong>RxFlow</strong>&nbsp;from a more technical point of view with code samples.</p><p>You can already browse the GitHub repo of <strong>RxFlow</strong>, it includes a demo application:&nbsp;<a href="https://github.com/RxSwiftCommunity/RxFlow">https://github.com/RxSwiftCommunity/RxFlow</a>.</p><p>Stay tuned.</p>]]></content:encoded></item><item><guid isPermaLink="true">http://blog.warpfactor.io/posts/2017-11-01-EZStream</guid><title>EZStream</title><description>EZStream is the easiest way to stream your device camera in any web browser.</description><link>http://blog.warpfactor.io/posts/2017-11-01-EZStream</link><pubDate>Wed, 1 Nov 2017 17:01:00 -0400</pubDate><content:encoded><![CDATA[<p>EZStream is the easiest way to stream your device camera in any web browser. Tap on the screen to toggle your IP address and put that address in your browser.</p><p>Et Voila.</p><p>A red dot in the upper right corner of EZStream indicates that someone is watching your stream.Beware, this only works on a local network.</p><p>It is an application I've made a long time ago when I was trying to learn Swift and iOS development. &nbsp;I would probably do it differently now :-)</p><p>If anyone is interested, here is the <a href="https://github.com/twittemb/StreamIt">GitHub repo</a>. The major challenge was to make a MJPEG stream and a web server on the device.</p><img src="http://blog.warpfactor.io/Images/2017-11-01-EZStream/screen-capture.png"/>]]></content:encoded></item></channel></rss>